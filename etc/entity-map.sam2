# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Entity map converter
#
# This program accepts the `entity-map.txt` file as input, outputting a
# (very large) map literal corresponding to its contents.
#

SELF_PATH, ARGS* ::

# Map of hex digit tokens to int values.
def DIGIT_VALUES = [
    @"0": 0,  @"1": 1,  @"2": 2,  @"3": 3,  @"4": 4,
    @"5": 5,  @"6": 6,  @"7": 7,  @"8": 8,  @"9": 9,
    @"A": 10, @"B": 11, @"C": 12, @"D": 13, @"E": 14, @"F": 15
];

# Parses the end of a line, which consists of any number of spaces, optionally
# followed by a comment, and finally followed by a newline.
def parLineEnd = {/
    " "*
    ("#" [! "\n"]*)?
    "\n"
/};

# Parses a comma, optionally surrounded by whitespace.
def parComma = {/
    " "*
    ","
    " "*
/};

# Parses a single code point, yielding the value as a single-character string.
def parCodePoint = {/
    " "*
    "U+"
    "0"*
    digits = (
        ch = ["0".."9" "A".."F"]
        { <> DIGIT_VALUES[ch] }
    )+

    {
        def value = listReduce(0, digits)
            { result, ., digit :: <> result * 16 + digit };
        <> charFromInt(value);
    }
/};

# Parses a list of code points, yielding a converted string of them.
def parCodePoints = {/
    codes = parCodePoint+
    { <> stringAdd(codes*) }
/};

# Parses an entry description.
def parDescription = {/
    [! ",\n"]*
/};

# Parses an entity name.
def parName = {/
    chars = ["a".."z" "A".."Z" "0".."9" "."]+
    { <> stringFromTokenList(chars) }
/};

# Parses a single content line.
def parContentLine = {/
    string = parCodePoints
    parComma
    parDescription
    names = (parComma parName)+
    { <> [names*: string] }
/};

# Parses the entire file.
def parFile = {/
    lines = (
        # Skip empty lines.
        parLineEnd*
        parContentLine
    )*

    # Skip trailing empty lines.
    parLineEnd*

    (
        extras = [! "\n"]+
        {
            def string = stringFromTokenList(extras);
            io0Die("Unexpected line: \%q(string)")
        }
    )?

    { <> mapAdd(lines*) }
/};

def inPath = [listButLast(SELF_PATH)*, "entity-map.txt"];
def outPath = [listButLast(SELF_PATH)*, "entityMap.sam"];
io0Note("Processing file: \%q(inPath)");

def text = io0ReadFileUtf8(inPath);
def result = pegApply(parFile, text);

def resultText = mapReduce("", result) { result, key, value ::
    <> "\(result)    \%q(key): \%q(value),\n"
};

# Note: The `[:]*` at the end of the map is a hacky way to avoid having to
# omit the comma from the last "real" mapping line.
def outText = "\
    # Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
    # Licensed AS IS and WITHOUT WARRANTY under the Apache License,
    # Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>
    #
    # GENERATED FILE. DO NOT MODIFY DIRECTLY.
    # GENERATED FILE. DO NOT MODIFY DIRECTLY.
    # GENERATED FILE. DO NOT MODIFY DIRECTLY.
    #
    # This file was generated with the entity-map program based on the
    # entity-map.txt file as input. Rerun that program should the contents
    # of this file need to be updated.

    # Documented in the specification.
    def ENTITY_MAP = [
  \/\(resultText)\
  \/    [:]*
  \/];

    <> [ ENTITY_MAP: ENTITY_MAP ]
    ";

io0WriteFileUtf8(outPath, outText);

<> 0
