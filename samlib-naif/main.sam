## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Samizdat Core Library Secondary Loader
##
## This gets loaded from `boot.sam` and is responsible for returning
## the standard global variable environment.
##

def ModuleSystem = moduleLoad(["core", "ModuleSystem"]);
def globals = intraLoad(["globals", "main"]);

## Initializes the world, and returns the final global variable environment.
## `libraryDir` is list-style absolute path to the system library.
fn init(libraryDir) {
    ## `null` isn't yet defined when this file is parsed. Hence, `@Null`.
    def earlyGlobals = { moduleEnvironment()*, globals* };
    def loader = ModuleSystem::makeModuleLoader(
        [libraryDir*, "modules"],
        @Null,
        earlyGlobals);
    def load = ModuleSystem::moduleLoad;

    ## This is just loaded to set up generic function bindings.
    load(loader, ["core", "Boolean"]);

    <> {
        globals*,
        Bitwise:    load(loader, ["core", "Bitwise"]),
        Box:        load(loader, ["core", "Box"]),
        Collection: load(loader, ["core", "Collection"]),
        Format:     load(loader, ["core", "Format"]),
        Generator:  load(loader, ["core", "Generator"]),
        Number:     load(loader, ["proto", "Number"]),
        Peg:        load(loader, ["core", "Peg"]),
        Range:      load(loader, ["core", "Range"]),
        Sequence:   load(loader, ["core", "Sequence"]),

        ## The one higher-layer function that gets exported to the environment.
        runCommandLine: load(loader, ["core", "CommandLine"])::runCommandLine
    }
};

<> {init}
