## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Samizdat Layer 1 tokenizer
##
## The following is a near-transliteration of the token grammar in
## the Samizdat Layer 0 and Samizdat Layer 1 specifications.
##


##
## These definitions are meant to mirror the code in the spec for
## tokenization, as closely as possible.
##

## Map of all the keywords, from their string name to valueless tokens. These
## are (to a first approximation) operators whose spellings match the
## tokenization syntax of identifiers.
def KEYWORDS = Generator::collectAsMap(
    Generator::makeFilterGenerator([
        "break", "continue", "def", "fn", "return", "var",
        ## Layer 2 defines additional keywords here.
        []*])
        { name <> {(name): @(name)} });

## These are all the int digits, as a map from strings to digit values. This
## includes hex digits as well, in both lower and upper case. Finally, this
## includes a mapping of `"_"` to `-1` for the implementation of the
## "digit space" syntax.
##
## **Note:** Only the decimal digits matter in Layer 0 and Layer 1.
def INT_CHARS = {
    "0": 0, "1": 1, "2": 2, "3": 3, "4": 4,
    "5": 5, "6": 6, "7": 7, "8": 8, "9": 9,
    "a": 10, "b": 11, "c": 12, "d": 13, "e": 14, "f": 15,
    "A": 10, "B": 11, "C": 12, "D": 13, "E": 14, "F": 15,
    "_": -1
};

## Given a decimal digit, returns the digit value.
fn intFromDigitChar(ch) {
    <> get(INT_CHARS, typeNameOf(ch))
};

## Converts a list of digit values into an int, given the base.
fn intFromDigitList(base, digits) {
    var result = 0;

    Generator::filterPump(digits) { digit ->
        ifIs { <> perNe(digit, -1) }
            { result := Number::add(Number::mul(result, base), digit) }
    };

    <> result
};

## Documented in spec.
def tokWhitespace = Peg::makeMainSequence(
    Peg::makeLookaheadSuccess(Peg::makeCharSet("# \n")),
    Peg::makePlus(
        Peg::makeChoice(
            Peg::makePlus(Peg::makeCharSet(" \n")),
            Peg::makeSequence(
                Peg::makeString("#"),
                Peg::makeCharSet("#!"),
                Peg::makeStar(Peg::makeCharSetComplement("\n"))))));

## Documented in spec.
def tokPunctuation = Peg::makeMainSequence(
    Peg::makeLookaheadSuccess(Peg::makeCharSet("@:.,=-+?;*<>{}()[]", "&|!%")),
    Peg::makeChoice(
        Peg::makeString("->"),
        Peg::makeString(":="),
        Peg::makeString("::"),
        Peg::makeString(".."),
        Peg::makeString("<>"),
        Peg::makeString("@@"),
        Peg::makeString("{:"),
        Peg::makeString(":}"),
        Peg::any));

## Documented in spec.
def tokInt = Peg::makeMainSequence(
    Peg::makePlus(
        Peg::makeSequence(
            Peg::makeCharSet("0123456789"),
            Peg::makeCode(intFromDigitChar))),
    Peg::makeCode { digits <> @int(intFromDigitList(10, digits)) });

## Documented in spec.
def tokStringPart = Peg::makeMainChoice(
    Peg::makeSequence(
        Peg::makePlus(Peg::makeCharSetComplement("\\\"\n")),
        Peg::makeCode(Peg::stringFromTokenList)),
    Peg::makeSequence(
        Peg::makeString("\n"),
        Peg::makeStar(Peg::makeString(" ")),
        Peg::makeResult("\n")),
    Peg::makeSequence(
        Peg::makeString("\\"),
        Peg::makeChoice(
            Peg::makeSequence(Peg::makeString("\\"), Peg::makeResult("\\")),
            Peg::makeSequence(Peg::makeString("\""), Peg::makeResult("\"")),
            Peg::makeSequence(Peg::makeString("n"),  Peg::makeResult("\n")),
            Peg::makeSequence(Peg::makeString("r"),  Peg::makeResult("\r")),
            Peg::makeSequence(Peg::makeString("t"),  Peg::makeResult("\t")),
            Peg::makeSequence(Peg::makeString("0"),  Peg::makeResult("\0")))));

## Documented in spec.
def tokString = Peg::makeMainSequence(
    Peg::makeString("\""),
    Peg::makeStar(tokStringPart),
    Peg::makeChoice(
        Peg::makeSequence(
            Peg::makeString("\""),
            Peg::makeCode { ., parts, . <> @string(cat("", parts*)) }),
        Peg::makeCode { ., . <> @error("Unterminated string literal.") }));

## These are all the characters which are allowed to start an identifier.
def IDENTIFIER_START_CHARS =
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";

## These are all the characters which are allowed to be in an identifier.
def IDENTIFIER_CHARS = cat(IDENTIFIER_START_CHARS, "0123456789");

## Documented in spec.
def tokIdentifier = Peg::makeMainSequence(
    Peg::makeCharSet(IDENTIFIER_START_CHARS),
    Peg::makeStar(Peg::makeCharSet(IDENTIFIER_CHARS)),
    Peg::makeCode { one, rest ->
        def string = Peg::stringFromTokenList([one, rest*]);
        <> ifValueOr { <> get(KEYWORDS, string) }
            { <> @identifier(string) }
    });

## Documented in spec.
def tokQuotedIdentifier = Peg::makeMainSequence(
    Peg::makeString("\\"),
    tokString,
    Peg::makeCode { ., s <> @identifier(dataOf(s)) });

## Documented in spec.
def tokError = Peg::makeMainSequence(
    Peg::any,
    Peg::makeStar(Peg::makeCharSetComplement("\n")),
    Peg::makeCode { badCh, . ->
        def msg = cat("Unrecognized character: ", typeNameOf(badCh));
        <> @error(msg)
    });

## Documented in spec.
def tokToken = Peg::makeMainChoice(
    tokString,
    tokIdentifier,
    tokQuotedIdentifier,
    tokPunctuation,
    tokInt,
    tokError);

## Documented in spec.
def tokFile = Peg::makeMainSequence(
    Peg::makeStar(
        Peg::makeSequence(
            Peg::makeOpt(tokWhitespace),
            tokToken)),
    Peg::makeOpt(tokWhitespace),
    Peg::makeCode { tokens, . <> tokens });


##
## Exported Definitions
##

## Documented in spec.
fn tokenize(programText) {
    <> Peg::apply(tokFile, programText)
};

<> {
    tokenize
}
