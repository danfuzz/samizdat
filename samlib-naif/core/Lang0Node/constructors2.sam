## Copyright 2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>


def REFS = submoduleUse("refs")::REFS;
def constructors1 = submoduleUse("constructors1");

def makeDirectApply = constructors1::makeDirectApply;
def makeDirectCall  = constructors1::makeDirectCall;
def makeInterpolate = constructors1::makeInterpolate;
def makeThunk       = constructors1::makeThunk;


##
## Exported definitions
##

## Documented in spec.
fn makeCall(function, actuals*) {
    ifIs { <> perEq(actuals, []) }
        {
            ## No actuals. Easy out.
            return makeDirectCall(function)
        };

    ## Convert the actuals as if interpolation needs to be handled. If in the
    ## end it doesn't, then the original actuals are used as-is. This converts
    ## runs of non-interpolated actuals to `makeList(ac, ac, ...)`, which
    ## converts cleanly at runtime as part of the ultimate call to `cat`.

    var pending = [];       ## Non-interpolated actuals, to be `makeList`ed.
    var cookedActuals = []; ## Fully-processed actuals (of either type).

    fn addToCooked(actual) {
        cookedActuals := [cookedActuals*, actual];
    };

    fn addPendingToCooked() {
        ifIs { <> perNe(pending, []) }
            {
                addToCooked(makeDirectCall(REFS::makeList, pending*));
                pending := [];
            }
    };

    Generator::filterPump(actuals) { actual ->
        ifIs { <> hasType(actual, "interpolate") }
            {
                addPendingToCooked();
                addToCooked(
                    makeDirectCall(REFS::collect, dataOf(actual)::value))
            }
            { pending := [pending*, actual] }
    };

    ifIs { <> perEq(cookedActuals, []) }
        {
            ## There were no interpolated arguments.
            return makeDirectCall(function, actuals*)
        };

    ## There is at least one interpolated argument.

    addPendingToCooked();

    <> ifIs { <> Sequence::nth(cookedActuals, 1) }
        {
            ## More than one actual. Use `cat`.
            <> makeDirectApply(function,
                makeDirectCall(REFS::cat, cookedActuals*))
        }
        {
            ## Only one. Use it directly as the actuals for the `apply` node.
            <> makeDirectApply(function, cookedActuals*)
        }
};

## Documented in spec.
fn makeCallNonlocalExit(nleRef, optExpr?) {
    <> ifValue { <> optExpr* }
        { expr ->
            <> makeCall(REFS::nonlocalExit,
                nleRef,
                makeInterpolate(makeOptValueExpression(expr)))
        }
        { <> makeDirectCall(REFS::nonlocalExit, nleRef) }
};

## Documented in spec.
fn makeGetExpression(collArg, keyArg) {
    <> makeDirectCall(REFS::get, collArg, keyArg)
};

## Documented in spec.
fn makeOptValueExpression(node) {
    <> makeDirectCall(REFS::optValue, makeThunk(node))
};

<> {
    makeCall,
    makeCallNonlocalExit,
    makeGetExpression,
    makeOptValueExpression
}
