## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>


def constructors1 = submoduleUse("constructors1");

def makeCall       = constructors1::makeCall;
def makeLiteral    = constructors1::makeLiteral;
def makeVarRef     = constructors1::makeVarRef;


##
## Private definitions
##

## Global variable names / regular variable references.
def NAMES = [
    "break",
    "cat",
    "collect",
    "continue",
    "eq",
    "ge",
    "get",
    "gt",
    "ifIs",
    "ifNot",
    "ifValue",
    "ifValueOr",
    "ifValues",
    "le",
    "loop",
    "lt",
    "makeList",
    "makeValue",
    "makeValueMap",
    "ne",
    "nonlocalExit",
    "optValue",
    "perEq",
    "perGe",
    "perGt",
    "perLe",
    "perLt",
    "perNe",
    "return"
];

## Module-scoped names.
def MOD_NAMES = [
    {mod: "Bitwise",    name: "and"},
    {mod: "Bitwise",    name: "not"},
    {mod: "Bitwise",    name: "or"},
    {mod: "Bitwise",    name: "shl"},
    {mod: "Bitwise",    name: "shr"},
    {mod: "Bitwise",    name: "xor"},
    {mod: "Collection", name: "sizeOf"},
    {mod: "Format",     name: "formatterFor"},
    {mod: "Format",     name: "usual"},
    {mod: "Generator",  name: "filterAll"},
    {mod: "Generator",  name: "filterPump"},
    {mod: "Generator",  name: "makeRepeatGenerator"},
    {mod: "Generator",  name: "makeFilterGenerator"},
    {mod: "Number",     name: "add"},
    {mod: "Number",     name: "div"},
    {mod: "Number",     name: "divEu"},
    {mod: "Number",     name: "mod"},
    {mod: "Number",     name: "modEu"},
    {mod: "Number",     name: "mul"},
    {mod: "Number",     name: "neg"},
    {mod: "Number",     name: "sub"},
    {mod: "Peg",        name: "any"},
    {mod: "Peg",        name: "empty"},
    {mod: "Peg",        name: "makeChoice"},
    {mod: "Peg",        name: "makeCode"},
    {mod: "Peg",        name: "makeLookaheadFailure"},
    {mod: "Peg",        name: "makeLookaheadSuccess"},
    {mod: "Peg",        name: "makeMainSequence"},
    {mod: "Peg",        name: "makeOpt"},
    {mod: "Peg",        name: "makePlus"},
    {mod: "Peg",        name: "makeSequence"},
    {mod: "Peg",        name: "makeStar"},
    {mod: "Peg",        name: "makeString"},
    {mod: "Peg",        name: "makeThunk"},
    {mod: "Peg",        name: "makeToken"},
    {mod: "Peg",        name: "makeTokenSet"},
    {mod: "Peg",        name: "makeTokenSetComplement"},
    {mod: "Range",      name: "makeExclusiveRange"},
    {mod: "Range",      name: "makeInclusiveRange"},
    {mod: "Range",      name: "makeOpenRange"},
    {mod: "Sequence",   name: "nthFromEnd"},
    {mod: "Sequence",   name: "reverse"},
    {mod: "Sequence",   name: "sliceGeneral"},
    {mod: "Sequence",   name: "sliceExclusive"},
    {mod: "Sequence",   name: "sliceInclusive"}
];

## Used in `MOD_NAMES` processing.
def REF_get = makeVarRef("get");


##
## Exported definitions
##

## Documented in spec.
def REFS = cat(
    (Generator::filterAll(NAMES) { name <> {(name): makeVarRef(name)} })*,
    (Generator::filterAll(MOD_NAMES) { modName ->
        def mod = modName::mod;
        def name = modName::name;
        <> {
            (cat(mod, "_", name)):
                makeCall(REF_get, makeVarRef(mod), makeLiteral(name))
        }
    })*
);

<> {REFS}
