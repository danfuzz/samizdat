## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Samizdat Layer 2 Tree Parser
##

def safeVarName = submoduleUse("safeVarName")::safeVarName;
def tokenize = submoduleUse("tokenize")::tokenize;

def Io1 = moduleUse({name: ["core", "Io1"]});
def Lang0 = moduleUse({name: ["core", "Lang0"]});

def Lang0Node = moduleUse({name: ["core", "Lang0Node"]});
def REFS               = Lang0Node::REFS;
def get_actuals        = Lang0Node::get_actuals;
def get_formals        = Lang0Node::get_formals;
def get_function       = Lang0Node::get_function;
def get_interpolate    = Lang0Node::get_interpolate;
def get_lvalue         = Lang0Node::get_lvalue;
def get_name           = Lang0Node::get_name;
def get_statements     = Lang0Node::get_statements;
def get_value          = Lang0Node::get_value;
def get_yield          = Lang0Node::get_yield;
def get_yieldDef       = Lang0Node::get_yieldDef;
def makeApply          = Lang0Node::makeApply;
def makeCall           = Lang0Node::makeCall;
def makeCallOrApply    = Lang0Node::makeCallOrApply;
def makeCallThunks     = Lang0Node::makeCallThunks;
def makeGet            = Lang0Node::makeGet;
def makeInterpolate    = Lang0Node::makeInterpolate;
def makeJump           = Lang0Node::makeJump;
def makeLiteral        = Lang0Node::makeLiteral;
def makeOptValue       = Lang0Node::makeOptValue;
def makeThunk          = Lang0Node::makeThunk;
def makeVarBind        = Lang0Node::makeVarBind;
def makeVarDef         = Lang0Node::makeVarDef;
def makeVarDefMutable  = Lang0Node::makeVarDefMutable;
def makeVarRef         = Lang0Node::makeVarRef;
def makeVarRefLvalue   = Lang0Node::makeVarRefLvalue;
def withoutInterpolate = Lang0Node::withoutInterpolate;


##
## Private Definitions
##

## Reports the given list of pending tokens as part of error processing.
fn reportError(pending) {
    Io1::note("Pending tokens:");

    Generator::filterPump(pending, Range::makeInclusiveRange(1, 50))
        { token, . -> Io1::note(cat("    ", Format::source(token))) };

    Io1::die("\nExtra tokens at end of program.")
};

## Set-like map of all lowercase identifier characters. Used to figure
## out if we're looking at a keyword in the `identifierString` rule.
def LOWER_ALPHA = {
    (Range::makeInclusiveRange("a", "z"))*: true
};


##
## Layer 0 Rules
##
## This section consists of the definitions required to implement Layer 0,
## with comments indicating the "hooks" for higher layers.
##

## Forward declarations required for layer 2. These are all add-ons to
## layer 0 or 1 rules, used to expand the syntactic possibilities of the
## indicated base forms.
def parExpression2;
def parNonlocalExit2;
def parPostfixOperator2;
def parPrefixOperator2;
def parStatement2;
def parTerm2;

## Forward declaration required for integrating layer 1 definitions.
def parParser;

## Forward declarations.
def parAssignExpression;
def parFnExpression;
def parOpExpression;
def parProgramBody;
def parUnaryExpression;

## Parses an expression in general.
def parExpression = {:
    ## This one's the top level "regular-looking" expression (in that it
    ## covers the territory of C-style expressions).
    %parAssignExpression
|
    ## This one is only nominally "regular-looking" (in that not many C
    ## family languages have function expressions).
    %parFnExpression
|
    ## Note: Layer 2 adds additional rules here.
    %parExpression2
:};

## Parses a parenthesized expression. This produces a result identical to
## the inner `expression` node, except without an `interpolate` binding.
def parParenExpression = {:
    @"("
    ex = parExpression

    (
        ## Reject commas explicitly, to make for a better error message and
        ## also avoid letting a would-be parenthesized expression turn out to
        ## be taken to be a function application argument list.
        @","
        { Io1::die("Comma not allowed within parenthesized expression.") }
    )?

    @")"

    { <> withoutInterpolate(ex) }
:};

## Parses a variable reference.
def parVarRef = {:
    name = @identifier
    { <> makeVarRefLvalue(dataOf(name)) }
:};

## Parses a variable definition or declaration.
def parVarDef = {:
    style = [@def @var]
    name = @identifier
    optExpr = (@"=" parExpression)?

    {
        def nameString = dataOf(name);
        <> ifIs { <> hasType(style, "def") }
            { <> makeVarDef(nameString, optExpr*) }
            { <> makeVarDefMutable(nameString, optExpr*) }
    }
:};

## Parses a yield / nonlocal exit definition, yielding the def name.
def parYieldDef = {:
    @"<"
    name = @identifier
    @">"
    { <> dataOf(name) }
:};

## Parses an optional yield / nonlocal exit definition, always yielding
## a map (an empty map if no yield def was present).
def parOptYieldDef = {:
    y = parYieldDef
    { <> {yieldDef: y} }
|
    { <> {} }
:};

## Parses a formal argument decalaration.
def parFormal = {:
    name = (
        n = @identifier
        { <> {name: dataOf(n)} }
    |
        @"." { <> {} }
    )

    repeat = (
        r = [@"?" @"*" @"+"]
        { <> {repeat: typeNameOf(r)} }
    |
        { <> {} }
    )

    { <> {name*, repeat*} }
:};

## Parses a list of formal arguments, with no surrounding parentheses.
def parFormalsList = {:
    one = parFormal
    rest = (@"," parFormal)*
    { <> [one, rest*] }
|
    { <> [] }
:};

## Parses program / function declarations.
def parProgramDeclarations = {:
    yieldDef = parOptYieldDef
    formals = parFormalsList

    (@"->" | &@"<>")

    { <> {formals, yieldDef*} }
|
    { <> {formals: []} }
:};

## Parses a program (top-level program or contents inside function braces).
def parProgram = {:
    decls = parProgramDeclarations
    body = %parProgramBody
    { <> @closure{decls*, body*} }
:};

## Parses a closure (in-line anonymous function, with no extra bindings).
def parClosure = {:
    @"{"
    prog = parProgram
    @"}"
    { <> prog }
:};

## Parses a closure which must not define any formal arguments. This is done
## by parsing an arbitrary closure and then verifying that it does not
## declare formals. This is preferable to not-including formal argument
## syntax, because (a) no rule wants to differentiate these cases (rules
## either want an arbitrary closure or a specifically-constrained kind); (b)
## it reduces redundancy in the syntax, and (c) the error case on the former
## would be more obscure (as in just something like "unexpected token" on
## the would-be formal argument).
def parNullaryClosure = {:
    c = parClosure

    {
        def formals = get_formals(c);
        ifIs { <> ne(formals, []) }
            { Io1::die("Invalid formal argument in code block.") };
        <> c
    }
:};

## Parses a closure which must have neither formal arguments nor a yield
## definition. See `parseNullaryClosure` above for discussion.
def parCodeOnlyClosure = {:
    c = parNullaryClosure

    {
        ifIs { <> get_yieldDef(c) }
            { Io1::die("Invalid yield definition in code block.") };
        <> c
    }
:};

## Common parsing for `fn` statements and expressions. The syntax for
## both is identical, except that the statement form requires that the
## function be named. The result of this rule is a map identical in form to
## what's required for a closure payload, except that `name` may also
## be bound.
##
## The result of this rule is a `closure` node, with `name` possibly
## (but not necssarily) bound in the payload.
##
## The translation is along these lines:
##
## ```
## fn <out> name(arg1, arg2) { stat1; stat2 }
## ```
## =>
## ```
## { <\"return"> arg1, arg2 ->
##     def out = \"return";
##     stat1;
##     stat2
## }
## ```
##
## with:
##
## * no yield def binding statement if an explicit yield def was not present.
##
## * the key `name` bound to the function name, if a name was defined.
def parFnCommon = {:
    @fn

    ## This is a variable definition statement which binds the yield def
    ## name to the `return` function, if there is in fact a yield def present.
    returnDef = (
        y = parYieldDef
        { <> makeVarDef(y, REFS::return) }
    )?

    name = (
        n = @identifier
        { <> {name: dataOf(n)} }
    |
        { <> {} }
    )

    @"("
    formals = parFormalsList
    @")"

    code = parCodeOnlyClosure

    {
        def statements = [returnDef*, get_statements(code)*];
        <> @closure{
            dataOf(code)*,
            name*,
            formals,
            yieldDef: "return",
            statements
        }
    }
:};

## Parses a `fn` definition statement. The syntax here is the same as
## what's recognized by `parFnCommon`, except that the name is required.
## We don't error out (terminate the runtime) on a missing name, though, as
## that just means that we're looking at a legit `fn` expression, which will
## get successfully parsed by the `expression` alternative of `statement`.
def parFnDef = {:
    closure = parFnCommon

    name = { <> get_name(closure) }
    {
        ## `@topDeclaration` is split apart in the `programBody` rule.
        <> @topDeclaration{
            top:  makeVarDef(name),
            main: makeVarBind(name, closure)
        }
    }
:};

## Parses a `fn` (function with `return` binding) expression. The translation
## is as described in `parFnCommon` (above) if the function is not given a
## name. If the function *is* given a name, the translation is along the
## following lines (so as to enable self-recursion):
##
## ```
## fn <out> name ...
## ```
## =>
## ```
## {
##     def name;
##     <> name := { <out> ... }
## }()
## ```
parFnExpression := {:
    closure = parFnCommon

    (
        name = { <> get_name(closure) }
        {
            def mainClosure = @closure{
                formals:    [],
                statements: [makeVarDef(name)],
                yield:      makeVarBind(name, closure)
            };

            <> makeCall(mainClosure)
        }
    |
        { <> closure }
    )
:};

## Parses an integer literal. Note: This includes parsing a `-` prefix,
## so that simple negative constants aren't turned into complicated function
## calls.
def parInt = {:
    @"-"
    i = @int
    { <> makeLiteral(Number::neg(dataOf(i))) }
|
    i = @int
    { <> makeLiteral(dataOf(i)) }
:};

## Parses a string literal.
def parString = {:
    s = @string
    { <> makeLiteral(dataOf(s)) }
:};

## Parses an identifier, identifier-like keyword, or string literal,
## returning a string literal in all cases.
def parIdentifierString = {:
    parString
|
    ident = @identifier
    { <> makeLiteral(dataOf(ident)) }
|
    token = .
    {
        <> ifNot { <> dataOf(token) }
            {
                def type = typeNameOf(token);
                def firstCh = Sequence::nth(type, 0);
                <> ifIs { <> get(LOWER_ALPHA, firstCh) }
                    { <> makeLiteral(type) }
            }
    }
:};

## Parses a map key.
def parKey = {:
    key = parIdentifierString
    @":"
    { <> key }
|
    key = parExpression
    @":"
    { <> key }
:};

## Parses a mapping (element of a map).
def parMapping = {:
    keys = parKey*
    value = parExpression

    {
        <> ifIs { <> eq(keys, []) }
            { <out> ->
                ## No keys were specified, so the value must be either a
                ## whole-map interpolation or a variable-name-to-its-value
                ## binding.
                ifValue { <> get_interpolate(value) }
                    { interp -> <out> interp };
                ifIs { <> hasType(value, "varRef") }
                    {
                        <out> makeCall(REFS::makeValueMap,
                            makeLiteral(get_name(value)), value)
                    }
            }
            {
                ## One or more keys.
                <> makeCallOrApply(REFS::makeValueMap,
                    keys*, withoutInterpolate(value))
            }
    }
:};

## Parses a map literal.
def parMap = {:
    @"{"

    result = (
        one = parMapping
        rest = (@"," parMapping)*
        {
            <> ifIs { <> eq(rest, []) }
                { <> one }
                { <> makeCall(REFS::cat, one, rest*) }
        }
    |
        { <> makeLiteral({}) }
    )

    @"}"

    { <> result }
:};

## Parses a list item or function call argument. This handles all of:
##
## * accepting general expressions
## * rejecting expressions that look like `key:value` mappings. This is
##   effectively "reserved syntax" (for future expansion); rejecting this
##   here means that `x:y` won't be mistaken for other valid syntax.
def parListItem = {:
    parIdentifierString
    @":"
    { Io1::die("Mapping syntax not valid as a list item or call argument.") }
|
    parExpression
:};

## Parses an "unadorned" (no bracketing) list. Yields a list (per se)
## of contents.
def parUnadornedList = {:
    one = parListItem
    rest = (@"," parListItem)*
    { <> [one, rest*] }
|
    { <> [] }
:};

## Parses a list literal.
def parList = {:
    @"["
    expressions = parUnadornedList
    @"]"
    {
        <> ifIs { <> eq(expressions, []) }
            { <> makeLiteral([]) }
            { <> makeCallOrApply(REFS::makeList, expressions*) }
    }
:};

## Parses a literal in derived value form.
def parDeriv = {:
    @"@"

    type = (parIdentifierString | parParenExpression)
    value = (parParenExpression | parMap | parList)?

    { <> makeCall(REFS::makeValue, type, value*) }
:};

## Parses a term (basic expression unit). **Note:** Parsing for `Map` needs
## to be done before `List`, since the latter rejects "map-like" syntax as a
## fatal error.
def parTerm = {:
    parVarRef | parInt | parString | parMap | parList |
    parDeriv | parClosure | parParenExpression
|
    ## Defined by Samizdat Layer 1. The lookahead is just to make it clear
    ## that Layer 1 can only be "activated" with that one specific token.
    &@"{:" %parParser
|
    ## Defined by Samizdat Layer 2.
    &[@interpolatedString @"(" @"["] %parTerm2
:};

## Parses a list of "actual" (as opposed to formal) arguments to a function.
## Yields a list of expression nodes.
def parActualsList = {:
    @"("
    normalActuals = parUnadornedList
    @")"
    closureActuals = parClosure*
    { <> [closureActuals*, normalActuals*] }
|
    parClosure+
:};

## Parses a unary postfix operator. This yields a function (per se) to call
## in order to construct a node that represents the appropriate ultimate
## function call.
def parPostfixOperator = {:
    actuals = parActualsList
    { <> { node <> makeCallOrApply(node, actuals*) } }
|
    ## This is sorta-kinda a binary operator, but in terms of precedence it
    ## fits better here.
    @"::"
    key = parIdentifierString
    { <> { node <> makeGet(node, key) } }
|
    ## The lookahead failure here is to make the grammar prefer `*` to be
    ## treated as a binary op. (`*` is only defined as postfix in Layer 0,
    ## but higher layers augment its meaning.)
    @"*" !parExpression
    { <> { node <> makeInterpolate(node) } }
|
    @"?"
    { <> { node <> makeOptValue(node) } }
|
    ## Note: Layer 2 adds additional rules here.
    %parPostfixOperator2
:};

## Parses a unary expression. This is a term, optionally surrounded on
## either side by any number of unary operators. Postfix operators
## take precedence over (are applied before) the prefix operators.
parUnaryExpression := {:
    ## The rule is written this way in order to ensure that the `-`
    ## in front of a numeric constant gets parsed as a term and not as
    ## a unary expression.
    basePrefixes = (
        base = parTerm
        { <> {base, prefixes: []} }
    |
        ## Note: Layer 2 adds prefix operator parsing here.
        prefixes = (%parPrefixOperator2)*
        base = parTerm
        ## Reverse the `prefixes` list, so that prefixes are applied
        ## in outward order from the base term.
        { <> {base, prefixes: Sequence::reverse(prefixes)} }
    )

    postfixes = parPostfixOperator*

    {
        def prefixes = basePrefixes::prefixes;
        var result = basePrefixes::base;

        Generator::filterPump(postfixes) { op -> result := op(result) };
        Generator::filterPump(prefixes) { op -> result := op(result) };
        <> result
    }
:};

## Parses an operator-bearing expression (or simple term). This is a trivial
## passthrough to `unaryExpression` in layer 0, but is expanded significantly
## in layer 2.
##
## **Note:** Omitted here, as it is defined later.

## Parses an assignment expression, or passes through to parse a regular
## `opExpression`. An lvalue is parsed here by first parsing an arbitrary
## `opExpression` and then extracting the `lvalue` constructor out of it.
## This fails (gracefully) if there is no `lvalue` to extract from a given
## expression.
parAssignExpression := {:
    base = %parOpExpression

    (
        @":="
        lvalue = { <> get_lvalue(base) }
        ex = parExpression
        { <> lvalue(ex) }
    |
        { <> base }
    )
:};

## Note: There are additional expression rules in Layer 2 and beyond.
def parStatement = {:
    parVarDef | parFnDef | parExpression
|
    ## Note: Layer 2 adds additional rules here.
    %parStatement2
:};

## Note: There are additional nonlocal exit rules in Layer 2 and beyond.
## This rule still exists but has several additions.
def parNonlocalExit = {:
    %parNonlocalExit2
:};

## Parses a local yield / return.
def parYield = {:
    @"<>"
    (
        ex = parExpression
        { <> {yield: ex} }
    |
        { <> {} }
    )
:};

## Parses a program body (statements plus optional yield).
parProgramBody := {:
    @";"*

    most = (
        s = parStatement
        @";"+
        { <> s }
    )*

    last = (
        s = (parStatement | parNonlocalExit)
        { <> {statements: [s]} }
    |
        y = parYield
        { <> {statements: [], y*} }
    |
        { <> {statements: []} }
    )

    @";"*

    {
        def rawStatements = [most*, last::statements*];
        def tops = Generator::filterAll(rawStatements)
            { s ->
                <> ifIs { <> hasType(s, "topDeclaration") }
                    { <> dataOf(s)::top }
            };
        def mains = Generator::filterAll(rawStatements)
            { s ->
                <> ifIs { <> hasType(s, "topDeclaration") }
                    { <> dataOf(s)::main }
                    { <> s }
            };
        <> {last*, statements: [tops*, mains*]}
    }
:};

## Top-level rule to parse an expression with possible error afterwards.
def parExpressionOrError = {:
    ex = parExpression
    (
        pending = .+
        { reportError(pending) }
    )?
    { <> ex }
:};

## Top-level rule to parse a program with possible error afterwards.
## Note that an empty string is a valid program.
def parProgramOrError = {:
    prog = parProgram
    (
        pending = .+
        { reportError(pending) }
    )?
    { <> prog }
:};


##
## Layer 1 Rules
##
## This section consists of the definitions required to implement Layer 1,
## above and beyond the preceding section.
##
## **Note:** The grammar uses the label "pex" to denote various
## "Parser EXpression" types.
##

## Forward declaration.
def parChoicePex;

## Map from parser tokens to derived value types for pexes.
def PEX_TYPES = {
    "&": "lookaheadSuccess",
    "!": "lookaheadFailure",
    "?": "opt",
    "*": "star",
    "+": "plus"
};

## Parses a parser function.
parParser := {:
    @"{:"
    pex = %parChoicePex
    @":}"
    { <> @parser{value: pex} }
:};

## Parses a parenthesized parsing expression.
def parParenPex = {:
    @"("
    pex = %parChoicePex
    @")"
    { <> pex }
:};

## Parses a string literal parsing expression.
def parParserString = {:
    s = @string
    {
        def value = dataOf(s);
        <> ifIs { <> eq(Collection::sizeOf(value), 1) }
            { <> @token(value) }
            { <> s }
    }
:};

## Parses a token literal parsing expression.
def parParserToken = {:
    @"@"
    type = parIdentifierString
    { <> @token(get_value(type)) }
:};

## Parses a string or character range parsing expression, used when defining
## sets. Yields a string per se (not a token).
def parParserSetString = {:
    s = @string

    (
        @".."
        end = @string

        { <out> ->
            def startChar = dataOf(s);
            def endChar = dataOf(end);

            ## Reject non-single-character strings.
            ifIs { <> ne(1, Collection::sizeOf(startChar)) } { <out> };
            ifIs { <> ne(1, Collection::sizeOf(endChar)) } { <out> };

            <> cat(Range::makeInclusiveRange(startChar, endChar)*)
        }
    |
        { <> dataOf(s) }
    )
:};

## Parses a set (or set complement) parsing expression.
def parParserSet = {:
    @"["

    type = (
        @"!" { <> "tokenSetComplement" }
    |
        { <> "tokenSet" }
    )

    terminals = (
        strings = parParserSetString+
        { <> [cat(strings*)*] }
    |
        tokens = parParserToken+
        { <> collect(tokens, dataOf) }
    |
        { <> [] }
    )

    @"]"

    { <> @(type)(terminals) }
:};

## Parses a code block parsing expression.
def parParserCode = {:
    closure = parNullaryClosure
    { <> @code(dataOf(closure)) }
:};

## Parses a thunk parsing expression.
def parParserThunk = {:
    @"%"
    term = parTerm
    { <> @thunk(term) }
:};

## Parses a parsing expression term.
def parParserTerm = {:
    @"."
    { <> @any }
|
    @"("
    @")"
    { <> @empty }
|
    parVarRef | parParserString | parParserToken | parParserSet |
    parParserCode | parParserThunk | parParenPex
:};

## Parses a repeat (or not) parsing expression.
def parRepeatPex = {:
    term = parParserTerm
    (
        repeat = [@"?" @"*" @"+"]
        { <> @(get(PEX_TYPES, typeNameOf(repeat)))(term) }
    |
        { <> term }
    )
:};

## Parses a lookahead (or not) parsing expression. This covers both lookahead
## success and lookahead failure.
def parLookaheadPex = {:
    (
        lookahead = [@"&" @"!"]
        pex = parRepeatPex
        { <> @(get(PEX_TYPES, typeNameOf(lookahead)))(pex) }
    )
|
    parRepeatPex
:};

## Parses a name (or not) parsing expression.
def parNamePex = {:
    (
        name = @identifier
        @"="
        pex = parLookaheadPex
        { <> @varDef{name: dataOf(name), value: pex} }
    )
|
    parLookaheadPex
:};

## Parses a sequence parsing expression. This includes sequences of length
## one, but it does *not* parse empty (zero-length) sequences.
def parSequencePex = {:
    items = parNamePex+
    { <> @sequence(items) }
:};

## Parses a choice parsing expression. This includes a single choice.
parChoicePex := {:
    one = parSequencePex
    rest = (@"|" parSequencePex)*
    { <> @choice[one, rest*] }
:};


##
## Layer 2 Definitions and Rules
##

## Returns a `closure` node like the one given, except with the `formals`
## binding replaced with the given arguments. Each of the `formals`
## must be a formal argument map as described in the execution tree spec.
fn closureWithFormals(closure, formals*) {
    <> @closure{(dataOf(closure))*, formals}
};

## For unary operators, map of token types to function name variable
## references.
def UNARY_OPERATORS = {
    "-":   REFS::Number_neg,
    "#":   REFS::Collection_sizeOf,
    "^":   REFS::Sequence_reverse,
    "!!!": REFS::Bitwise_not
};

## For binary operators, map of token types to function name variable
## references.
def BINARY_OPERATORS = {
    "+":    REFS::Number_add,
    "-":    REFS::Number_sub,
    "*":    REFS::Number_mul,
    "/":    REFS::Number_div,
    "%":    REFS::Number_mod,
    "//":   REFS::Number_divEu,
    "%%":   REFS::Number_modEu,
    "==":   REFS::perEq,
    "!=":   REFS::perNe,
    "<":    REFS::perLt,
    ">":    REFS::perGt,
    "<=":   REFS::perLe,
    ">=":   REFS::perGe,
    "&&&":  REFS::Bitwise_and,
    "|||":  REFS::Bitwise_or,
    "^^^":  REFS::Bitwise_xor,
    "<<<":  REFS::Bitwise_shl,
    ">>>":  REFS::Bitwise_shr,
    "\\==": REFS::eq,
    "\\!=": REFS::ne,
    "\\<":  REFS::lt,
    "\\>":  REFS::gt,
    "\\<=": REFS::le,
    "\\>=": REFS::ge
};

## Helper for parsing binary operator expressions, which puts together
## a sequence of function calls.
fn makeBinaryCalls(firstEx, opExList) {
    var result = firstEx;

    Generator::filterPump(opExList) { opEx ->
        def op = opEx::op;
        def expr = opEx::expr;
        def resolvedOp = get(BINARY_OPERATORS, typeNameOf(op));

        result := makeCall(resolvedOp, result, expr)
    };

    <> result
};

## Helper for parsing binary comparison operator expressions, which puts
## together a sequence of function calls. This is like `makeBinaryCalls`,
## except that a void comparison result (that is a logical-false result)
## causes the overall call result to be void (and not become a hard failure).
## This is done by wrapping the entire expression in a thunk-call, and
## transforming each comparison other than the last into an `ifValueOr` where
## the else clause is an exit of the thunk. For example:
##
## ```
## x < y <= z == q
## ```
## =>
## ```
## eq(le(lt(x, y), z), q)
## ```
## =>
## ```
## { <voided> ->
##     <> eq(
##         ifValueOr
##             { <> le(
##                 ifValueOr { <> lt(x, y) } { <voided> },
##                 z),
##             }
##             { <voided> }
##         q)
## }()
## ```
fn makeCompareCalls(firstEx, opExList) {
    ## Use `makeBinaryCalls` to do the initial processing. This avoids some
    ## duplication of logic, and this result is what's used directly in the
    ## simple cases.
    def baseResult = makeBinaryCalls(firstEx, opExList);
    def opCount = Collection::sizeOf(opExList);

    ifIs { <> perLe(opCount, 1) }
        {
            ## Use the straightforward `makeBinaryCalls` if this turns out to
            ## be a single-op expression or not a comparison expression at all.
            return baseResult
        };

    ## Nontrivial case. We need to transform the inner first call arguments.

    def yieldName = safeVarName("voided", baseResult);
    def yieldCall = makeThunk(makeJump(makeVarRef(yieldName)));

    fn transform(tree, layer) {
        ifIs { <> le(layer, 1) }
            { return tree };

        ## We are looking at `@call{function, actuals: [firstActual, ...]}`.
        def actuals = get_actuals(tree);
        def firstActual = makeCall(REFS::ifValueOr,
            makeThunk(
                transform(Sequence::nth(actuals, 0), Number::sub(layer, 1))),
            yieldCall);

        <> @call{
            dataOf(tree)*,
            actuals: [firstActual, Sequence::sliceInclusive(actuals, 1)*]
        }
    };

    <> makeCall(
        @closure{
            formals: [],
            yieldDef: yieldName,
            statements: [],
            yield: transform(baseResult, opCount)
        });
};

## Helper for string interpolation: Parses the two kinds of interpolation,
## yielding an appropriate expression node if syntactically valid, including
## verification that all input was consumed.
def parStringInterpolation = {:
    &[@"(" @"["]
    ex = parTerm
    !.
    { <> ex }
|
    &@"{"
    block = parNullaryClosure
    !.
    { <> makeCall(block) }
:};

## Parses an interpolated string. The payload of an interpolated string
## token is a list with elements being either simple strings or lists of
## tokens. The token lists are delimited either with parentheses or braces.
## Parenthesized lists are taken to be expressions to be evaluated. Braced
## lists are taken to be thunks to be evaluated-and-called. The translation
## is along these lines:
##
## ```
## @interpolatedString{
##     "string",
##     {format: "formatStr", tokens: [@"(", exprToken, ..., @")"]},
##     {format: "formatStr", tokens: [@"{", blockToken, ..., @"}"]}
## }
## ```
## =>
## ```
## cat("string", fmt1((expr...)?*), fmt2({ block... }()?*))
## ```
##
## where `fmt*` is either a reference to `Format::usual` (if no format
## specifier is given) or a call to `Format::formatterFor` (if a
## specifier *is* given).
def parInterpolatedString = {:
    token = @interpolatedString

    {
        ## Convert each of the payload items into the proper form.
        ## This includes recursive parser calls to convert list forms
        ## into appropriate node types.
        def elems = Generator::filterAll(dataOf(token)) { elem ->
            <> ifIs { <> isString(elem) }
                { <> makeLiteral(elem) }
                {
                    def tokens = elem::tokens;

                    def formatter = ifValue { <> elem::format }
                        { format ->
                            <> makeCall(REFS::Format_formatterFor,
                                makeLiteral(format))
                        }
                        { <> REFS::Format_usual };

                    def call = ifValueOr
                        { <> Peg::apply(parStringInterpolation, tokens) }
                        {
                            Io1::die(
                                "Invalid syntax in string interpolation.")
                        };

                    <> makeCallOrApply(formatter,
                        makeInterpolate(makeOptValue(call)))
                }
        };

        <> makeCall(REFS::cat, elems*)
    }
:};

## Parses a single generator definition, for use in comprehensions and
## `for` loops. This yields a map of the form `{init: ..., formal: ...}`,
## with `init` bound to an initializer expression and `formal` bound to
## a formal argument declaration.
def parGeneratorDef = {:
    formal = (
        name = @identifier
        { <> {name: dataOf(name)} }
    |
        "."
        { <> {} }
    )

    @in
    init = parExpression

    { <> {formal, init} }
|
    @for
    size = parExpression

    {
        def init = makeCall(REFS::Generator_makeRepeatGenerator, size);
        <> {formal: {}, init}
    }
:};

## Parses a comma-separated list of generator definitions, for use in
## comprehensions and `for` loops. This yields a map of the form
## `{formals: ..., inits: ...}`, with `formals` bound to a formal
## argument declaration corresponding to the names given to each of the
## generators, and `inits` bound to a list of generator initializer
## expressions.
def parGeneratorList = {:
    one = parGeneratorDef
    rest = ("," parGeneratorDef)*

    {
        def gens = [one, rest*];
        def formals = Generator::filterAll(gens) { gen <> gen::formal };
        def inits = Generator::filterAll(gens) { gen <> gen::init };

        <> {formals, inits}
    }
:};

## Helper for `parComprehensionExpression`, which parses the body of a
## comprehension, yielding appropriate arguments for a call to either
## `makeFilterGenerator` or `filterAll`.
def parComprehensionBody = {:
    genList = parGeneratorList
    (@"->" | &@"<>")
    filterBody = parProgramBody

    {
        def genFormals = genList::formals;
        def genInits = genList::inits;

        <> [@closure{filterBody*, formals: genFormals}, genInits*]
    }
:};

## Parses a comprehension expression, which can result in either a
## list or a generator, depending on choice of delimiter.
##
## The translation is along the lines of:
##
## ```
## (name1 in expr1, name2 in expr2 -> filterBody)
## ```
## =>
## ```
## Generator::makeFilterGenerator(expr1, expr2)
##     { name1, name2 -> filterBody }
## ```
##
## ```
## [name1 in expr1, name2 in expr2 -> filterBody]
## ```
## =>
## ```
## Generator::filterAll(expr1, expr2)
##     { name1, name2 -> filterBody }
## ```
def parComprehensionExpression = {:
    @"("
    body = parComprehensionBody
    @")"

    { <> makeCall(REFS::Generator_makeFilterGenerator, body*) }
|
    @"["
    body = parComprehensionBody
    @"]"

    { <> makeCall(REFS::Generator_filterAll, body*) }
:};

## Helper for `parRangeExpression`, which parses the body of a
## range, always yielding a generator.
def parRangeBody = {:
    firstValue = parExpression
    op = [@".." @"..!"]

    optLimit = (
        limit = parExpression
        { <> [limit] }
    |
        ## The limit is mandatory for exclusive ranges.
        {
            <> ifIs { <> eq(op, @"..") }
                { <> [] }
        }
    )

    optIncrement = (@"by" parExpression)?

    {
        <> ifIs { <> eq(op, @"..!") }
            {
                <> makeCall(
                    REFS::Range_makeExclusiveRange,
                    firstValue, optLimit*, optIncrement*)
            }
            {
                <> ifValue { <> optLimit* }
                    { limit ->
                        <> makeCall(
                            REFS::Range_makeInclusiveRange,
                            firstValue, limit, optIncrement*)
                    }
                    {
                        <> makeCall(
                            REFS::Range_makeOpenRange,
                            firstValue, optIncrement*)
                    }
            }
    }
:};

## Parses a range expression, including both generator and list forms.
def parRangeExpression = {:
    @"("
    body = parRangeBody
    @")"

    { <> body }
|
    @"["
    body = parRangeBody
    @"]"

    ## The test here is to prevent open ranges from being allowed.
    { <> ne(get_function(body), REFS::Range_makeOpenRange) }
    { <> makeCallOrApply(REFS::makeList, makeInterpolate(body)) }
:};

## Parses the `term` variants introduced in Layer 2.
parTerm2 := {:
    parInterpolatedString
|
    parComprehensionExpression
|
    parRangeExpression
:};

## Parses a nonlocal exit / return. All of the forms matched by this rule
## have the dual properties of (a) necessarily being at the end of a code
## block, and (b) being represented as a function call in the underlying
## function representation of code blocks.
parNonlocalExit2 := {:
    name = (
        @"<"
        n = parVarRef
        @">"
        { <> n }
    |
        op = [@break @continue @return]
        { <> makeVarRef(typeNameOf(op)) }
    )

    value = (
        ex = parExpression
        {
            ## The test for a valued `continue` is done explicitly here
            ## (rather than just letting the rule fail) in order to make the
            ## error message more sensible.
            ifIs { <> eq(dataOf(name), "continue") }
                { Io1::die("Invalid use of continue with value.") };
            <> ex
        }
    )?

    { <> makeJump(name, value*) }
:};

## Parses a unary prefix operator. This yields a function (per se) that
## takes a node and yields a call to the appropriate operator function.
parPrefixOperator2 := {:
    operator = [@"-" @"#" @"^" @"!!!"]
    {
        def name = get(UNARY_OPERATORS, typeNameOf(operator));
        <> { node <> makeCall(name, node) }
    }
|
    ## This one is specially converted, since it's a control construct,
    ## not just a simple function application.
    @"!"
    { <> { node <> makeCallThunks(REFS::ifNot, node, makeLiteral(true)) } }
:};

## Parses an index expression (inside a collection indexing postfix form).
def parIndexExpression = {:
    @"^"
    expr = parUnaryExpression
    { <> @fromEnd(expr) }
|
    expr = parExpression
    { <> @fromStart(expr) }
:};

## Parses an indexing postfix.
def parIndexPostfix = {:
    optStart = parIndexExpression?
    optOp = [@".." @"..!"]?
    end = (
        { <> optOp* } ## End can only be parsed if there was a slice op.
        parIndexExpression
    |
        { <> @endIndex }
    )

    (
        ## It's a slice expression of some sort.
        op = { <> optOp* }
        start = ({ <> optStart* } | { <> @fromStart(makeLiteral(0)) })

        (
            ## It's a non-size-dependant slice.
            { <> ne(typeNameOf(start), "fromEnd") }
            { <> ne(typeNameOf(end), "fromEnd") }

            {
                def funcRef = ifIs { <> eq(op, @"..") }
                    { <> REFS::Sequence_sliceInclusive }
                    { <> REFS::Sequence_sliceExclusive };

                <> { node ->
                    <> makeCall(funcRef,
                        node, dataOf(start), dataOf(end)?*)
                }
            }
        |
            ## At least one of start or end is `fromEnd`, so we have to
            ## use an intermediate function call.
            {
                def style = ifIs { <> eq(op, @"..") }
                    { <> makeLiteral(@inclusive) }
                    { <> makeLiteral(@exclusive) };

                def startNode =
                    makeCall(REFS::makeValue,
                        makeLiteral(typeNameOf(start)),
                        dataOf(start));

                def optEndNode = (ifValue { <> dataOf(end) }
                    { endData ->
                        <> makeCall(REFS::makeValue,
                            makeLiteral(typeNameOf(end)),
                            endData)
                    })?;

                <> { node ->
                    <> makeCall(REFS::Sequence_sliceGeneral,
                        node,
                        style,
                        startNode,
                        optEndNode*)
                }
            }
        )
    |
        ## The following assignment means that `optStart` must be non-empty
        ## at this point. The lack of subsequent alternates means that `foo[]`
        ## per se (that is, empty content inside the brackets) won't pass as
        ## syntactically valid.
        index = { <> optStart* }

        {
            def funcRef = ifIs { <> hasType(index, "fromStart") }
                { <> REFS::get }
                { <> REFS::Sequence_nthFromEnd };

            <> { node <> makeCall(funcRef, node, dataOf(index)) }
        }
    )
:};

## Layer 2 additions to unary postfix operator parsing. This yields a
## function (per se) to call in order to construct a node that represents the
## appropriate operator application, function call, or the like.
parPostfixOperator2 := {:
    @"**"
    { <> { node <> makeCall(REFS::perNe, makeLiteral(false), node) } }
|
    @"??"
    {
        <> { node ->
            <> makeCallThunks(REFS::ifIs,
                node, makeLiteral(true), makeLiteral(false))
        }
    }
|
    @"["
    result = parIndexPostfix
    @"]"
    { <> result }
|
    ## This translates as something like the following:
    ##
    ## ```
    ## target.name(arg, ...)
    ## =>
    ## name(target, arg, ...)
    ## ```
    ##
    ## ```
    ## target.name
    ## =>
    ## get_name(target)
    ## ```
    ##
    ## ```
    ## target.name := expression
    ## =>
    ## set_name(target, expression)
    ## ```
    ##
    ## The setter variant works via an `lvalue` binding added to a parsed
    ## getter expression.
    ##
    @"."
    name = parIdentifierString

    (
        ## `target.name(arg, ...)`
        actuals = parActualsList
        {
            def funcRef = makeVarRef(get_value(name));
            <> { node <> makeCallOrApply(funcRef, node, actuals*) }
        }
    |
        ## `target.name` (includes parsing of both getters and setters)
        {
            def suffix = get_value(name);
            def getterRef = makeVarRef(cat("get_", suffix));
            <> { node ->
                def getterCall = makeCall(getterRef, node);
                <> @(typeNameOf(getterCall)){
                    dataOf(getterCall)*,
                    lvalue: { expr ->
                        def setterRef = makeVarRef(cat("set_", suffix));
                        <> makeCall(setterRef, node, expr)
                    }
                }
            }
        }
    )
:};

## Parses a multiplicative expression.
def parMulExpression = {:
    firstEx = parUnaryExpression
    opExes = (
        op = [@"*" @"/" @"%" @"//" @"%%" @"<<<" @">>>"]
        expr = parUnaryExpression
        { <> {op, expr} }
    )*

    { <> makeBinaryCalls(firstEx, opExes) }
:};

## Parses an additive expression.
def parAddExpression = {:
    firstEx = parMulExpression
    opExes = (
        op = [@"+" @"-" @"&&&" @"|||" @"^^^"]
        expr = parMulExpression
        { <> {op, expr} }
    )*

    { <> makeBinaryCalls(firstEx, opExes) }
:};

## Parses a comparison expression. The syntax here is the mathematical
## style of `x < y < z` meaning `(x < y) & (y < z)`. This semantics
## falls naturally out of the left-associativity of the expression
## along with the value-or-void logic model, as defined by the language.
def parCompareExpression = {:
    firstEx = parAddExpression
    opExes = (
        op = [
            @"=="   @"!="   @"<"   @">"   @"<="   @">="
            @"\\==" @"\\!=" @"\\<" @"\\>" @"\\<=" @"\\>="
        ]
        expr = parAddExpression
        { <> {op, expr} }
    )*

    { <> makeCompareCalls(firstEx, opExes) }
:};

## Parses a single test clause with optional assignment, yielding a map of
## the form `{formal: ..., test: ...}`, with `formal` bound to a formal
## argument declaration and `test` bound to the test expression. If no formal
## was parsed, `formal` is bound to `{}`.
def parTestClause = {:
    formal = (
        @def
        name = @identifier
        @"="
        { <> {name: dataOf(name)} }
    |
        { <> {} }
    )

    test = parExpression

    { <> {formal, test} }
:};

## Parses a single parenthesized test clause.
def parParenTestClause = {:
    @"("
    result = parTestClause
    @")"

    { <> result }
:};

## Parses a list of one or more comma-separated parenthesized test clauses.
def parParenTestClauseList = {:
    @"("
    first = parTestClause
    more = (@"," parTestClause)*
    @")"

    { <> [first, more*] }
:};

## Parses a clause in a logical-and expression. This is just like
## `parParenTestClause` above, except that it also allows for unparenthesized
## `compareExpression`s.
def parLogicAndClause = {:
    parParenTestClause
|
    test = parCompareExpression
    { <> {formal: {}, test} }
:};

## Parses a short-circuit logical-and expression. The translation is along
## the lines of:
##
## ```
## expr1 & expr2
## =>
## ifIs { <> expr1 } { <> expr2 }
## ```
##
## ```
## (def var1 = expr1) & expr2
## =>
## ifValue { <> expr1 } { var1 <> expr2 }
## ```
##
## ```
## (def var1 = expr1) & expr2 & (def var3 = expr3) & expr4
## =>
## ifValues(
##     makeList(
##         { <> expr1 },
##         { var1 <> expr2 },
##         { var1, . <> expr3 }),
##     { var1, ., var3 <> expr4 }
## ```
##
## That is, a single `ifIs` or `ifValue` call if there's only one `&`, or an
## `ifValues` call if there is a chain of three or more clauses.
def parLogicAndExpression = {:
    ## This is done with the `*` on the list head (that is, most-then-last
    ## instead of the more usual arrangement of first-then-rest), since the
    ## last clause is special in that it can't be an assignment.
    most = (
        clause = parLogicAndClause
        @"&"
        { <> clause }
    )*
    last = parCompareExpression

    (
        ## Not actually an `&` expression.
        { <> eq(most, []) }
        { <> last }
    |
        ## Non-compound `&` expression.
        { <> eq(Collection::sizeOf(most), 1) }
        {
            def clause = most*;
            def formal = clause::formal;
            def testThunk = makeThunk(clause::test);
            def resultThunk = makeThunk(last);

            <> ifIs { <> eq(formal, {}) }
                { <> makeCall(REFS::ifIs, testThunk, resultThunk) }
                {
                    <> makeCall(REFS::ifValue,
                        testThunk,
                        closureWithFormals(resultThunk, formal))
                }
        }
    |
        ## Compound `&` expression (three or more clauses).
        {
            ## Make a version of the test clauses, as thunks with formals
            ## lists.
            def formals =
                Generator::filterAll(most) { clause <> clause::formal };
            def testThunks =
                Generator::filterAll(most, Range::makeOpenRange(0))
                    { clause, index ->
                        def test = clause::test;
                        <> closureWithFormals(makeThunk(test),
                            Sequence::sliceExclusive(formals, 0, index)*)
                    };

            ## Construct the overall `ifValues` call.
            <> makeCall(REFS::ifValues,
                makeCall(REFS::makeList, testThunks*),
                closureWithFormals(makeThunk(last), formals*))
        }
    )
:};

## Parses a short-circuit logical-or expression. The translation is along
## the lines of:
##
## ```
## expr1 | expr2 | expr3
## ```
## =>
## ```
## ifValueOr { <> expr1 }
##     { ifValueOr { <> expr2 } { <> expr3 } }
## ```
def parLogicOrExpression = {:
    one = parLogicAndExpression
    rest = (@"|" parLogicAndExpression)*

    (
        ## This handles the case of not actually being a logical-or
        ## expression.
        {
            <> ifIs { <> eq(rest, []) }
                { <> one }
        }
    |
        {
            ## Reverse, because we're building the result from the inside out.
            def exprs = Sequence::reverse([one, rest*]);
            var result = Sequence::nth(exprs, 0);

            Generator::filterPump(Sequence::sliceInclusive(exprs, 1)) { ex ->
                result := makeCallThunks(REFS::ifValueOr, ex, result)
            };

            <> result
        }
    )
:};

## Helper for `if` and `while` parsing: Takes a parenthesized list of test
## clauses and yields a function that takes the `then` node and optional
## `else` node, returning the final `if*` call. The three cases are along
## the lines of:
##
## ```
## (nonBoundExpr)
## =>
## ifIs { <> nonBoundExpr }
##     { ... then ... }
##     { ... else ... }
## ```
##
## ```
## (def name = boundExpr)
## =>
## ifValue { <> boundExpr }
##     { name -> ... then ... }
##     { ... else ... }
## ```
##
## ```
## (def name1 = expr1, unboundExpr, def name3 = expr3)
## =>
## ifValues(
##     makeList(
##         { <> expr1 },
##         { name1 <> unboundExpr },
##         { name1, . <> expr3 }),
##     { name1, ., name3 -> ... then ... }
##     { ... else ... })
## ```
def parMultiTest = {:
    clauses = parParenTestClauseList

    (
        ## Single test. Will translate as either `ifValue` or `ifIs`.
        { <> eq(Collection::sizeOf(clauses), 1) }
        {
            def clause = clauses*;
            def formal = clause::formal;
            def testThunk = makeThunk(clause::test);
            <> { thenThunk, elseThunk? ->
                <> ifIs { eq(formal, {}) }
                    {
                        <> makeCall(REFS::ifIs,
                            testThunk, thenThunk, elseThunk*)
                    }
                    {
                        <> makeCall(REFS::ifValue,
                            testThunk,
                            closureWithFormals(thenThunk, formal),
                            elseThunk*)
                    }
            }
        }
    |
        ## General case.
        {
            ## Make a version of the test clauses, as thunks with formals
            ## lists.
            def formals =
                Generator::filterAll(clauses) { clause <> clause::formal };
            def testThunks =
                Generator::filterAll(clauses, Range::makeOpenRange(0))
                    { clause, index ->
                        def test = clause::test;
                        <> closureWithFormals(makeThunk(test),
                            Sequence::sliceExclusive(formals, 0, index)*)
                    };

            ## Result function which constructs the overall `ifValues` call.
            <> { thenThunk, elseThunk? ->
                <> makeCall(REFS::ifValues,
                    makeCall(REFS::makeList, testThunks*),
                    closureWithFormals(thenThunk, formals*),
                    elseThunk*)
            }
        }
    )
:};

## Parses an if expression. The translation is along the lines of:
##
## ```
## if <out> (def name1 = expr1) {
##     thenStat1
## } else if (expr2) {
##     thenStat2
## } else if (def name3 = expr3, def name4 = expr4) {
##     thenStat34
## } else {
##     elseStat
## }
## ```
## =>
## ```
## { <out> ->
##     <> ifValue { <> expr1 }
##         { name1 -> thenStat1 }
##         {
##             <> ifIs { <> expr2 }
##                 { name2 -> thenStat2 }
##                 {
##                     <> ifValues(
##                         makeList(
##                             { <> expr3 },
##                             { name3 <> expr4 }),
##                         { name3, name4 -> thenStat34 },
##                         { elseStat })
##                 }
##         }
## }()
## ```
##
## with:
## * the outer thunk-call omitted if there was no yield definition.
## * omitting the final `elseStat` if there was no `else` clause.
## * `ifIs` instead of `ifValue` and no then-clause argument declaration for
##   any clause where no name binding was present.
## * `ifValues` instead of `ifValue` (with incremental formals binding) for
##   any clause that uses multiple tests.
## * arbitrary nesting of additional clauses.
def parIfExpression = {:
    @if
    yieldDef = parOptYieldDef
    firstCondition = parMultiTest
    firstThen = parCodeOnlyClosure

    elseIfThens = (
        @else
        @if
        condition = parMultiTest
        then = parCodeOnlyClosure
        { <> {maker: condition, then} }
    )*

    optElse = (@else parCodeOnlyClosure)?

    {
        ## This builds the full expression from back to front (inner to outer).
        def clauses = Sequence::reverse(
            [{maker: firstCondition, then: firstThen}, elseIfThens*]);

        ## To keep things simple, partial results are always thunks wrapped
        ## in a single-element list, so that they can be slotted directly into
        ## place as the third argument to an enclosing `if*` by saying
        ## `reduction*` (which also handles the case of a missing final
        ## `else`).
        var reduction = optElse;
        Generator::filterPump(clauses) { clause ->
            reduction := [makeThunk(clause::maker(clause::then, reduction*))]
        };

        ## Unwrap the single-element `reduction` result list;
        def mainThunk = reduction*;

        ## Either add a yield def to the thunk and wrap it in a call, or
        ## unwrap it into a straight call, depending on if the original `if`
        ## has a yield def or not.
        <> ifIs { <> eq(yieldDef, {}) }
            { <> get_yield(mainThunk) }
            {
                ## There was a yield def. Add the yield def to the thunk,
                ## and wrap that in a call.
                <> makeCall(@closure{dataOf(mainThunk)*, yieldDef*})
            }
    }
:};

## Parses the optional yield definition that's associated with the `break`
## exit of a loop. This always results in a list, which is empty if there
## is no yield definition present, or is a single-element list of an
## appropriate variable definition and assignment.
def parOptBreakDef = {:
    (
        y = parYieldDef
        { <> makeVarDef(y, REFS::break) }
    )?
:};

## Parses a while expression. The translation is along these lines:
##
## ```
## while <out> (def name = test) { <next> -> stat1; stat2 }
## ```
## =>
## ```
## { <\"break"> ->
##     def out = \"break";
##     loop { <\"continue"> ->
##         ifValue { <> test }
##             { <next> name -> stat1; stat2 }
##             { <\"break"> }
##     }
## }()
## ```
##
## with:
## * the initial break assignment omitted if there is no yield def.
## * the body argument declaration changed to `.` if there is no
##   test expression name binding.
## * `ifIs` instead of `ifValue` if there is no name binding.
## * `ifValues` instead of `ifValue` if there are multiple tests.
def parWhileExpression = {:
    @while
    breakDef = parOptBreakDef
    testMaker = parMultiTest
    code = parNullaryClosure

    {
        def loopClosure = @closure{
            formals: [],
            yieldDef: "continue",
            statements: [testMaker(code, makeThunk(makeJump(REFS::break)))]
        };

        def mainClosure = @closure{
            formals: [],
            yieldDef: "break",
            statements: [breakDef*, makeCall(REFS::loop, loopClosure)]
        };

        <> makeCall(mainClosure)
    }
:};

## Parses a do expression. The translation is along these lines:
##
## ```
## do <out> { <next> -> stat1; stat2 } while (expr)
## ```
## =>
## ```
## { <\"break"> ->
##     def out = \"break";
##     loop { <\"continue"> ->
##         { <next> -> stat1; stat2 }();
##         ifNot { <> expr }
##             { <\"break"> }
##     }
## }()
## ```
##
## with the initial break assignment omitted if there is no yield def, and
## with the `ifNot` statement omitted if there is no `while` at the end
## of the `do`.
def parDoExpression = {:
    @do
    breakDef = parOptBreakDef
    code = parNullaryClosure
    condition = (
        @while
        ex = parParenExpression
        {
            <> makeCallThunks(REFS::ifNot, ex, makeJump(REFS::break))
        }
    )?

    {
        def loopClosure = @closure{
            formals: [],
            yieldDef: "continue",
            statements: [makeCall(code), condition*]
        };

        def mainClosure = @closure{
            formals: [],
            yieldDef: "break",
            statements: [breakDef*, makeCall(REFS::loop, loopClosure)]
        };

        <> makeCall(mainClosure)
    }
:};

## Parses a for expression. The translation is along these lines:
##
## ```
## for <out> (name1 in expr1, name2 in expr2) { <next> -> stat1; stat2 }
## ```
## =>
## ```
## { <\"break"> ->
##     def out = \"break";
##     Generator::filterPump(expr1, expr2) { <\"continue"> name1, name2 ->
##         def next = \"continue";
##         stat1; stat2
##     }
## }()
## ```
##
## with:
## * the break assignment omitted if there is no outer yield def.
## * the continue assignment omitted if there is no inner yield def
def parForExpression = {:
    @for
    breakDef = parOptBreakDef
    @"("
    genList = parGeneratorList
    @")"
    code = parNullaryClosure

    {
        def genFormals = genList::formals;
        def genInits = genList::inits;

        def continueDef = ifValue { <> get_yieldDef(code) }
            { name <> [makeVarDef(name, REFS::continue)] }
            { <> [] };

        def loopClosure = @closure{
            formals: genFormals,
            yieldDef: "continue",
            statements: [continueDef*, get_statements(code)*]
        };

        def mainClosure = @closure{
            formals: [],
            yieldDef: "break",
            statements: [
                breakDef*,
                makeCall(REFS::Generator_filterPump,
                    loopClosure, genInits*)
            ]
        };

        <> makeCall(mainClosure)
    }
:};

## Helper for switch expressions: Parse a single case, including
## `default` and `else` cases. Returns a map that binds `keys` and
## `code`.
def parSwitchCase = {:
    keys = (
        special = [@default @else]
        @":"
        { <> special }
    |
        parKey+
    )

    code = parCodeOnlyClosure

    { <> {code, keys} }
:};

## Tree for the second argument to the inner `ifValue` inside a `switch`
## translation. This expression is constant across all switches, and it's most
## easily constructed by using the built-in parser.
def CALL_ARG = Lang0::parseProgram("body <> body()");

## Parses a switch expression. The translation is along these lines:
##
## ```
## switch <out> (def name = testExpr) {
##     ex1: { s1a; s1b }
##     ex2: { s2a; s2b }
##     default: { statDefault }
##     else: { statElse }
## }
## ```
## =>
## ```
## { <\"break"> ->
##     def out = \"break";
##     <> ifValue { <> testExpr }
##         { name ->
##             <> ifValue
##                 { <> get({(ex1): {s1a; s1b}, (ex2): {s2a; s2b}}, name) }
##                 { body <> body() }
##                 { statDefault }
##         }
##         { statElse }
## }()
## ```
##
## with:
## * the initial break assignment omitted if there is no yield def.
## * overrides of map keys switched around so the *first* key wins.
## * the `statElse` block omitted if there is no `else` clause.
## * the `statDefault` block omitted if there is no `default` clause.
## * the test expression variable binding changed to a safe (otherwise unused)
##   name, if no variable name was specified.
def parSwitchExpression = {:
    @switch
    breakDef = parOptBreakDef
    testClause = parParenTestClause

    @"{"
    @";"*

    cases = (
        most = (
            c = parSwitchCase
            @";"+
            { <> c }
        )*

        last = parSwitchCase?

        { <> [most*, last*] }
    )

    @";"*
    @"}"

    {
        def optDefault = Generator::filterAll(cases) { case ->
            <> ifIs { <> eq(case::keys, @default) } { <> case::code }
        };

        def optElse = Generator::filterAll(cases) { case ->
            <> ifIs { <> eq(case::keys, @else) } { <> case::code }
        };

        ifIs { <> gt(Collection::sizeOf(optDefault), 1) }
            { Io1::die("Multiple default cases in switch.") };

        ifIs { <> gt(Collection::sizeOf(optElse), 1) }
            { Io1::die("Multiple else cases in switch.") };

        ## The `reverse` in the case construction code is done in order to
        ## preserve the left-to-right evaluation order of the apparent text,
        ## even though the key/case override semantics is the opposite of
        ## what `cat(map)` defines.
        def caseClauses = Generator::filterAll(cases) { case ->
            def keys = case::keys;
            <> ifIs { <> isList(keys) }
                { <> makeCallOrApply(REFS::makeValueMap, keys*, case::code) }
        };
        def caseMap = makeCallOrApply(REFS::cat,
            makeInterpolate(
                makeCall(REFS::Sequence_reverse,
                    makeCallOrApply(REFS::makeList, caseClauses*))));

        ## If there is no specified formal, then pick a safe one, that is,
        ## a name not referenced in the case clauses.
        def testVar = ifValueOr { <> testClause::formal::name }
            { <> safeVarName("switchValue", caseMap) };

        def innerIf = makeCall(REFS::ifValue,
            makeThunk(makeGet(caseMap, makeVarRef(testVar))),
            CALL_ARG,
            optDefault*);

        def mainBody = @closure{
            formals: [{name: testVar}],
            statements: [],
            yield: innerIf
        };

        def outerIf = makeCall(REFS::ifValue,
            makeThunk(testClause::test),
            mainBody,
            optElse*);

        def mainClosure = @closure{
            formals: [],
            yieldDef: "break",
            statements: [breakDef*],
            yield: outerIf
        };

        <> makeCall(mainClosure)
    }
:};

## This is the top rule of the operator expression tree of rules.
parOpExpression := parLogicOrExpression;

## Layer 2 parser for a general expression.
parExpression2 := {:
    ## These are "statement-like" expressions, in that they look like
    ## similar statements in many (most?) C-derived languages.
    parDoExpression | parForExpression |
    parIfExpression | parSwitchExpression | parWhileExpression
:};

## Layer 2 parser for a statement.
parStatement2 := {:
    ## TODO: Perhaps there will be more statement variants.
    !() ## Always fail, for now.
:};


##
## Exported Definitions
##

## Documented in spec.
fn parseExpression(expression) {
    def tokens = ifIs { <> isString(expression) }
        { <> tokenize(expression) }
        { <> expression };

    <> Peg::apply(parExpressionOrError, tokens)
};

## Documented in spec.
fn parseProgram(program) {
    def tokens = ifIs { <> isString(program) }
        { <> tokenize(program) }
        { <> program };

    <> Peg::apply(parProgramOrError, tokens)
};

<> {
    parseExpression,
    parseProgram
}
