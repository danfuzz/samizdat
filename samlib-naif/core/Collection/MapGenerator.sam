## Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `MapGenerator` Type
##
## Payload is `{map: map, index: int}`.

def Collection = moduleUse({name: ["proto", "Collection"]});


##
## Exported Definitions
##

## Generator used when iterating over maps.
fn MapGenerator_nextValue(gen, box) {
    def data = dataOf(gen);
    def index = data::index;

    <> ifValue { <> Collection::nthMapping(data::map, index) }
        { value ->
            Box::store(box, value);
            <> @MapGenerator{data*, index: Number::add(index, 1)}
        }
        {
            ## Voided (out of elements).
            Box::store(box)
        }
};
genericBind(nextValue, "MapGenerator", MapGenerator_nextValue);

## Just use the standard implementation.
genericBind(collect, "MapGenerator", Generator_stdCollect);
