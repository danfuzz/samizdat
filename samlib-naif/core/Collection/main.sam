## Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Collection functions
##

def Collection = moduleUse({name: ["proto", "Collection"]});


##
## Exported Definitions
##

## Documented in Samizdat Layer 0 spec.
fn nthFromEnd(collection, n) {
    def index =
        Number::sub(Collection::sizeOf(collection), Number::add(n, 1));
    <> Collection::nth(collection, index)
};

## Documented in Samizdat Layer 0 spec.
fn sliceGeneral(collection, style, start, optEnd?) {
    def limit = Number::sub(Collection::sizeOf(collection), 1);
    def func = ifIs { <> eq(style, @exclusive) }
        { <> Sequence::sliceExclusive }
        { <> Sequence::sliceInclusive };
    def startIndex = ifIs { <> eq(typeOf(start), "fromStart") }
        { <> dataOf(start) }
        { <> Number::sub(limit, dataOf(start)) };
    def optEndIndex = (ifValue { <> optEnd* }
        { end ->
            <> ifIs { <> eq(typeOf(end), "fromStart") }
                { <> dataOf(end) }
                { <> Number::sub(limit, dataOf(end)) }
        })?;

    <> func(collection, startIndex, optEndIndex*)
};

<> {
    ## Re-exported from proto.
    cat:     Collection::cat,
    del:     Collection::del,
    get:     Collection::get,
    keyList: Collection::keyList,
    nth:     Collection::nth,
    put:     Collection::put,
    sizeOf:  Collection::sizeOf,

    ## Defined in this file.
    nthFromEnd,
    sliceGeneral
}
