## Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Value stringification
##

def Io0 = moduleUse({name: ["core", "Io0"]});


##
## Private Definitions
##

##
## Int formatting
##

## This is int digits for bases up to 36, in order.
def DIGIT_CHARS = "0123456789abcdefghijklmnopqrstuvwxyz";

## Helper for stringifying ints, which does most of the conversion,
## as well as prepending the given prefix.
fn intBody(start, value, base) {
    loopReduce("", value) { text, value ->
        <> ifIs { <> ne(value, 0) }
            {
                def digit =
                    Collection::nth(DIGIT_CHARS, Number::mod(value, base));
                <> [cat(digit, text), Number::div(value, base)];
            }
            { return cat(start, text) }
    }
};

## Map from int sign values to the appropriate stringifier for each.
def INT_SIGNS = {
    -1: { int, base <> intBody("-", Number::neg(int), base) },
    0:  { int, base <> "0" },
    1:  { int, base <> intBody("", int, base) }
};

## Stringifies an int using the given base.
fn intWithBase(int, base) {
    <> get(INT_SIGNS, Number::sign(int))(int, base)
};


##
## `sourceGeneral` and helpers
##

## Common generic for the two `source*` variants, which takes an
## `adorn` flag.
def sourceGeneral = makeRegularGeneric("sourceGeneral", 2, 2);

## Helper for optionally adorning results.
fn adornIf(adorn, before, value, after) {
    <> ifIs { <> totEq(adorn, true) }
        { <> cat(before, value, after) }
        { <> value }
};

## Helper which concatenates a list of list or map element stringifications.
## It assumes that every element is a string that starts with `", "`, and it
## removes that prefix from the first element. As a special case, this returns
## `""` if given `[]` for `elems`.
fn collectionBody(elems) {
    ifIs { <> totEq(elems, []) }
        { return "" };

    def one = Collection::slice(Collection::first(elems), 2);
    <> cat(one, Collection::butFirst(elems)*)
};

## These are all the characters which are allowed to start an identifier.
def IDENTIFIER_STARTS = {
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_"*: true
};

## These are all the characters which are allowed to be in an identifier.
def IDENTIFIER_CHARS = {
    IDENTIFIER_STARTS*,
    "0123456789"*: true
};

## Values with special conversions.
def SPECIAL_VALUES = {
    (Int):      "Int",
    (List):     "List",
    (Map):      "Map",
    (String):   "String",
    (Type):     "Type",
    (Uniqlet):  "Uniqlet",
    (false):    "false",
    (null):     "null",
    (true):     "true"
};

## Checks to see if the given value is a string with the form of an
## in-language identifier.
fn isIdentifier(string) {
    ifNot { <> isString(string) }
        { return };

    ifIs { <> eq(string, "") }
        { return };

    ifNot { <> get(IDENTIFIER_STARTS, Collection::nth(string, 0)) }
        { return };

    Generator::filterPump(string) { ch ->
        ifNot { <> get(IDENTIFIER_CHARS, ch) }
            { return }
    };

    <> true
};

## Stringifies a key (or derived value name).
fn keyString(key) {
    ifIs { <> isIdentifier(key) }
        { return key };

    ifValue { <> get(SPECIAL_VALUES, key) }
        { string -> return cat("(", string, ")") };

    <> sourceGeneral(key, true)
};

## Stringifies a derived value type.
fn typeString(type){
    ifIs { <> isString(type) }
        {
            ifIs { <> isIdentifier(type) }
                { return type }
                { return sourceGeneral(type, true) }
        };

    def body = ifValueOr { <> get(SPECIAL_VALUES, type) }
        { <> sourceGeneral(type, true) };

    <> cat("(", body, ")")
};

## The first Unicode surrogate code point.
def CHAR_SURROGATE_START = toString(55296); ## U+D800

## The last Unicode surrogate code point.
def CHAR_SURROGATE_END = toString(57343); ## U+DFFF

## The last Unicode code point.
def CHAR_UNICODE_END = toString(1114111); ## U+10FFFF

## Map of special-case characters to either their stringified forms or
## to `"x"` to indicate a need to convert as hex.
def SPECIAL_CHARS = {
    (Range::makeInclusiveRange(toString(1), toString(31)))*: "x",
    (Range::makeInclusiveRange(toString(127), toString(159)))*: "x",
    (toString(65534)): "x",
    (toString(65535)): "x",
    "\0": "\\0",
    "\n": "\\n",
    "\r": "\\r",
    "\t": "\\t",
    "\"": "\\\"",
    "\\": "\\\\"
};

## Does hex character conversion.
fn hexStringChar(ch) {
    <> cat(
        "\\x",
        intWithBase(toInt(ch), 16),
        ";")
};

## Helper for stringifying strings: Returns the converted form of the
## given character.
fn stringChar(ch) {
    ifValue { <> get(SPECIAL_CHARS, ch) }
        { special ->
            ifIs { <> eq(special, "x") }
                { return hexStringChar(ch) }
                { return special }
        };

    ifIs { <> lt(ch, CHAR_SURROGATE_START) }
        { return ch };

    ifIs { <> le(ch, CHAR_SURROGATE_END) }
        { return hexStringChar(ch) };

    <> ifIs { <> le(ch, CHAR_UNICODE_END) }
        { <> ch }
        { <> hexStringChar(ch) }
};

## Stringifies an int.
fn Int_sourceGeneral(int, adorn) {
    <> intWithBase(int, 10)
};
genericBind(sourceGeneral, Int, Int_sourceGeneral);

## Stringifies a list.
fn List_sourceGeneral(list, adorn) {
    def listElems = Generator::filterAll(list)
        { elem <> cat(", ", sourceGeneral(elem, true)) };

    <> adornIf(adorn, "[", collectionBody(listElems), "]")
};
genericBind(sourceGeneral, List, List_sourceGeneral);

## Stringifies a map.
fn Map_sourceGeneral(map, adorn) {
    def mapElems = Generator::filterAll(map)
        { mapping ->
            def key = keyString(keyOf(mapping));
            def value = sourceGeneral(valueOf(mapping), true);
            <> cat(", ", key, ": ", value)
        };

    <> adornIf(adorn, "{", collectionBody(mapElems), "}");
};
genericBind(sourceGeneral, Map, Map_sourceGeneral);

## Stringifies a string.
fn String_sourceGeneral(string, adorn) {
    def bodyChars = Generator::makeFilterGenerator(string)
        { ch <> stringChar(ch) };
    <> adornIf(adorn, "\"", cat("", bodyChars*), "\"")
};
genericBind(sourceGeneral, String, String_sourceGeneral);

## Stringifies a derived value or an opaque core value.
fn Value_sourceGeneral(value, adorn) {
    ifValue { <> get(SPECIAL_VALUES, value) }
        { string -> return string };

    def prefix = adornIf(adorn, "@", typeString(typeOf(value)), "");

    ifIs { <> isOpaqueValue(value) }
        {
            ## Opaque value, possibly named.
            def body = ifIs { <> canCall(nameOf, value) }
                {
                    ## It binds `nameOf` but might not have a name.
                    <> ifValue { <> nameOf(value) }
                        { name <> keyString(name) }
                        { <> "..." }
                }
                { <> "..." };

            return cat(prefix, "<", body, ">")
        };

    <> ifValue { <> dataOf(value) }
        { data ->
            ## Transparent derived value with payload.
            return cat(prefix, "(", sourceGeneral(data, true), ")")
        }
        {
            ## Type-only transparent derived value.
            <> prefix
        };
};
genericBind(sourceGeneral, Value, Value_sourceGeneral);


##
## `humanString`
##

## `humanString(value)`: Produces a human-oriented string of the argument.
def humanString = makeRegularGeneric("humanString", 1, 1);

## Human-stringifies a list, which recursively flattens it using
## `humanString`.
fn List_humanString(list) {
    def elems = Generator::makeFilterGenerator(humanString, list);
    <> cat("", elems*)
};
genericBind(humanString, List, List_humanString);

## Human-stringifies a string, which just returns the string as-is.
fn String_humanString(string) {
    <> string
};
genericBind(humanString, String, String_humanString);

## Default human-stringifier, which just calls through to
## `sourceGeneral`.
fn Value_humanString(value) {
    <> sourceGeneral(value, true)
};
genericBind(humanString, Value, Value_humanString);


##
## Exported Definitions
##

## Documented in Samizdat Layer 0 spec.
fn int(value, optBase?) {
    def base = ifValueOr { <> optBase* } { <> 10 };

    <> ifIs { <> le(&le(2, base), 36) }
        { <> intWithBase(value, base) }
        { Io0::die("Invalid base for int.") }
};

## Documented in Samizdat Layer 0 spec.
fn intHex(arg) {
    <> intWithBase(arg, 16)
};

## Documented in Samizdat Layer 0 spec.
fn source(value?) {
    <> ifValue { <> value* }
        { value <> sourceGeneral(value, true) }
        { <> "void" }
};

## Documented in Samizdat Layer 0 spec.
fn sourceUnadorned(value?) {
    <> ifValue { <> value* }
        { value <> sourceGeneral(value, false) }
        { <> "void" }
};

## Documented in Samizdat Layer 0 spec.
fn usual(value?) {
    <> ifValue { <> value* }
        { value <> humanString(value) }
        { <> "" }
};

## Mapping from format escape characters to their respective handler functions.
def FORMATTERS = {
    q: source,
    Q: sourceUnadorned,
    s: usual,
    x: intHex
};

## Documented in Samizdat Layer 0 spec.
##
## This is listed out of (alphabetical) order, as it uses `FORMATTERS`, which
## is defined in terms of other exported functions.
fn formatterFor(formatSpec) {
    <> ifValueOr { <> get(FORMATTERS, formatSpec) }
        { Io0::die(cat("Unrecognized format spec: ", source(formatSpec))) }
};


<> {
    formatterFor,
    int,
    intHex,
    source,
    sourceUnadorned,
    usual
}
