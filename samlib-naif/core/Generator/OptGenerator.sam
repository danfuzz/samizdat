## Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `OptGenerator` Type
##
## Payload is `subGen`, the sub-generator.

def Generator = moduleUse({name: ["proto", "Generator"]});

def ValueGenerator = submoduleUse("ValueGenerator");
def unboundedCollect = submoduleUse("unboundedCollect")::unboundedCollect;


##
## Exported Definitions
##

## Documented in spec.
fn makeOptGenerator(generator) {
    <> @OptGenerator(generator)
};

## Documented in spec.
genericBind(Generator::collect, "OptGenerator", unboundedCollect);

## Documented in spec.
fn OptGenerator_nextValue(gen, box) {
    def subGen = dataOf(gen);
    def innerBox = Box::makePromise();

    <> ifValue { <> Generator::nextValue(subGen, innerBox) }
        { nextGen ->
            Box::store(box, [Box::fetch(innerBox)]);
            <> @OptGenerator(nextGen)
        }
        {
            <> Generator::nextValue(
                ValueGenerator::makeValueGenerator([]),
                box)
        }
};
genericBind(Generator::nextValue, "OptGenerator", OptGenerator_nextValue);

<> {
    makeOptGenerator
}
