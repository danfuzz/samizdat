## Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Generator functions
##

def Generator = moduleUse({name: ["proto", "Generator"]});

def FilterGenerator = submoduleUse("FilterGenerator");
def ListWrapGenerator = submoduleUse("ListWrapGenerator");
def NullGenerator = submoduleUse("NullGenerator");
def OptGenerator = submoduleUse("OptGenerator");
def ParaGenerator = submoduleUse("ParaGenerator");
def RepeatGenerator = submoduleUse("RepeatGenerator");
def SerialGenerator = submoduleUse("SerialGenerator");
def ValueGenerator = submoduleUse("ValueGenerator");
def unboundedCollect = submoduleUse("unboundedCollect");

##
## Exported Definitions
##

## Documented in spec.
fn collectAsMap(generator) {
    ## Avoid pointless map->generator->map conversion.
    ifIs { <> isMap(generator) }
        { return generator };

    <> cat({}, generator*)
};

## Documented in spec.
fn filterAll(filterFunction, generators*) {
    <> ifIs { <> eq(Collection::sizeOf(generators), 1) }
        {
            ## We are filtering a single generator, so just use the
            ## special-case (and often more efficient) `collect`.
            <> Generator::collect(generators*, filterFunction)
        }
        {
            ## The general case.
            <> Generator::collect(
                FilterGenerator::makeFilterGenerator(
                    filterFunction, generators*))
        }
};

## Documented in spec.
fn doReduce(reduceFunction, generator, baseValues*) {
    loopReduce(generator, baseValues)
        { gen, values ->
            def box = Box::makePromise();
            <> ifValue { <> Generator::nextValue(gen, box) }
                { nextGenerator ->
                    <> ifValue { <> reduceFunction(Box::fetch(box), values*) }
                        { nextValues <> [nextGenerator, nextValues] }
                        {
                            ## The reduce function discarded the values.
                            <> [nextGenerator, values]
                        }
                }
                {
                    ## The generator was voided.
                    return values
                }
        }
};

## Documented in spec.
fn doReduce1(reduceFunction, generator, baseValue) {
    loopReduce(generator, baseValue)
        { gen, value ->
            def box = Box::makePromise();
            <> ifValue { <> Generator::nextValue(gen, box) }
                { nextGenerator ->
                    <> ifValue { <> reduceFunction(Box::fetch(box), value) }
                        { nextVal <> [nextGenerator, nextVal] }
                        {
                            ## The reduce function discarded the value.
                            <> [nextGenerator, value]
                        }
                }
                {
                    ## The generator was voided.
                    return value
                }
        }
};

## Documented in spec.
fn filterPump(filterFunction, generators*) {
    loopReduce(ParaGenerator::makeParaGenerator(generators*))
        { gen ->
            def box = Box::makePromise();
            <> ifValue { <> Generator::nextValue(gen, box) }
                { nextGenerator ->
                    filterFunction(Box::fetch(box)*);
                    <> [nextGenerator]
                }
                {
                    ## The inner generator was voided.
                    return
                }
        }
};

## Documented in spec.
fn generatorPump(generator) {
    loopReduce(generator) { gen ->
        <> ifValue { <> Generator::nextValue(gen, Box::nullBox) }
            { nextGen <> [nextGen] }
            { return }
    }
};

<> {
    ## Re-exported from builtins.
    stdCollect:              Generator_stdCollect,

    ## Re-exported from proto module.
    collect:                 Generator::collect,
    nextValue:               Generator::nextValue,

    ## Re-exported from submodules.
    makeFilterGenerator:     FilterGenerator::makeFilterGenerator,
    makeListWrapGenerator:   ListWrapGenerator::makeListWrapGenerator,
    makeOptGenerator:        OptGenerator::makeOptGenerator,
    makeParaGenerator:       ParaGenerator::makeParaGenerator,
    makeRepeatGenerator:     RepeatGenerator::makeRepeatGenerator,
    makeSerialGenerator:     SerialGenerator::makeSerialGenerator,
    makeValueGenerator:      ValueGenerator::makeValueGenerator,
    nullGenerator:           NullGenerator::nullGenerator,
    unboundedCollect:        unboundedCollect::unboundedCollect,

    ## Defined in this file.
    collectAsMap,
    doReduce,
    doReduce1,
    filterAll,
    filterPump,
    generatorPump
}
