## Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Generator functions
##

def FilterGenerator = submoduleUse("FilterGenerator");
def ListWrapGenerator = submoduleUse("ListWrapGenerator");
def NullGenerator = submoduleUse("NullGenerator");
def OptGenerator = submoduleUse("OptGenerator");
def ParaGenerator = submoduleUse("ParaGenerator");
def RepeatGenerator = submoduleUse("RepeatGenerator");
def SerialGenerator = submoduleUse("SerialGenerator");
def ValueGenerator = submoduleUse("ValueGenerator");
def unboundedCollect = submoduleUse("unboundedCollect");

##
## Exported Definitions
##

## Documented in spec.
fn collectAsMap(generator) {
    ## Avoid pointless map->generator->map conversion.
    ifIs { <> isMap(generator) }
        { return generator };

    <> cat({}, generator*)
};

## Documented in spec.
fn filterAll(filterFunction, generators*) {
    <> ifIs { <> eq(Collection::sizeOf(generators), 1) }
        {
            ## We are filtering a single generator, so just use the
            ## special-case (and often more efficient) `collect`.
            <> collect(generators*, filterFunction)
        }
        {
            ## The general case.
            <> collect(
                FilterGenerator::makeFilterGenerator(
                    filterFunction, generators*))
        }
};

## Documented in spec.
fn filterPump(filterFunction, generators*) {
    ifIs { <> eq(Collection::sizeOf(generators), 1) }
        {
            ## Handle a single generator as a special case to avoid a lot of
            ## unnecessary wrapping / unwrapping.
            var gen = generators*;
            loop {
                def box = Box::makePromise();
                ifValue { <> nextValue(gen, box) }
                    { nextGen ->
                        filterFunction(Box::fetch(box));
                        gen := nextGen
                    }
                    {
                        ## The generator was voided.
                        return
                    }
            }
        }
        {
            ## General case of multiple (or zero) generators.
            var gen = ParaGenerator::makeParaGenerator(generators*);
            loop {
                def box = Box::makePromise();
                ifValue { <> nextValue(gen, box) }
                    { nextGen ->
                        filterFunction(Box::fetch(box)*);
                        gen := nextGen
                    }
                    {
                        ## The inner generator was voided.
                        return
                    }
            }
        }
};

## Documented in spec.
fn generatorPump(generator) {
    var gen = generator;

    loop {
        gen := ifValueOr { <> nextValue(gen, Box::nullBox) }
            { return }
    }
};

<> {
    ## Re-exported from builtins.
    stdCollect:              Generator_stdCollect,
    catCollect:              catCollect,

    ## Re-exported from globals (and proto module).
    collect,
    nextValue,

    ## Re-exported from submodules.
    makeFilterGenerator:     FilterGenerator::makeFilterGenerator,
    makeListWrapGenerator:   ListWrapGenerator::makeListWrapGenerator,
    makeOptGenerator:        OptGenerator::makeOptGenerator,
    makeParaGenerator:       ParaGenerator::makeParaGenerator,
    makeRepeatGenerator:     RepeatGenerator::makeRepeatGenerator,
    makeSerialGenerator:     SerialGenerator::makeSerialGenerator,
    makeValueGenerator:      ValueGenerator::makeValueGenerator,
    nullGenerator:           NullGenerator::nullGenerator,
    unboundedCollect:        unboundedCollect::unboundedCollect,

    ## Defined in this file.
    collectAsMap,
    filterAll,
    filterPump,
    generatorPump
}
