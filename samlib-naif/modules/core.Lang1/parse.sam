## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Samizdat Layer 1 tree parser
##

#= language core.Lang0

import core.Format;
import core.Generator :: filterPump;
import core.LangNode :: *;
import core.Peg :: *;
import core.Range :: makeInclusiveRange;
import proto.Number :: neg;

import ./tokenize :: tokenize;


##
## Private Definitions
##

## Reports the given list of pending tokens as part of error processing.
fn reportError(pending) {
    note("Pending tokens:");

    filterPump(pending, makeInclusiveRange(1, 50))
        { token, . -> note("    ", $Format::source(token)) };

    die("\nExtra tokens at end of program.")
};

## Set-like map of all lowercase identifier characters. Used to figure
## out if we're looking at a keyword in the `identifierString` rule.
def LOWER_ALPHA = {
    makeInclusiveRange("a", "z")*: true
};


##
## Grammar rules
##
## The following is a near-transliteration of the tree grammar in
## the Samizdat Layer 0 and Samizdat Layer 1 specifications.
##

##
## Samizdat Layer 0 definitions
##

## Forward declaration required for integrating layer 1 definitions.
def parParser;

## Forward declarations.
def parAssignExpression;
def parRawClosure;

## Forward declaration for the "top" rule which parses operator expressions.
## This gets bound to `parUnaryExpression` in the Layer 0 and 1 grammars, but
## it's different in Layer 2.
def parOpExpression;

## Documented in spec.
def parExpression = makeMainChoice(
    makeParserThunk { parAssignExpression });

## Documented in spec.
def parParenExpression = makeMainSequence(
    makeToken(@@"("),
    parExpression,
    makeToken(@@")"),
    makeCode { ., ex, . -> withoutInterpolate(ex) });

## Documented in spec.
def parName =  makeMainSequence(
    makeToken(@@identifier),
    makeCode { nameIdent -> dataOf(nameIdent) });

## Documented in spec.
def parNameList = makeMainSequence(
    parName,
    makeRepeat(makeSequence(makeToken(@@","), parName)),
    makeCode { first, rest -> [first, rest*] });

## Documented in spec.
def parVarRef = makeMainSequence(
    parName,
    makeCode { name -> makeVarFetchLvalue(name) });

## Documented in spec.
def parVarBox = makeMainSequence(
    makeToken(@@var),
    parName,
    makeCode { name -> makeVarBox(name) });

## Documented in spec.
def parInt = makeMainChoice(
    makeSequence(
        makeToken(@@"-"),
        makeToken(@@int),
        makeCode { ., i -> makeLiteral(neg(dataOf(i))) }),
    makeSequence(
        makeToken(@@int),
        makeCode { i -> makeLiteral(dataOf(i)) }));

## Documented in spec.
def parString = makeMainSequence(
    makeToken(@@string),
    makeCode { s -> makeLiteral(dataOf(s)) });

## Documented in spec.
def parIdentifierString = makeMainChoice(
    parString,
    makeSequence(
        parName,
        makeCode { name -> makeLiteral(name) }),
    makeSequence(
        any,
        makeCode { token ->
            ifNot { dataOf(token) }
                {
                    def type = get_typeName(token);
                    def firstCh = nth(type, 0);
                    ifIs { get(LOWER_ALPHA, firstCh) }
                        { makeLiteral(type) }
                }
            }));

## Documented in spec.
def parKey = makeMainChoice(
    makeSequence(
        parIdentifierString,
        makeToken(@@":"),
        makeCode { key, . -> key }),
    makeSequence(
        parExpression,
        makeToken(@@":"),
        makeCode { key, . -> key }));

## Documented in spec.
def parMapping = makeMainSequence(
    makeRepeat(parKey),
    parExpression,
    makeCode { keys, value ->
        ifIs { eq(keys, []) }
            { /out ->
                ## No keys were specified, so the value must be either a
                ## whole-map interpolation or a variable-name-to-its-value
                ## binding.
                ifValue { get_interpolate(value) }
                    { interp -> yield /out interp };
                ifIs { hasType(value, @@varFetch) }
                    {
                        yield /out makeCall(REFS::makeValueMap,
                            makeLiteral(get_name(value)), value)
                    }
            }
            {
                ## One or more keys.
                makeCallOrApply(REFS::makeValueMap,
                    keys*, withoutInterpolate(value))
            }
    });

## Documented in spec.
def parMap = makeMainSequence(
    makeToken(@@"{"),
    makeChoice(
        makeSequence(
            parMapping,
            makeRepeat(
                makeSequence(makeToken(@@","), parMapping)),
            makeCode { ., one, rest ->
                ifIs { eq(rest, []) }
                    { one }
                    { makeCall(REFS::cat, one, rest*) }
            }),
        makeCode { . -> makeLiteral({}) }),
    makeToken(@@"}"),
    makeCode { ., result, . -> result });

## Documented in spec.
def parListItem = makeMainChoice(
    makeSequence(
        parIdentifierString,
        makeToken(@@":"),
        makeCode { ., . ->
            die("Mapping syntax not valid as a list item or call argument.")
        }),
    parExpression);

## Documented in spec.
def parUnadornedList = makeMainChoice(
    makeSequence(
        parListItem,
        makeRepeat(
            makeSequence(makeToken(@@","), parListItem)),
        makeCode { one, rest -> [one, rest*] }),
    makeResult([]));

## Documented in spec.
def parList = makeMainSequence(
    makeToken(@@"["),
    parUnadornedList,
    makeToken(@@"]"),
    makeCode { ., expressions, . ->
        ifIs { eq(expressions, []) }
            { makeLiteral([]) }
            { makeCallOrApply(REFS::makeList, expressions*) }
    });

## Documented in spec.
def parType = makeMainSequence(
    makeToken(@@"@@"),
    makeChoice(parIdentifierString, parParenExpression),
    makeCode { ., name ->
        ifIs { hasType(name, @@literal) }
            { makeLiteral(@@(get_nodeValue(name))) }
            { makeCall(REFS::makeDerivedDataType, name) }
    });

## Documented in spec.
def parDeriv = makeMainSequence(
    makeToken(@@"@"),
    makeChoice(
        makeSequence(
            parIdentifierString,
            makeCode { ., name ->
                makeLiteral(@@(get_nodeValue(name)))
            }),
        parParenExpression),
    makeRepeat(makeChoice(parParenExpression, parMap, parList), 0, 1),
    makeCode { ., type, value ->
        makeCall(REFS::makeValue, type, value*)
    });

## Documented in spec.
def parFullClosure = makeMainSequence(
    makeLookaheadSuccess(makeToken(@@"{")),
    makeParserThunk { . -> parRawClosure },
    makeCode { ., raw ->
        def closure = makeFullClosure(raw);
        withoutTops(closure)
    });

## Documented in spec.
def parBasicClosure = makeMainSequence(
    makeLookaheadSuccess(makeToken(@@"{")),
    makeParserThunk { . -> parRawClosure },
    makeCode { ., raw ->
        def closure = makeBasicClosure(raw);
        withoutTops(closure)
    });

## Documented in spec.
def parNullaryClosure = makeMainSequence(
    parFullClosure,
    makeCode { c ->
        def formals = get_formals(c);
        ifIs { ne(formals, []) }
            { die("Invalid formal argument in code block.") };
        c
    });

## Documented in spec.
def parBasicNullaryClosure = makeMainSequence(
    parBasicClosure,
    makeCode { c ->
        def formals = get_formals(c);
        ifIs { ne(formals, []) }
            { die("Invalid formal argument in code block.") };
        c
    });

## Documented in spec.
def parTerm = makeMainChoice(
    parVarRef, parVarBox, parInt, parString, parMap, parList,
    parDeriv, parType, parFullClosure, parParenExpression,
    ## Defined by Samizdat Layer 1. The lookahead is just to make
    ## it clear what is required to "jump into" Layer 1 parsing.
    makeSequence(
        makeLookaheadSuccess(makeToken(@@"{:")),
        makeParserThunk { . -> parParser }));

## Documented in spec.
def parActualsList = makeMainChoice(
    makeSequence(
        makeToken(@@"("),
        parUnadornedList,
        makeToken(@@")"),
        makeRepeat(parFullClosure),
        makeCode { ., normalActuals, ., closureActuals ->
            [closureActuals*, normalActuals*]
        }),
    makeRepeat(parFullClosure, 1));

## Documented in spec.
def parPostfixOperator = makeMainChoice(
    makeSequence(
        parActualsList,
        makeCode { actuals ->
            { node -> makeCallOrApply(node, actuals*) }
        }),
    makeSequence(
        makeToken(@@"::"),
        parIdentifierString,
        makeCode { ., key -> { node -> makeGet(node, key) } }),
    makeSequence(
        makeToken(@@"*"),
        makeCode { . -> { node -> makeInterpolate(node) } }),
    makeSequence(
        makeToken(@@"?"),
        makeCode { . -> { node -> makeMaybeValue(node) } }));

## Documented in spec.
def parUnaryExpression = makeMainSequence(
    makeChoice(
        makeSequence(
            parTerm,
            makeCode { base -> {base, prefixes: []} }),
        ## This is a stub representing the layer 2 part of the rule.
        fail),
    makeRepeat(parPostfixOperator),
    makeCode { basePrefixes, postfixes ->
        def prefixes = basePrefixes::prefixes;
        var result = basePrefixes::base;

        filterPump(postfixes) { op -> result := op(result) };
        filterPump(prefixes) { op -> result := op(result) };
        result
    });

## Documented in spec.
parAssignExpression := makeMainSequence(
    makeParserThunk { parOpExpression },
    makeChoice(
        makeSequence(
            makeToken(@@":="),
            makeCode { base, . -> get_lvalue(base) },
            parExpression,
            makeCode { base, ., lvalue, ex -> lvalue(ex) }),
        makeCode { base -> base }));

## Documented in spec.
def parYieldOrNonlocal = makeMainSequence(
    makeTokenSet(@@break, @@continue, @@return, @@yield),
    makeRepeat(makeToken(@@"?"), 0, 1),
    makeChoice(
        makeSequence(
            makeCode { op, . -> hasType(op, @@yield) },
            makeChoice(
                makeSequence(makeToken(@@"/"), parVarRef),
                makeResult(@yield))),
        makeCode { op, . -> makeVarFetch(get_typeName(op)) }),
    makeChoice(
        makeSequence(
            parExpression,
            makeCode { ., optQuest, ., v ->
                ifIs { optQuest* } { makeMaybe(v) } { v }
            }),
        makeCode { ., optQuest, . ->
            ifNot { optQuest* } { @void }
        }),
    makeCode { ., ., name, value ->
        ifIs { eq(name, @yield) }
            { value }
            { makeNonlocalExit(name, value) }
    });

## Documented in spec.
def parVarDef = makeMainSequence(
    makeToken(@@def),
    parName,
    makeRepeat(makeSequence(makeToken(@@"="), parExpression), 0, 1),
    makeCode { ., name, optExpr ->
        makeVarDef(name, optExpr*)
    });

## Documented in spec.
def parVarDefMutable = makeMainSequence(
    makeToken(@@var),
    parName,
    makeRepeat(makeSequence(makeToken(@@"="), parExpression), 0, 1),
    makeCode { ., name, optExpr ->
        makeVarDefMutable(name, optExpr*)
    });

## Documented in spec.
def parYieldDef = makeMainSequence(
    makeToken(@@"/"),
    parName,
    makeCode { ., name -> name });

## Documented in spec.
def parOptYieldDef = makeMainChoice(
    makeSequence(
        parYieldDef,
        makeCode { y -> {yieldDef: y} }),
    makeResult({}));

## Documented in spec.
def parFormal = makeMainSequence(
    makeChoice(
        makeSequence(
            parName,
            makeCode { n -> {name: n} }),
        makeSequence(
            makeToken(@@"."),
            makeResult({}))),
    makeChoice(
        makeSequence(
            makeTokenSet(@@"?", @@"*", @@"+"),
            makeCode { ., r -> {repeat: get_typeName(r)} }),
        makeResult({})),
    makeCode { name, repeat -> {name*, repeat*} });

## Documented in spec.
def parFormalsList = makeMainChoice(
    makeSequence(
        parFormal,
        makeRepeat(makeSequence(makeToken(@@","), parFormal)),
        makeCode { one, rest -> [one, rest*] }),
    makeResult([]));

## Documented in spec.
def parClosureDeclarations = makeMainChoice(
    makeSequence(
        makeChoice(
            makeSequence(
                makeChoice(
                    makeSequence(
                        parName,
                        makeCode { n -> {name: n} }),
                    makeResult({})),
                makeToken(@@"("),
                parFormalsList,
                makeToken(@@")"),
                makeCode { name, ., formals, . -> {name*, formals} }),
            makeSequence(
                parFormalsList,
                makeCode { formals -> {formals} })),
        parOptYieldDef,
        makeToken(@@"->"),
        makeCode { most, yieldDef, . -> {most*, yieldDef*} }),
    makeResult({formals: []}));

## Documented in spec.
def parFunctionCommon = makeMainSequence(
    parName,
    makeToken(@@"("),
    parFormalsList,
    makeToken(@@")"),
    parBasicNullaryClosure,
    makeCode { name, ., formals, ., code ->
        def basic = withName(
            withFormals(
                withYieldDef(code, "return"),
                formals),
            name);

        makeFullClosure(basic)
    });

## Documented in spec.
def parFunctionDef = makeMainSequence(
    makeToken(@@fn),
    parFunctionCommon,
    makeCode { ., closure ->
        withTop(makeVarDef(get_name(closure), closure))
    });

## Documented in spec.
def parGenericBind = makeMainSequence(
    makeToken(@@fn),
    makeChoice(parVarRef, parType),
    makeToken(@@"."),
    parFunctionCommon,
    makeCode { ., bind, ., closure ->
        def formals = get_formals(closure);
        def name = get_name(closure);
        def fullClosure = withFormals(closure, [{name: "this"}, formals*]);
        makeCall(REFS::genericBind, makeVarFetch(name), bind, fullClosure)
    });

## Documented in spec.
def parGenericDef = makeMainSequence(
    makeToken(@@fn),
    makeRepeat(makeToken(@@"*"), 0, 1),
    makeToken(@@"."),
    parName,
    makeToken(@@"("),
    parFormalsList,
    makeToken(@@")"),
    makeCode { ., optStar, ., name, ., formals, . ->
        def fullFormals = [{}, formals*];  ## First one is `this`.
        def func = ifIs { eq(optStar, []) }
            { REFS::makeRegularGeneric }
            { REFS::makeUnitypeGeneric };
        def call = makeCall(
            func,
            makeLiteral(name),
            makeLiteral(formalsMinArgs(fullFormals)),
            makeLiteral(formalsMaxArgs(fullFormals)));

        withTop(makeVarDef(name, call))
    });

## Documented in spec.
def parImportName = makeMainChoice(
    makeSequence(
        parName,
        makeChoice(
            makeSequence(
                makeToken(@@"*"),
                makeResult("prefix")),
            makeResult("name")),
        makeToken(@@"="),
        makeCode { name, key, . -> {(key): name} }),
    makeResult({}));

## Documented in spec.
def parImportFormat = makeMainChoice(
    makeSequence(
        makeToken(@@"@"),
        parIdentifierString,
        makeCode { ., f -> {format: get_nodeValue(f)} }),
    makeResult({}));

## Documented in spec.
def parImportSource = makeMainChoice(
    makeSequence(
        makeToken(@@"."),
        makeToken(@@"/"),
        parName,
        makeRepeat(
            makeSequence(
                makeToken(@@"/"),
                parName,
                makeCode { ., ., ., ., n -> cat("/", n) })),
        makeRepeat(
            makeSequence(
                makeToken(@@"."),
                parName,
                makeCode { ., ., ., ., ., n -> cat(".", n) }),
            0, 1),
        makeCode { ., ., first, rest, optSuffix ->
            def name = cat(first, rest*, optSuffix*);
            @internal(name)
        }),
    makeSequence(
        parName,
        makeRepeat(
            makeSequence(
                makeToken(@@"."),
                parName,
                makeCode { ., ., n -> cat(".", n) })),
        makeCode { first, rest ->
            def name = cat(first, rest*);
            @external(name)
        }));

## Documented in spec.
def parImportSelect = makeMainChoice(
    makeSequence(
        makeToken(@@"::"),
        makeChoice(
            makeSequence(
                makeToken(@@"*"),
                makeResult({select: @"*"})),
            makeSequence(
                parNameList,
                makeCode { ., select -> {select} }))),
    makeResult({}));

## Documented in spec.
def parImportStatement = makeMainSequence(
    makeRepeat(makeToken(@@export), 0, 1),
    makeToken(@@import),
    parImportName,
    parImportFormat,
    parImportSource,
    parImportSelect,
    makeCode { optExport, ., nameOrPrefix, format, source, select ->
        def data = {nameOrPrefix*, format*, select*, source};
        ifIs { optExport* }
            { makeExport(makeImport(data)) }
            { makeImport(data) }
    });

## Documented in spec.
def parExportableStatement = makeMainChoice(
    parFunctionDef, parGenericDef, parVarDef);

## Documented in spec.
def parStatement = makeMainChoice(
    parExportableStatement, parGenericBind, parVarDefMutable, parExpression);

## Documented in spec.
def parProgramStatement = makeMainChoice(
    parStatement,
    makeSequence(
        makeToken(@@export),
        makeChoice(
            makeSequence(
                parNameList,
                makeCode { ., select -> makeExportSelection(select*) }),
            makeSequence(
                parExportableStatement,
                makeCode { ., stat -> makeExport(stat) }))));

## Documented in spec.
def parClosureBody = makeMainSequence(
    makeRepeat(makeToken(@@";")),
    makeRepeat(
        makeMainSequence(
            parStatement,
            makeRepeat(makeToken(@@";"), 1),
            makeCode { s, . -> s })),
    makeChoice(
        makeMainSequence(
            parStatement,
            makeCode { s -> {statements: [s]} }),
        makeMainSequence(
            parYieldOrNonlocal,
            makeCode { y -> {statements: [], yield: y} }),
        makeResult({statements: []})),
    makeRepeat(makeToken(@@";")),
    makeCode { ., most, last, . ->
        {last*, statements: [most*, last::statements*]}
    });

## Documented in spec.
parRawClosure := makeMainSequence(
    makeToken(@@"{"),
    parClosureDeclarations,
    parClosureBody,
    makeToken(@@"}"),
    makeCode { ., decls, body, . -> {decls*, body*} });

## Documented in spec.
def parProgram = makeMainSequence(
    makeChoice(
        makeSequence(
            makeRepeat(makeToken(@@";")),
            parImportStatement,
            makeRepeat(
                makeSequence(
                    makeRepeat(makeToken(@@";"), 1),
                    parImportStatement)),
            makeCode { ., first, rest -> [first, rest*] }),
        makeResult([])),
    makeChoice(
        makeSequence(
            makeChoice(
                makeSequence(
                    makeCode { imports -> ne(imports, []) },
                    makeRepeat(makeToken(@@";"), 1)),
                makeRepeat(makeToken(@@";"))),
            parProgramStatement,
            makeRepeat(
                makeSequence(
                    makeRepeat(makeToken(@@";"), 1),
                    parProgramStatement)),
            makeCode { ., ., first, rest -> [first, rest*] }),
        makeResult([])),
    makeRepeat(makeToken(@@";")),
    makeCode { imports, body, . ->
        def closure = makeFullClosure({
            statements: [imports*, body*],
            yield:      @void
        });
        withoutTops(closure)
    });

## Documented in spec.
def parExpressionOrError = makeMainSequence(
    parExpression,
    makeRepeat(
        makeMainSequence(
            makeRepeat(any, 1),
            makeCode { pending -> reportError(pending) }),
        0, 1),
    makeCode { ex, . -> ex });

## Documented in spec.
def parProgramOrError = makeMainSequence(
    parProgram,
    makeRepeat(
        makeMainSequence(
            makeRepeat(any, 1),
            makeCode { pending -> reportError(pending) }),
        0, 1),
    makeCode { prog, . -> prog });


##
## Samizdat Layer 1 definitions
##

## `choicePex` is the top-level parsing expression node type.
def parChoicePex;

## Map from parser token types to derived value types for pexes.
def PEX_TYPES = {
    @@"&": @@lookaheadSuccess,
    @@"!": @@lookaheadFailure,
    @@"?": @@opt,
    @@"*": @@star,
    @@"+": @@plus
};

## Documented in spec.
parParser := makeMainSequence(
    makeToken(@@"{:"),
    makeParserThunk { . -> parChoicePex },
    makeToken(@@":}"),
    makeCode { ., pex, . -> @parser{pex} });

## Documented in spec.
def parParenPex = makeMainSequence(
    makeToken(@@"("),
    makeParserThunk { . -> parChoicePex },
    makeToken(@@")"),
    makeCode { ., pex, . -> pex });

## Documented in spec.
def parParserString = makeMainSequence(
    makeToken(@@string),
    makeCode { s -> @string{value: dataOf(s)} });

## Documented in spec.
def parParserToken = makeMainSequence(
    makeToken(@@"@"),
    parIdentifierString,
    makeCode { ., type -> @token{value: @@(get_nodeValue(type))} });

## Documented in spec.
def parParserSetString = makeMainSequence(
    makeToken(@@string),
    makeChoice(
        makeSequence(
            makeToken(@@".."),
            makeToken(@@string),
            makeCode { s, ., end /out ->
                def startChar = dataOf(s);
                def endChar = dataOf(end);

                ## Reject non-single-character strings.
                ifIs { ne(1, get_size(startChar)) } { yield /out };
                ifIs { ne(1, get_size(endChar)) } { yield /out };

                yield cat(makeInclusiveRange(startChar, endChar)*)
            }),
        makeCode { s -> dataOf(s) }));

## Documented in spec.
def parParserSet = makeMainSequence(
    makeToken(@@"["),
    makeChoice(
        makeSequence(
            makeToken(@@"!"),
            makeResult(@@tokenSetComplement)),
        makeResult(@@tokenSet)),
    makeChoice(
        makeMainSequence(
            makeRepeat(parParserSetString, 1),
            makeCode { strings ->
                collect(cat(strings*), { ch -> @@(ch) })
            }),
        makeMainSequence(
            makeRepeat(parParserToken, 1),
            makeCode { tokens -> collect(tokens, get_nodeValue) }),
        makeResult([])),
    makeToken(@@"]"),
    makeCode { ., type, terminals, . -> @(type){values: terminals} });

## Documented in spec.
def parParserCode = makeMainSequence(
    parNullaryClosure,
    makeCode { closure -> @code(dataOf(closure)) });


## Documented in spec.
def parParserThunk = makeMainSequence(
    makeToken(@@"%"),
    parTerm,
    makeCode { ., value -> @thunk{value} });

## Documented in spec.
def parParserTerm = makeMainChoice(
    makeSequence(
        makeToken(@@"."),
        makeResult(@any)),
    makeSequence(
        makeToken(@@"("),
        makeToken(@@")"),
        makeResult(@empty)),
    parVarRef,
    parParserString,
    parParserToken,
    parParserSet,
    parParserCode,
    parParserThunk,
    parParenPex);

## Documented in spec.
def parRepeatPex = makeMainSequence(
    parParserTerm,
    makeChoice(
        makeSequence(
            makeTokenSet(@@"?", @@"*", @@"+"),
            makeCode { pex, repeat ->
                @(get(PEX_TYPES, get_type(repeat))){pex}
            }),
        makeCode { pex -> pex }));

## Documented in spec.
def parLookaheadPex = makeMainChoice(
    makeSequence(
        makeTokenSet(@@"&", @@"!"),
        parRepeatPex,
        makeCode { lookahead, pex ->
            @(get(PEX_TYPES, get_type(lookahead))){pex}
        }),
    parRepeatPex);

## Documented in spec.
def parNamePex = makeMainChoice(
    makeSequence(
        parName,
        makeToken(@@"="),
        parLookaheadPex,
        makeCode { name, ., pex ->
            @varDef{name, value: pex}
        }),
    parLookaheadPex);

## Documented in spec.
def parSequencePex = makeMainSequence(
    makeRepeat(parNamePex, 1),
    makeCode { pexes -> @sequence{pexes} });

## Documented in spec.
parChoicePex := makeMainSequence(
    parSequencePex,
    makeRepeat(
        makeSequence(
            makeToken(@@"|"),
            parSequencePex)),
    makeCode { one, rest -> @choice{pexes: [one, rest*]} });


##
## Layer 2 Rule Stubs
##

## Documented in spec.
parOpExpression := parUnaryExpression;


##
## Exported Definitions
##

## Documented in spec.
export fn parseExpression(expression) {
    def tokens = ifIs { hasType(expression, String) }
        { tokenize(expression) }
        { expression };

    return apply(parExpressionOrError, tokens)
};

## Documented in spec.
export fn parseProgram(program) {
    def tokens = ifIs { hasType(program, String) }
        { tokenize(program) }
        { program };

    return apply(parProgramOrError, tokens)
};
