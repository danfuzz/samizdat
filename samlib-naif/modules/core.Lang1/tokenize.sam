## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Samizdat Layer 1 tokenizer
##
## The following is a near-transliteration of the token grammar in
## the Samizdat Layer 0 and Samizdat Layer 1 specifications.
##

#= language core.Lang0

import core.Generator;
import core.LangNode :: KEYWORDS, intFromDigits;
import core.Peg :: *;


##
## These definitions are meant to mirror the code in the spec for
## tokenization, as closely as possible.
##

## Documented in spec.
def tokWhitespace = PegMain.newSequence(
    PegLookaheadSuccess.new(PegTokenSet.newChars("# \n")),
    PegRepeat.new(
        PegChoice.new(
            PegRepeat.new(PegTokenSet.newChars(" \n"), 1),
            PegSequence.new(
                makeString("#"),
                PegTokenSet.newChars("#!="),
                PegRepeat.new(makeCharSetComplement("\n")))),
        1));

## Documented in spec.
def tokPunctuation = PegMain.newSequence(
    PegLookaheadSuccess.new(
        PegTokenSet.newChars("@:.,=-+?;*/<>{}()[]", "&|!%")),
    PegChoice.new(
        makeString("->"),
        makeString(":="),
        makeString("::"),
        makeString(".."),
        makeString("{:"),
        makeString(":}"),
        any));

## Documented in spec.
def tokDecDigit = PegMain.newSequence(
    PegTokenSet.newChars("_0123456789"));

## Documented in spec.
def tokInt = PegMain.newSequence(
    PegRepeat.new(tokDecDigit, 1),
    PegCode.new { digits -> @int{value: intFromDigits(10, digits)} });

## Documented in spec.
def tokStringPart = PegMain.newChoice(
    PegSequence.new(
        PegRepeat.new(makeCharSetComplement("\\\"\n"), 1),
        PegCode.new(stringFromTokenList)),
    PegSequence.new(
        makeString("\n"),
        PegRepeat.new(makeString(" ")),
        PegResult.new("\n")),
    PegSequence.new(
        makeString("\\"),
        PegChoice.new(
            PegSequence.new(makeString("\\"), PegResult.new("\\")),
            PegSequence.new(makeString("\""), PegResult.new("\"")),
            PegSequence.new(makeString("n"),  PegResult.new("\n")),
            PegSequence.new(makeString("r"),  PegResult.new("\r")),
            PegSequence.new(makeString("t"),  PegResult.new("\t")),
            PegSequence.new(makeString("0"),  PegResult.new("\0")))));

## Documented in spec.
def tokString = PegMain.newSequence(
    makeString("\""),
    PegRepeat.new(tokStringPart),
    PegChoice.new(
        PegSequence.new(
            makeString("\""),
            PegCode.new { ., parts, . -> @string{value: "".cat(parts*)} }),
        PegCode.new { ., . -> @error{value: "Unterminated string literal."} }));

## These are all the characters which are allowed to start an identifier.
def IDENTIFIER_START_CHARS =
    "_$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

## These are all the characters which are allowed to be in an identifier.
def IDENTIFIER_CHARS = IDENTIFIER_START_CHARS.cat("0123456789");

## Documented in spec.
def tokIdentifier = PegMain.newSequence(
    PegTokenSet.newChars(IDENTIFIER_START_CHARS),
    PegRepeat.new(PegTokenSet.newChars(IDENTIFIER_CHARS)),
    PegCode.new { one, rest ->
        def name = symbolFromTokenList([one, rest*]);
        ifValueOr { KEYWORDS.get(name) }
            { @identifier{value: name} }
    });

## Documented in spec.
def tokQuotedIdentifier = PegMain.newSequence(
    makeString("\\"),
    tokString,
    PegCode.new { ., s -> @identifier{value: cast(Symbol, s::value)} });

## Documented in spec.
def tokError = PegMain.newSequence(
    any,
    PegRepeat.new(makeCharSetComplement("\n")),
    PegCode.new { badCh, . ->
        def msg = "Unrecognized character: ".cat(badCh.get_name());
        @error{value: msg}
    });

## Documented in spec.
def tokToken = PegMain.newChoice(
    tokString,
    tokIdentifier,
    tokQuotedIdentifier,
    tokPunctuation,
    tokInt,
    tokError);

## Documented in spec.
def tokFile = PegMain.newSequence(
    PegRepeat.new(
        PegSequence.new(
            PegRepeat.new(tokWhitespace, 0, 1),
            tokToken)),
    PegRepeat.new(tokWhitespace, 0, 1),
    PegCode.new { tokens, . -> tokens });


##
## Exported Definitions
##

## Documented in spec.
export fn tokenize(programText) {
    return apply(tokFile, programText)
};
