## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Samizdat Layer 1 tokenizer
##
## The following is a near-transliteration of the token grammar in
## the Samizdat Layer 0 and Samizdat Layer 1 specifications.
##

#= language core.Lang0

import core.Generator;
import core.Peg :: *;
import proto.Number;


##
## These definitions are meant to mirror the code in the spec for
## tokenization, as closely as possible.
##

## Map of all the keywords, from their string name to valueless tokens. These
## are (to a first approximation) operators whose spellings match the
## tokenization syntax of identifiers.
def KEYWORDS = $Generator::collectAsMap(
    $Generator::makeFilterGenerator([
        "break", "continue", "def", "export", "fn", "import", "return",
        "var", "yield",
        ## Layer 2 defines additional keywords here.
        []*])
        { name -> {(name): @(@@(name))} });

## These are all the int digits, as a map from strings to digit values. This
## includes hex digits as well, in both lower and upper case. Finally, this
## includes a mapping of `"_"` to `-1` for the implementation of the
## "digit space" syntax.
##
## **Note:** Only the decimal digits matter in Layer 0 and Layer 1.
def INT_CHARS = {
    "0": 0, "1": 1, "2": 2, "3": 3, "4": 4,
    "5": 5, "6": 6, "7": 7, "8": 8, "9": 9,
    "a": 10, "b": 11, "c": 12, "d": 13, "e": 14, "f": 15,
    "A": 10, "B": 11, "C": 12, "D": 13, "E": 14, "F": 15,
    "_": -1
};

## Given a decimal digit, returns the digit value.
fn intFromDigitChar(ch) {
    return get(INT_CHARS, get_typeName(ch))
};

## Converts a list of digit values into an int, given the base.
fn intFromDigitList(base, digits) {
    var result = 0;

    $Generator::filterPump(digits) { digit ->
        ifIs { perNe(digit, -1) }
            { result := $Number::add($Number::mul(result, base), digit) }
    };

    return result
};

## Documented in spec.
def tokWhitespace = makeMainSequence(
    makeLookaheadSuccess(makeCharSet("# \n")),
    makePlus(
        makeChoice(
            makePlus(makeCharSet(" \n")),
            makeSequence(
                makeString("#"),
                makeCharSet("#!="),
                makeStar(makeCharSetComplement("\n"))))));

## Documented in spec.
def tokPunctuation = makeMainSequence(
    makeLookaheadSuccess(
        makeCharSet("@:.,=-+?;*/<>{}()[]", "&|!%")),
    makeChoice(
        makeString("->"),
        makeString(":="),
        makeString("::"),
        makeString(".."),
        makeString("@@"),
        makeString("{:"),
        makeString(":}"),
        any));

## Documented in spec.
def tokDecDigit = makeMainSequence(
    makeCharSet("_0123456789"),
    makeCode(intFromDigitChar));

## Documented in spec.
def tokInt = makeMainSequence(
    makePlus(tokDecDigit),
    makeCode { digits -> @int(intFromDigitList(10, digits)) });

## Documented in spec.
def tokStringPart = makeMainChoice(
    makeSequence(
        makePlus(makeCharSetComplement("\\\"\n")),
        makeCode(stringFromTokenList)),
    makeSequence(
        makeString("\n"),
        makeStar(makeString(" ")),
        makeResult("\n")),
    makeSequence(
        makeString("\\"),
        makeChoice(
            makeSequence(makeString("\\"), makeResult("\\")),
            makeSequence(makeString("\""), makeResult("\"")),
            makeSequence(makeString("n"),  makeResult("\n")),
            makeSequence(makeString("r"),  makeResult("\r")),
            makeSequence(makeString("t"),  makeResult("\t")),
            makeSequence(makeString("0"),  makeResult("\0")))));

## Documented in spec.
def tokString = makeMainSequence(
    makeString("\""),
    makeStar(tokStringPart),
    makeChoice(
        makeSequence(
            makeString("\""),
            makeCode { ., parts, . -> @string(cat("", parts*)) }),
        makeCode { ., . -> @error("Unterminated string literal.") }));

## These are all the characters which are allowed to start an identifier.
def IDENTIFIER_START_CHARS =
    "_$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

## These are all the characters which are allowed to be in an identifier.
def IDENTIFIER_CHARS = cat(IDENTIFIER_START_CHARS, "0123456789");

## Documented in spec.
def tokIdentifier = makeMainSequence(
    makeCharSet(IDENTIFIER_START_CHARS),
    makeStar(makeCharSet(IDENTIFIER_CHARS)),
    makeCode { one, rest ->
        def string = stringFromTokenList([one, rest*]);
        ifValueOr { get(KEYWORDS, string) }
            { @identifier(string) }
    });

## Documented in spec.
def tokQuotedIdentifier = makeMainSequence(
    makeString("\\"),
    tokString,
    makeCode { ., s -> @identifier(dataOf(s)) });

## Documented in spec.
def tokError = makeMainSequence(
    any,
    makeStar(makeCharSetComplement("\n")),
    makeCode { badCh, . ->
        def msg = cat("Unrecognized character: ", get_typeName(badCh));
        @error(msg)
    });

## Documented in spec.
def tokToken = makeMainChoice(
    tokString,
    tokIdentifier,
    tokQuotedIdentifier,
    tokPunctuation,
    tokInt,
    tokError);

## Documented in spec.
def tokFile = makeMainSequence(
    makeStar(
        makeSequence(
            makeOpt(tokWhitespace),
            tokToken)),
    makeOpt(tokWhitespace),
    makeCode { tokens, . -> tokens });


##
## Exported Definitions
##

## Documented in spec.
export fn tokenize(programText) {
    return apply(tokFile, programText)
};
