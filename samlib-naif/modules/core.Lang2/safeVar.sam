## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#= language core.Lang1

import core.Format;
import core.Generator;
import core.LangNode :: *;


##
## Private Definitions
##

## Int value of Unicode code point `0`.
def CHAR_0 = cast(Int, "0");

## Parses and returns a base-10 unsigned int, or returns void if the string
## doesn't represent such a number.
fn intOrVoid(string) {
    var value = 0;

    $Generator::filterPump(string) { ch ->
        ifIs { perLt(ch, "0") } { return };
        ifIs { perGt(ch, "9") } { return };
        def digit = cast(Int, ch).sub(CHAR_0);
        value := value.mul(10).add(digit);
    };

    return value
};

## Returns the maximum of the given values. Returns `-1` if given no values,
## and never returns a value less than `-1`.
fn maxOf(values*) {
    var max = -1;

    $Generator::filterPump(values) { v ->
        ifIs { perGt(v, max) }
            { max := v }
    };

    return max
};

## Returns a safe index for the given `baseStr` that is safe with respect
## to all the other given `names`.
fn safeIndexForNames(baseStr, names*) {
    def baseSz = baseStr.get_size();

    def indexes = $Generator::filterAll(names) { name /next ->
        def nameStr = name.toString();
        ifIs { perLt(nameStr.get_size(), baseSz) }
            {
                ## Can't possibly be a prefix, so no conflict.
                yield /next
            };
        ifIs { eq(baseStr, nameStr) } { yield /next -1 };
        ifIs { eq(baseStr, nameStr.sliceExclusive(0, baseSz)) }
            { yield? /next intOrVoid(nameStr.sliceInclusive(baseSz)) }
    };

    return ifIs { eq(indexes, []) }
        { -1 }
        { maxOf(indexes*).add(1) }
};

## Maps / reduces `safeIndex` over the given nodes.
fn safeIndexForNodes(baseStr, nodes*) {
    def indexes = $Generator::filterAll(nodes)
        { node -> safeIndex(node, baseStr) };
    return maxOf(indexes*)
};

## Returns a safe (unused) index for the given `baseStr` variable name, with
## regard to the contents of `node`.
fn safeIndex(node, baseStr) {
    return ifSwitch(
        { node.get_name() },
        {
            @apply: { . ->
                safeIndexForNodes(baseStr, node::function, node::values);
            },

            @call: { . ->
                safeIndexForNodes(baseStr, node::function, node::values*);
            },

            @closure: { . ->
                def namesIndex =
                    safeIndexForNames(baseStr, node::name?*, node::yieldDef?*);
                def nodesIndex =
                    safeIndexForNodes(baseStr, node::statements*, node::yield);

                maxOf(namesIndex, nodesIndex)
            },

            @exportSelection: { . ->
                safeIndexForNames(baseStr, node::select*)
            },

            @fetch: { . ->
                safeIndexForNodes(baseStr, node::target)
            },

            @importModuleSelection: { . ->
                ## I don't think this can come up in practice (nor the other
                ## `import*` variants, really). So, just fail hard. Note: The
                ## only situation this can't actually be made to work is on
                ## wildcard imports (since when this is called, we don't
                ## necessarily know the full set of exports from a module).
                die("Cannot perform `safeIndex` on `importModuleSelection` node.")
            },

            @store: { . ->
                safeIndexForNodes(baseStr, node::target, node::value)
            },

            @literal:
            @void: { . ->
                -1
            },

            @varDef:
            @varDefMutable: { . ->
                def nameIndex = safeIndexForNames(baseStr, node::name);
                def valueIndex = safeIndexForNodes(baseStr, node::value?*);
                maxOf(nameIndex, valueIndex)
            },

            @export:
            @maybe:
            @noYield: { . ->
                safeIndexForNodes(baseStr, node::value)
            },

            @importModule:
            @importResource:
            @varRef: { . ->
                safeIndexForNames(baseStr, node::name);
            }
        })
};


##
## Exported Definitions
##

## Makes a variable name by combining `baseStr` with `index`. Handles the case
## where `index` is `-1` consistently with the other functions exported here.
export fn makeVarName(baseStr, index) {
    return ifIs { eq(index, -1) }
        { cast(Symbol, baseStr) }
        { cast(Symbol, baseStr.cat($Format::int(index))) }
};

## Returns an unused variable name within `node`, either the given `baseStr` or
## `baseStr` suffixed with an unsigned int.
export fn safeVarName(baseStr, node) {
    return makeVarName(baseStr, safeIndex(node, baseStr))
};

## Returns a safe index to be used within `node` to suffix the given `baseStr`
## variable name. Returns `-1` if `baseStr` itself is unused. Any index at or
## after the return value is safe to use.
export fn safeVarIndex(baseStr, node) {
    ## NB: This call has the opposite argument order to the exported function.
    return safeIndex(node, baseStr)
};
