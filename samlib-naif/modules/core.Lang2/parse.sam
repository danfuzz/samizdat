## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Samizdat Layer 2 Tree Parser
##

#= language core.Lang1

import core.Format;
import core.Generator;
import core.Lang0;
import core.Lang0Node :: *;
import core.Peg;
import core.Range;
import core.Sequence;
import proto.Number;

import ./safeVar;
import ./tokenize :: tokenize;


##
## Private Definitions
##

## Reports the given list of pending tokens as part of error processing.
fn reportError(pending) {
    note("Pending tokens:");

    $Generator::filterPump(pending, $Range::makeInclusiveRange(1, 50))
        { token, . -> note("    ", $Format::source(token)) };

    die("\nExtra tokens at end of program.")
};

## Set-like map of all lowercase identifier characters. Used to figure
## out if we're looking at a keyword in the `identifierString` rule.
def LOWER_ALPHA = {
    ($Range::makeInclusiveRange("a", "z"))*: true
};


##
## Layer 0 Rules
##
## This section consists of the definitions required to implement Layer 0,
## with comments indicating the "hooks" for higher layers. Subsections are
## used here to separate three related sets of rules (and hopefully make the
## grammar easier to follow).
##

## Forward declarations required for layer 2. These are all add-ons to
## layer 0 or 1 rules, used to expand the syntactic possibilities of the
## indicated base forms.
def parExpression2;
def parPostfixOperator2;
def parPrefixOperator2;
def parTerm2;

## Forward declaration required for integrating layer 1 definitions.
def parParser;

## Forward declarations.
def parAssignExpression;
def parRawClosure;

## Forward declaration for the "top" rule which parses operator expressions.
## This gets bound to `parUnaryExpression` in the Layer 0 and 1 grammars, but
## it's different in Layer 2.
def parOpExpression;

##
## Layer 0: Terms and expressions
##

## Parses an expression in general.
def parExpression = {:
    ## This one's the top level "regular-looking" expression (in that it
    ## covers the territory of C-style expressions).
    %parAssignExpression
|
    ## Note: Layer 2 adds additional rules here.
    %parExpression2
:};

## Parses a parenthesized expression. This produces a result identical to
## the inner `expression` node, except without an `interpolate` binding.
def parParenExpression = {:
    @"("
    ex = parExpression
    @")"

    { <> withoutInterpolate(ex) }
:};

## Parses a "name" of some sort. This is just an identifier, but with the
## result being the string payload (not wrapped in `@identifier(...)`).
def parName = {:
    nameIdent = @identifier
    { <> dataOf(nameIdent) }
:};

## Parses a non-empty comma-separated list of "names." A "name" is as per
## `parName` above. The result is a list of strings (per se).
def parNameList = {:
    first = parName
    rest = (@"," parName)*
    { <> [first, rest*] }
:};

## Parses a variable reference.
def parVarRef = {:
    name = parName
    { <> makeVarRefLvalue(name) }
:};

## Parses an integer literal. Note: This includes parsing a `-` prefix,
## so that simple negative constants aren't turned into complicated function
## calls.
def parInt = {:
    @"-"
    i = @int
    { <> makeLiteral($Number::neg(dataOf(i))) }
|
    i = @int
    { <> makeLiteral(dataOf(i)) }
:};

## Parses a string literal.
def parString = {:
    s = @string
    { <> makeLiteral(dataOf(s)) }
:};

## Parses an identifier, identifier-like keyword, or string literal,
## returning a string literal in all cases.
def parIdentifierString = {:
    parString
|
    name = parName
    { <> makeLiteral(name) }
|
    token = .
    {
        <> ifNot { <> dataOf(token) }
            {
                def type = get_typeName(token);
                def firstCh = nth(type, 0);
                <> ifIs { get(LOWER_ALPHA, firstCh) }
                    { <> makeLiteral(type) }
            }
    }
:};

## Parses a map key.
def parKey = {:
    key = parIdentifierString
    @":"
    { <> key }
|
    key = parExpression
    @":"
    { <> key }
:};

## Parses a mapping (element of a map).
def parMapping = {:
    keys = parKey*
    value = parExpression

    {
        <> ifIs { eq(keys, []) }
            { /out ->
                ## No keys were specified, so the value must be either a
                ## whole-map interpolation or a variable-name-to-its-value
                ## binding.
                ifValue { get_interpolate(value) }
                    { interp -> yield /out interp };
                ifIs { hasType(value, @@varRef) }
                    {
                        yield /out makeCall(REFS::makeValueMap,
                            makeLiteral(get_name(value)), value)
                    }
            }
            {
                ## One or more keys.
                <> makeCallOrApply(REFS::makeValueMap,
                    keys*, withoutInterpolate(value))
            }
    }
:};

## Parses a map literal.
def parMap = {:
    @"{"

    result = (
        one = parMapping
        rest = (@"," parMapping)*
        {
            <> ifIs { eq(rest, []) }
                { <> one }
                { <> makeCall(REFS::cat, one, rest*) }
        }
    |
        { <> makeLiteral({}) }
    )

    @"}"

    { <> result }
:};

## Parses a list item or function call argument. This handles all of:
##
## * accepting general expressions
## * rejecting expressions that look like `key:value` mappings. This is
##   effectively "reserved syntax" (for future expansion); rejecting this
##   here means that `x:y` won't be mistaken for other valid syntax.
def parListItem = {:
    parIdentifierString
    @":"
    { die("Mapping syntax not valid as a list item or call argument.") }
|
    parExpression
:};

## Parses an "unadorned" (no bracketing) list. Yields a list (per se)
## of contents.
def parUnadornedList = {:
    one = parListItem
    rest = (@"," parListItem)*
    { <> [one, rest*] }
|
    { <> [] }
:};

## Parses a list literal.
def parList = {:
    @"["
    expressions = parUnadornedList
    @"]"
    {
        <> ifIs { eq(expressions, []) }
            { <> makeLiteral([]) }
            { <> makeCallOrApply(REFS::makeList, expressions*) }
    }
:};

## Parses a type literal form, yielding an expression node that produces a
## type value. If the name is a blatant literal, then the result of this rule
## is also a literal. If not, the result of this rule is a call to
## `makeDerivedDataType`.
def parType = {:
    @"@@"
    name = (parIdentifierString | parParenExpression)

    {
        <> ifIs { hasType(name, @@literal) }
            { <> makeLiteral(@@(get_nodeValue(name))) }
            { <> makeCall(REFS::makeDerivedDataType, name) }
    }
:};

## Parses a literal in derived value form.
def parDeriv = {:
    @"@"

    type = (
        name = parIdentifierString
        { <> makeLiteral(@@(get_nodeValue(name))) }
    |
        parParenExpression
    )

    value = (parParenExpression | parMap | parList)?

    { <> makeCall(REFS::makeValue, type, value*) }
:};

## Parses a closure, resulting in one that *always* has a `yield` binding.
def parFullClosure = {:
    ## The lookahead to makes it so we don't have to do any heavier-weight
    ## parsing in easy-failure cases.
    &@"{"
    raw = %parRawClosure

    {
        def closure = makeFullClosure(raw);
        <> withoutTops(closure)
    }
:};

## Parses a closure, resulting in one that does *not* necessarily have
## a `yield` binding.
def parBasicClosure = {:
    &@"{"  ## Lookahead for same reason as above.
    raw = %parRawClosure

    {
        def closure = makeBasicClosure(raw);
        <> withoutTops(closure)
    }
:};

## Parses a closure which must not define any formal arguments. This is done
## by parsing an arbitrary closure and then verifying that it does not
## declare formals. This is preferable to not-including formal argument
## syntax, because (a) no rule wants to differentiate these cases (rules
## either want an arbitrary closure or a specifically-constrained kind); (b)
## it reduces redundancy in the syntax, and (c) the error case on the former
## would be more obscure (as in just something like "unexpected token" on
## the would-be formal argument).
def parNullaryClosure = {:
    c = parFullClosure

    {
        def formals = get_formals(c);
        ifIs { ne(formals, []) }
            { die("Invalid formal argument in code block.") };
        <> c
    }
:};

## Like, `parNullaryClosure` (above), except returning a basic (no
## required `yield`) closure node.
def parBasicNullaryClosure = {:
    c = parBasicClosure

    {
        def formals = get_formals(c);
        ifIs { ne(formals, []) }
            { die("Invalid formal argument in code block.") };
        <> c
    }
:};

## Parses a term (basic expression unit).
def parTerm = {:
    parVarRef | parInt | parString | parMap | parList |
    parDeriv | parType | parFullClosure | parParenExpression
|
    ## Defined by Samizdat Layer 1. The lookahead is just to make it clear
    ## that Layer 1 can only be "activated" with that one specific token.
    &@"{:" %parParser
|
    ## Defined by Samizdat Layer 2.
    &[@interpolatedString @"(" @"["] %parTerm2
:};

## Parses a list of "actual" (as opposed to formal) arguments to a function.
## Yields a list of expression nodes.
def parActualsList = {:
    @"("
    normalActuals = parUnadornedList
    @")"
    closureActuals = parFullClosure*
    { <> [closureActuals*, normalActuals*] }
|
    parFullClosure+
:};

## Parses a unary postfix operator. This yields a function (per se) to call
## in order to construct a node that represents the appropriate ultimate
## function call.
def parPostfixOperator = {:
    actuals = parActualsList
    { <> { node <> makeCallOrApply(node, actuals*) } }
|
    ## This is sorta-kinda a binary operator, but in terms of precedence it
    ## fits better here.
    @"::"
    key = parIdentifierString
    { <> { node <> makeGet(node, key) } }
|
    ## The lookahead failure here is to make the grammar prefer `*` to be
    ## treated as a binary op. (`*` is only defined as postfix in Layer 0,
    ## but higher layers augment its meaning.)
    @"*" !parExpression
    { <> { node <> makeInterpolate(node) } }
|
    @"?"
    { <> { node <> makeMaybeValue(node) } }
|
    ## Note: Layer 2 adds additional rules here.
    %parPostfixOperator2
:};

## Parses a unary expression. This is a term, optionally surrounded on
## either side by any number of unary operators. Postfix operators
## take precedence over (are applied before) the prefix operators.
def parUnaryExpression = {:
    ## The rule is written this way in order to ensure that the `-`
    ## in front of a numeric constant gets parsed as a term and not as
    ## a unary expression.
    basePrefixes = (
        base = parTerm
        { <> {base, prefixes: []} }
    |
        ## Note: Layer 2 adds prefix operator parsing here.
        prefixes = (%parPrefixOperator2)*
        base = parTerm
        ## Reverse the `prefixes` list, so that prefixes are applied
        ## in outward order from the base term.
        { <> {base, prefixes: $Sequence::reverse(prefixes)} }
    )

    postfixes = parPostfixOperator*

    {
        def prefixes = basePrefixes::prefixes;
        var result = basePrefixes::base;

        $Generator::filterPump(postfixes) { op -> result := op(result) };
        $Generator::filterPump(prefixes) { op -> result := op(result) };
        <> result
    }
:};

## Parses an assignment expression, or passes through to parse a regular
## `opExpression`. An lvalue is parsed here by first parsing an arbitrary
## `opExpression` and then extracting the `lvalue` constructor out of it.
## This fails (gracefully) if there is no `lvalue` to extract from a given
## expression.
parAssignExpression := {:
    base = %parOpExpression

    (
        @":="
        lvalue = { <> get_lvalue(base) }
        ex = parExpression
        { <> lvalue(ex) }
    |
        { <> base }
    )
:};

##
## Layer 0: Statements and yields
##

## Parses a yield or a nonlocal exit (named or implicit). All of the forms
## matched by this rule necessarily appear at the end of a block and are
## expected to be placed in a `yield` binding of a `closure` node. The
## nonlocal exit forms all end up being represented as a `noYield` node, so
## it's sorta funny that they hang off of `yield` (because they never actually
## yield, per se).
def parYieldOrNonlocal = {:
    op = [@break @continue @return @yield]
    optQuest = @"?"?

    name = (
        { <> hasType(op, @@yield) }
        (
            @"/"
            parVarRef
        |
            ## Indicate that this is a regular (local) yield. Checked below.
            { <> @yield }
        )
    |
        { <> makeVarRef(get_typeName(op)) }
    )

    ## A value expression is mandatory if there is a `?` after the
    ## operator. Otherwise, it's optional.
    value = (
        v = parExpression
        { <> ifIs { optQuest* } { <> makeMaybe(v) } { <> v } }
    |
        { <> ifNot { <> optQuest* } { <> @void } }
    )

    {
        <> ifIs { eq(name, @yield) }
            { <> value }
            { <> makeNonlocalExit(name, value) }
    }
:};

## Parses a local yield / return. TODO: Remove!
def parOldYield = {:
    @"<>"
    (
        ex = parExpression
        { <> makeMaybe(ex) }
    |
        { <> @void }
    )
:};

## Parses an immutable variable definition, or forward declaration of same.
def parVarDef = {:
    @def
    name = parName
    optExpr = (@"=" parExpression)?

    { <> makeVarDef(name, optExpr*) }
:};

## Parses a mutable variable definition, or forward declaration of same.
def parVarDefMutable = {:
    @var
    name = parName
    optExpr = (@"=" parExpression)?

    { <> makeVarDefMutable(name, optExpr*) }
:};

## Parses a yield / nonlocal exit definition, yielding the def name.
def parYieldDef = {:
    @"/"
    name = parName
    { <> name }
:};

## Parses an optional yield / nonlocal exit definition, always yielding
## a map (an empty map if no yield def was present).
def parOptYieldDef = {:
    y = parYieldDef
    { <> {yieldDef: y} }
|
    { <> {} }
:};

## Parses a formal argument decalaration.
def parFormal = {:
    name = (
        n = parName
        { <> {name: n} }
    |
        @"." { <> {} }
    )

    repeat = (
        r = [@"?" @"*" @"+"]
        { <> {repeat: get_typeName(r)} }
    |
        { <> {} }
    )

    { <> {name*, repeat*} }
:};

## Parses a list of formal arguments, with no surrounding parentheses.
def parFormalsList = {:
    one = parFormal
    rest = (@"," parFormal)*
    { <> [one, rest*] }
|
    { <> [] }
:};

## Parses program / function declarations.
def parClosureDeclarations = {:
    most = (
        name = (
            n = parName
            { <> {name: n} }
        |
            { <> {} }
        )
        @"("
        formals = parFormalsList
        @")"
        { <> {name*, formals}}
    |
        formals = parFormalsList
        { <> {formals} }
    )

    yieldDef = parOptYieldDef

    (@"->" | &@"<>")

    { <> {most*, yieldDef*} }
|
    { <> {formals: []} }
:};

## Parses the common part of function definition and generic function binding.
## The result of this rule is a `@closure` node, translated along these lines:
##
## ```
## name(arg1, arg2) { /out -> stat1; stat2 }
## ```
## =>
## ```
## { name(arg1, arg2) /\"return" ->
##     def out = \"return";
##     stat1;
##     stat2
## }
## ```
##
## except without a yield def binding statement if an explicit yield def was
## not present.
def parFunctionCommon = {:
    name = parName
    @"("
    formals = parFormalsList
    @")"
    code = parBasicNullaryClosure

    {
        def returnDef = ifValue { code::yieldDef }
            { yieldDef ->
                ## The closure has a yield def, but we need to also bind
                ## it as `return`, so we add an extra local variable binding
                ## here.
                <> [makeVarDef(yieldDef, REFS::return)]
            }
            { <> [] };

        <> makeFullClosure({
            dataOf(code)*,
            formals,
            name,
            yieldDef: "return",
            statements: [returnDef*, get_statements(code)*]
        })
    }
:};

## Parses a `fn` definition statement. This wraps a `@closure` result of
## `parFunctionCommon` in a top-declaring `@varDef`.
def parFunctionDef = {:
    @fn
    closure = parFunctionCommon

    { <> withTop(makeVarDef(get_name(closure), closure)) }
:};


## Parses a generic function binding. This wraps a `@closure` result of
## `parFunctionCommon` in a `@call`. The closure also gets a new `this`
## formal argument.
def parGenericBind = {:
    @fn
    bind = (parVarRef | parType)
    @"."
    closure = parFunctionCommon

    {
        def formals = get_formals(closure);
        def name = get_name(closure);
        def fullClosure = withFormals(closure, [{name: "this"}, formals*]);
        <> makeCall(REFS::genericBind, makeVarRef(name), bind, fullClosure)
    }
:};

## Parses a generic function definition. The translation is along these lines:
##
## ```
## fn .name(arg1, arg2);
## ```
## =>
## ```
## def name;  ## At top of closure
## ...
## name := makeRegularGeneric("name", 2, 2);
## ```
##
## with different numbers depending on the shape of the arguments, and with
## the function `makeUnitypeGeneric` if a `*` precedes the `.name`.
def parGenericDef = {:
    @fn
    optStar = @"*"?
    @"."
    name = parName
    @"("
    formals = parFormalsList
    @")"

    {
        def fullFormals = [{}, formals*]; ## First one is `this`.
        def func = ifIs { eq(optStar, []) }
            { <> REFS::makeRegularGeneric }
            { <> REFS::makeUnitypeGeneric };
        def call = makeCall(
            func,
            makeLiteral(name),
            makeLiteral(formalsMinArgs(fullFormals)),
            makeLiteral(formalsMaxArgs(fullFormals)));

        <> withTop(makeVarDef(name, call))
    }
:};

## Parses an optional binding name or name prefix for an `import` statement.
## This rule never fails. The result is always a map, empty if there was no
## name / prefix, or binding one of `name` or `prefix`.
def parImportName = {:
    name = parName

    key = (
        @"*" { <> "prefix" }
    |
        { <> "name" }
    )

    @"="
    { <> {(key): name} }
|
    { <> {} }
:};

## Parses an optional format name for an `import` statement. This rule never
## fails. The result is always a map, empty if there was no format name, or
## binding `format`.
def parImportFormat = {:
    @"@"
    f = parIdentifierString
    { <> {format: get_nodeValue(f)} }
|
    { <> {} }
:};

## Parses the source for an `import` statement. The result is either a name
## string as the payload of either an `@internal` or `@external` value.
def parImportSource = {:
    @"."
    @"/"

    first = parName
    rest = (
        @"/"
        n = parName
        { <> cat("/", n) }
    )*
    optSuffix = (
        @"."
        n = parName
        { <> cat(".", n) }
    )?

    {
        def name = cat(first, rest*, optSuffix*);
        <> @internal(name)
    }
|
    first = parName
    rest = (
        @"."
        n = parName
        { <> cat(".", n) }
    )*

    {
        def name = cat(first, rest*);
        <> @external(name)
    }
:};

## Parses a list of binding names for an `import` statement. The result is
## a list of strings, or `@"*"` to indicate a wildcard of all names.
def parImportSelect = {:
    @"::"
    (
        @"*"
        { <> {select: @"*"} }
    |
        select = parNameList
        { <> {select} }
    )
|
    { <> {} }
:};

## Parses an `import` statement. This works by first parsing a very general
## version of the syntax which allows invalid combinations, and then checking
## in code that the actual combination is valid.
def parImportStatement = {:
    optExport = @export?
    @import
    nameOrPrefix = parImportName
    format = parImportFormat
    source = parImportSource
    select = parImportSelect

    {
        def data = {nameOrPrefix*, format*, select*, source};
        <> ifIs { optExport* }
            { <> makeExport(makeImport(data)) }
            { <> makeImport(data) }
    }
:};

## Parses an executable statement form that is `export`able. This does *not*
## include `import` statements.
def parExportableStatement = {:
    parFunctionDef | parGenericDef | parVarDef
:};

## Parses an executable statement form (direct closure / program element).
## This includes all the `export`able statements and a few additional forms.
def parStatement = {:
    parExportableStatement | parGenericBind | parVarDefMutable | parExpression
:};

## Parses a program body statement form, including both regular executable
## statements and `export` statements (but not `import` statements).
def parProgramStatement = {:
    parStatement
|
    @export
    (
        select = parNameList
        { <> makeExportSelection(select*) }
    |
        stat = parExportableStatement
        { <> makeExport(stat) }
    )
:};

##
## Layer 0: Closures and programs
##

## Parses a closure body (statements plus optional yield).
def parClosureBody = {:
    @";"*

    most = (
        s = parStatement
        @";"+
        { <> s }
    )*

    last = (
        s = parStatement
        { <> {statements: [s]} }
    |
        y = (parYieldOrNonlocal | parOldYield)
        { <> {statements: [], yield: y} }
    |
        { <> {statements: []} }
    )

    @";"*

    { <> {last*, statements: [most*, last::statements*]} }
:};

## Parses a closure (in-line anonymous function, with no extra bindings).
## This results in a simple map of bindings.
parRawClosure := {:
    @"{"
    decls = parClosureDeclarations
    body = parClosureBody
    @"}"
    { <> {decls*, body*} }
:};

## Parses a program (list of statements, including imports and exports).
def parProgram = {:
    imports = (
        @";"*
        first = parImportStatement
        rest = (@";"+ parImportStatement)*
        { <> [first, rest*] }
    |
        { <> [] }
    )

    body = (
        (
            ## There was at least one import, so there needs to be at least
            ## one semicolon between the final import and first statement.
            { <> ne(imports, []) }
            @";"+
        |
            @";"*
        )

        first = parProgramStatement
        rest = (@";"+ parProgramStatement)*
        { <> [first, rest*] }
    |
        { <> [] }
    )

    @";"*

    {
        def closure = makeFullClosure({
            statements: [imports*, body*],
            yield:      @void
        });
        <> withoutTops(closure)
    }
:};

##
## Layer 0: Entry points
##

## Top-level rule to parse an expression with possible error afterwards.
def parExpressionOrError = {:
    ex = parExpression
    (
        pending = .+
        { reportError(pending) }
    )?
    { <> ex }
:};

## Top-level rule to parse a program with possible error afterwards.
## Note that an empty string is a valid program.
def parProgramOrError = {:
    prog = parProgram
    (
        pending = .+
        { reportError(pending) }
    )?
    { <> prog }
:};


##
## Layer 1 Rules
##
## This section consists of the definitions required to implement Layer 1,
## above and beyond the preceding section.
##
## **Note:** The grammar uses the label "pex" to denote various
## "Parser EXpression" types.
##

## Forward declaration.
def parChoicePex;

## Map from parser token types to derived value types for pexes.
def PEX_TYPES = {
    @@"&": @@lookaheadSuccess,
    @@"!": @@lookaheadFailure,
    @@"?": @@opt,
    @@"*": @@star,
    @@"+": @@plus
};

## Parses a parser function.
parParser := {:
    @"{:"
    pex = %parChoicePex
    @":}"
    { <> @parser{value: pex} }
:};

## Parses a parenthesized parsing expression.
def parParenPex = {:
    @"("
    pex = %parChoicePex
    @")"
    { <> pex }
:};

## Parses a string literal parsing expression.
def parParserString = {:
    @string
:};

## Parses a token literal parsing expression.
def parParserToken = {:
    @"@"
    type = parIdentifierString
    { <> @token(@@(get_nodeValue(type))) }
:};

## Parses a string or character range parsing expression, used when defining
## sets. Yields a string per se (not a token).
def parParserSetString = {:
    s = @string

    (
        @".."
        end = @string

        { /out ->
            def startChar = dataOf(s);
            def endChar = dataOf(end);

            ## Reject non-single-character strings.
            ifIs { ne(1, get_size(startChar)) } { yield /out };
            ifIs { ne(1, get_size(endChar)) } { yield /out };

            <> cat($Range::makeInclusiveRange(startChar, endChar)*)
        }
    |
        { <> dataOf(s) }
    )
:};

## Parses a set (or set complement) parsing expression.
def parParserSet = {:
    @"["

    type = (
        @"!" { <> @@tokenSetComplement }
    |
        { <> @@tokenSet }
    )

    terminals = (
        strings = parParserSetString+
        { <> collect(cat(strings*), { ch <> @@(ch) }) }
    |
        tokens = parParserToken+
        { <> collect(tokens, dataOf) }
    |
        { <> [] }
    )

    @"]"

    { <> @(type)(terminals) }
:};

## Parses a code block parsing expression.
def parParserCode = {:
    closure = parNullaryClosure
    { <> @code(dataOf(closure)) }
:};

## Parses a thunk parsing expression.
def parParserThunk = {:
    @"%"
    term = parTerm
    { <> @thunk(term) }
:};

## Parses a parsing expression term.
def parParserTerm = {:
    @"."
    { <> @any }
|
    @"("
    @")"
    { <> @empty }
|
    parVarRef | parParserString | parParserToken | parParserSet |
    parParserCode | parParserThunk | parParenPex
:};

## Parses a repeat (or not) parsing expression.
def parRepeatPex = {:
    term = parParserTerm
    (
        repeat = [@"?" @"*" @"+"]
        { <> @(get(PEX_TYPES, get_type(repeat)))(term) }
    |
        { <> term }
    )
:};

## Parses a lookahead (or not) parsing expression. This covers both lookahead
## success and lookahead failure.
def parLookaheadPex = {:
    (
        lookahead = [@"&" @"!"]
        pex = parRepeatPex
        { <> @(get(PEX_TYPES, get_type(lookahead)))(pex) }
    )
|
    parRepeatPex
:};

## Parses a name (or not) parsing expression.
def parNamePex = {:
    (
        name = parName
        @"="
        pex = parLookaheadPex
        { <> @varDef{name, value: pex} }
    )
|
    parLookaheadPex
:};

## Parses a sequence parsing expression. This includes sequences of length
## one, but it does *not* parse empty (zero-length) sequences.
def parSequencePex = {:
    items = parNamePex+
    { <> @sequence(items) }
:};

## Parses a choice parsing expression. This includes a single choice.
parChoicePex := {:
    one = parSequencePex
    rest = (@"|" parSequencePex)*
    { <> @choice[one, rest*] }
:};


##
## Layer 2 Definitions and Rules
##

## For unary operators, map of token types to function name variable
## references.
def UNARY_OPERATORS = {
    @@"-":   REFS::Number_neg,
    @@"#":   REFS::get_size,
    @@"^":   REFS::Sequence_reverse,
    @@"!!!": REFS::Bitwise_not
};

## For binary operators, map of token types to function name variable
## references.
def BINARY_OPERATORS = {
    @@"+":    REFS::Number_add,
    @@"-":    REFS::Number_sub,
    @@"*":    REFS::Number_mul,
    @@"/":    REFS::Number_div,
    @@"%":    REFS::Number_mod,
    @@"//":   REFS::Number_divEu,
    @@"%%":   REFS::Number_modEu,
    @@"==":   REFS::perEq,
    @@"!=":   REFS::perNe,
    @@"<":    REFS::perLt,
    @@">":    REFS::perGt,
    @@"<=":   REFS::perLe,
    @@">=":   REFS::perGe,
    @@"&&&":  REFS::Bitwise_and,
    @@"|||":  REFS::Bitwise_or,
    @@"^^^":  REFS::Bitwise_xor,
    @@"<<<":  REFS::Bitwise_shl,
    @@">>>":  REFS::Bitwise_shr,
    @@"\\==": REFS::eq,
    @@"\\!=": REFS::ne,
    @@"\\<":  REFS::lt,
    @@"\\>":  REFS::gt,
    @@"\\<=": REFS::le,
    @@"\\>=": REFS::ge
};

## Helper for parsing binary operator expressions, which puts together
## a sequence of function calls.
fn makeBinaryCalls(firstEx, opExList) {
    var result = firstEx;

    $Generator::filterPump(opExList) { opEx ->
        def resolvedOp = get(BINARY_OPERATORS, get_type(opEx::op));
        result := makeCall(resolvedOp, result, opEx::expr)
    };

    <> result
};

## Helper for parsing binary comparison operator expressions, which puts
## together a sequence of function calls. When given no operators or just one
## operator, this is the same as calling `makeBinaryCalls` (which is in fact
## called to do the work). For more operators, the transformation is a bit
## less straightforward, so as to enable the specified chained comparison
## behavior. This is done by turning the entire expression into a thunk-call
## of a nested `ifIs ...` calls, with local variable bindings for every term
## to be tested other than the final one. For example:
##
## ```
## x < y <= z == q
## ```
## =>
## ```
## {
##     def v1 = x;
##     def v2 = y;
##     <> ifIs { lt(v1, v2) }
##         {
##             def v3 = z;
##             <> ifIs { le(v2, v3) }
##                 { <> eq(v3, q) }
##         }
## }()
## ```
fn makeCompareCalls(firstEx, opExList) {
    ## Use `makeBinaryCalls` to do the initial processing. This result is
    ## what's used directly in the simple cases. In other cases, this just
    ## provides a convenient unified expression node to scrutinize for safe
    ## variable name generation.
    def baseResult = makeBinaryCalls(firstEx, opExList);

    ifIs { le(get_size(opExList), 1) }
        {
            ## Trivial case of zero or one operator. Just use the result of
            ## the call to `makeBinaryCalls`.
            return baseResult
        };

    ## Nontrivial case. We recursively transform all the `opEx` pairs into
    ## nested closures. We then tweak the outermost closure to have a
    ## declaration for a variable binding the first expression, and make the
    ## final result be a no-argument call of that closure.

    var varIndex = $safeVar::safeVarIndex("compareValue", baseResult);
    fn nextName() {
        def result = $safeVar::makeVarName("compareValue", varIndex);
        varIndex := $Number::add(varIndex, 1);
        <> result
    };

    fn transform(leftRef, opEx, rest*) {
        def resolvedOp = get(BINARY_OPERATORS, get_type(opEx::op));

        <> ifIs { eq(rest, []) }
            { <> makeThunk(makeCall(resolvedOp, leftRef, opEx::expr)) }
            {
                def rightName = nextName();
                def rightRef = makeVarRef(rightName);
                <> makeFullClosure({
                    statements: [makeVarDef(rightName, opEx::expr)],
                    yield: makeMaybe(
                        makeCall(REFS::ifIs,
                            makeThunk(makeCall(resolvedOp, leftRef, rightRef)),
                            transform(rightRef, rest*)))
                })
            }
    };

    def firstName = nextName();
    def closure = transform(makeVarRef(firstName), opExList*);

    <> makeCall(
        makeFullClosure({
            statements: [
                makeVarDef(firstName, firstEx),
                closure::statements*
            ],
            yield: closure::yield
        }))
};

## Helper for string interpolation: Parses the two kinds of interpolation,
## yielding an appropriate expression node if syntactically valid, including
## verification that all input was consumed.
def parStringInterpolation = {:
    &[@"(" @"["]
    ex = parTerm
    !.
    { <> ex }
|
    &@"{"
    block = parNullaryClosure
    !.
    { <> makeCall(block) }
:};

## Parses an interpolated string. The payload of an interpolated string
## token is a list with elements being either simple strings or lists of
## tokens. The token lists are delimited either with parentheses or braces.
## Parenthesized lists are taken to be expressions to be evaluated. Braced
## lists are taken to be thunks to be evaluated-and-called. The translation
## is along these lines:
##
## ```
## @interpolatedString{
##     "string",
##     {format: "formatStr", tokens: [@"(", exprToken, ..., @")"]},
##     {format: "formatStr", tokens: [@"{", blockToken, ..., @"}"]}
## }
## ```
## =>
## ```
## cat("string", fmt1((expr...)?*), fmt2({ block... }()?*))
## ```
##
## where `fmt*` is either a reference to `$Format::usual` (if no format
## specifier is given) or a call to `$Format::formatterFor` (if a
## specifier *is* given).
def parInterpolatedString = {:
    token = @interpolatedString

    {
        ## Convert each of the payload items into the proper form.
        ## This includes recursive parser calls to convert list forms
        ## into appropriate node types.
        def elems = $Generator::filterAll(dataOf(token)) { elem ->
            <> ifIs { hasType(elem, String) }
                { <> makeLiteral(elem) }
                {
                    def tokens = elem::tokens;

                    def formatter = ifValue { elem::format }
                        { format ->
                            <> makeCall(REFS::Format_formatterFor,
                                makeLiteral(format))
                        }
                        { <> REFS::Format_usual };

                    def call = ifValueOr
                        { <> $Peg::apply(parStringInterpolation, tokens) }
                        { die("Invalid syntax in string interpolation.") };

                    <> makeCallOrApply(formatter,
                        makeInterpolate(makeMaybeValue(call)))
                }
        };

        <> makeCall(REFS::cat, elems*)
    }
:};

## Parses a single generator definition, for use in comprehensions and
## `for` loops. This yields a map of the form `{init: ..., formal: ...}`,
## with `init` bound to an initializer expression and `formal` bound to
## a formal argument declaration.
def parGeneratorDef = {:
    formal = (
        name = parName
        { <> {name} }
    |
        "."
        { <> {} }
    )

    @in
    init = parExpression

    { <> {formal, init} }
|
    @for
    size = parExpression

    {
        def init = makeCall(REFS::Generator_makeRepeatGenerator, size);
        <> {formal: {}, init}
    }
:};

## Parses a comma-separated list of generator definitions, for use in
## comprehensions and `for` loops. This yields a map of the form
## `{formals: ..., inits: ...}`, with `formals` bound to a formal
## argument declaration corresponding to the names given to each of the
## generators, and `inits` bound to a list of generator initializer
## expressions.
def parGeneratorList = {:
    one = parGeneratorDef
    rest = ("," parGeneratorDef)*

    {
        def gens = [one, rest*];
        def formals = $Generator::filterAll(gens) { gen <> gen::formal };
        def inits = $Generator::filterAll(gens) { gen <> gen::init };

        <> {formals, inits}
    }
:};

## Helper for `parComprehensionExpression`, which parses the body of a
## comprehension, yielding appropriate arguments for a call to either
## `makeFilterGenerator` or `filterAll`.
def parComprehensionBody = {:
    genList = parGeneratorList
    (@"->" | &@"<>")
    filterBody = parClosureBody

    {
        def genFormals = genList::formals;
        def genInits = genList::inits;

        <> [makeFullClosure({filterBody*, formals: genFormals}), genInits*]
    }
:};

## Parses a comprehension expression, which can result in either a
## list or a generator, depending on choice of delimiter.
##
## The translation is along the lines of:
##
## ```
## (name1 in expr1, name2 in expr2 -> filterBody)
## ```
## =>
## ```
## $Generator::makeFilterGenerator(expr1, expr2)
##     { name1, name2 -> filterBody }
## ```
##
## ```
## [name1 in expr1, name2 in expr2 -> filterBody]
## ```
## =>
## ```
## $Generator::filterAll(expr1, expr2)
##     { name1, name2 -> filterBody }
## ```
def parComprehensionExpression = {:
    @"("
    body = parComprehensionBody
    @")"

    { <> makeCall(REFS::Generator_makeFilterGenerator, body*) }
|
    @"["
    body = parComprehensionBody
    @"]"

    { <> makeCall(REFS::Generator_filterAll, body*) }
:};

## Helper for `parRangeExpression`, which parses the body of a
## range, always yielding a generator.
def parRangeBody = {:
    firstValue = parExpression
    op = [@".." @"..!"]

    optLimit = (
        limit = parExpression
        { <> [limit] }
    |
        ## The limit is mandatory for exclusive ranges.
        {
            <> ifIs { eq(op, @"..") }
                { <> [] }
        }
    )

    optIncrement = (@by parExpression)?

    {
        <> ifIs { eq(op, @"..!") }
            {
                <> makeCall(
                    REFS::Range_makeExclusiveRange,
                    firstValue, optLimit*, optIncrement*)
            }
            {
                <> ifValue { optLimit* }
                    { limit ->
                        <> makeCall(
                            REFS::Range_makeInclusiveRange,
                            firstValue, limit, optIncrement*)
                    }
                    {
                        <> makeCall(
                            REFS::Range_makeOpenRange,
                            firstValue, optIncrement*)
                    }
            }
    }
:};

## Parses a range expression, including both generator and list forms.
def parRangeExpression = {:
    @"("
    body = parRangeBody
    @")"

    { <> body }
|
    @"["
    body = parRangeBody
    @"]"

    ## The test here is to prevent open ranges from being allowed.
    { <> ne(get_function(body), REFS::Range_makeOpenRange) }
    { <> makeCallOrApply(REFS::makeList, makeInterpolate(body)) }
:};

## Parses the `term` variants introduced in Layer 2.
parTerm2 := {:
    parInterpolatedString
|
    parComprehensionExpression
|
    parRangeExpression
:};

## Parses a unary prefix operator. This yields a function (per se) that
## takes a node and yields a call to the appropriate operator function.
parPrefixOperator2 := {:
    operator = [@"-" @"#" @"^" @"!!!"]
    {
        def name = get(UNARY_OPERATORS, get_type(operator));
        <> { node <> makeCall(name, node) }
    }
|
    ## This one is specially converted, since it's a control construct,
    ## not just a simple function application.
    @"!"
    { <> { node <> makeCallThunks(REFS::ifNot, node, makeLiteral(true)) } }
:};

## Parses an index expression (inside a collection indexing postfix form).
def parIndexExpression = {:
    @"^"
    expr = parUnaryExpression
    { <> @fromEnd(expr) }
|
    expr = parExpression
    { <> @fromStart(expr) }
:};

## Parses an indexing postfix.
def parIndexPostfix = {:
    optStart = parIndexExpression?
    optOp = [@".." @"..!"]?
    end = (
        { <> optOp* } ## End can only be parsed if there was a slice op.
        parIndexExpression
    |
        { <> @endIndex }
    )

    (
        ## It's a slice expression of some sort.
        op = { <> optOp* }
        start = ({ <> optStart* } | { <> @fromStart(makeLiteral(0)) })

        (
            ## It's a non-size-dependant slice.
            !{ <> hasType(start, @@fromEnd) }
            !{ <> hasType(end, @@fromEnd) }

            {
                def funcRef = ifIs { eq(op, @"..") }
                    { <> REFS::Sequence_sliceInclusive }
                    { <> REFS::Sequence_sliceExclusive };

                <> { node ->
                    <> makeCall(funcRef,
                        node, dataOf(start), dataOf(end)?*)
                }
            }
        |
            ## At least one of start or end is `fromEnd`, so we have to
            ## use an intermediate function call.
            {
                def style = ifIs { eq(op, @"..") }
                    { <> makeLiteral(@inclusive) }
                    { <> makeLiteral(@exclusive) };

                def startNode =
                    makeCall(REFS::makeValue,
                        makeLiteral(get_type(start)),
                        dataOf(start));

                def optEndNode = (ifValue { dataOf(end) }
                    { endData ->
                        <> makeCall(REFS::makeValue,
                            makeLiteral(get_type(end)),
                            endData)
                    })?;

                <> { node ->
                    <> makeCall(REFS::Sequence_sliceGeneral,
                        node,
                        style,
                        startNode,
                        optEndNode*)
                }
            }
        )
    |
        ## The following assignment means that `optStart` must be non-empty
        ## at this point. The lack of subsequent alternates means that `foo[]`
        ## per se (that is, empty content inside the brackets) won't pass as
        ## syntactically valid.
        index = { <> optStart* }

        {
            def funcRef = ifIs { hasType(index, @@fromStart) }
                { <> REFS::get }
                { <> REFS::Sequence_nthFromEnd };

            <> { node <> makeCall(funcRef, node, dataOf(index)) }
        }
    )
:};

## Layer 2 additions to unary postfix operator parsing. This yields a
## function (per se) to call in order to construct a node that represents the
## appropriate operator application, function call, or the like.
parPostfixOperator2 := {:
    @"**"
    { <> { node <> makeCall(REFS::ne, node, makeLiteral(false)) } }
|
    @"??"
    {
        <> { node ->
            <> makeCallThunks(REFS::ifIs,
                node, makeLiteral(true), makeLiteral(false))
        }
    }
|
    @"["
    result = parIndexPostfix
    @"]"
    { <> result }
|
    ## This translates as something like the following:
    ##
    ## ```
    ## target.ident(arg, ...)
    ## =>
    ## ident(target, arg, ...)
    ## ```
    ##
    ## ```
    ## target.ident
    ## =>
    ## get_ident(target)
    ## ```
    ##
    ## ```
    ## target.ident := expression
    ## =>
    ## set_ident(target, expression)
    ## ```
    ##
    ## The setter variant works via an `lvalue` binding added to a parsed
    ## getter expression.
    ##
    @"."
    name = parName

    (
        ## `target.memberName(arg, ...)`
        actuals = parActualsList
        {
            def funcRef = makeVarRef(name);
            <> { node <> makeCallOrApply(funcRef, node, actuals*) }
        }
    |
        ## `target.memberName` (includes parsing of both getters and setters)
        {
            def getterRef = makeVarRef(cat("get_", name));
            <> { node ->
                def getterCall = makeCall(getterRef, node);
                <> @(get_type(getterCall)){
                    dataOf(getterCall)*,
                    lvalue: { expr ->
                        def setterRef = makeVarRef(cat("set_", name));
                        <> makeCall(setterRef, node, expr)
                    }
                }
            }
        }
    )
:};

## Parses a multiplicative expression.
def parMulExpression = {:
    firstEx = parUnaryExpression
    opExes = (
        op = [@"*" @"/" @"%" @"//" @"%%" @"<<<" @">>>"]
        expr = parUnaryExpression
        { <> {op, expr} }
    )*

    { <> makeBinaryCalls(firstEx, opExes) }
:};

## Parses an additive expression.
def parAddExpression = {:
    firstEx = parMulExpression
    opExes = (
        op = [@"+" @"-" @"&&&" @"|||" @"^^^"]
        expr = parMulExpression
        { <> {op, expr} }
    )*

    { <> makeBinaryCalls(firstEx, opExes) }
:};

## Parses a comparison expression. The syntax here is the mathematical
## style of `x < y < z` meaning `(x < y) & (y < z)`. This semantics
## falls naturally out of the left-associativity of the expression
## along with the value-or-void logic model, as defined by the language.
def parCompareExpression = {:
    firstEx = parAddExpression
    opExes = (
        op = [
            @"=="   @"!="   @"<"   @">"   @"<="   @">="
            @"\\==" @"\\!=" @"\\<" @"\\>" @"\\<=" @"\\>="
        ]
        expr = parAddExpression
        { <> {op, expr} }
    )*

    { <> makeCompareCalls(firstEx, opExes) }
:};

## Parses a single test clause with optional assignment, yielding a map of
## the form `{formal: ..., test: ...}`, with `formal` bound to a formal
## argument declaration and `test` bound to the test expression. If no formal
## was parsed, `formal` is bound to `{}`.
def parTestClause = {:
    formal = (
        @def
        name = parName
        @"="
        { <> {name} }
    |
        { <> {} }
    )

    test = parExpression

    { <> {formal, test} }
:};

## Parses a single parenthesized test clause.
def parParenTestClause = {:
    @"("
    result = parTestClause
    @")"

    { <> result }
:};

## Parses a list of one or more comma-separated parenthesized test clauses.
def parParenTestClauseList = {:
    @"("
    first = parTestClause
    rest = (@"," parTestClause)*
    @")"

    { <> [first, rest*] }
:};

## Parses a clause in a logical-and expression. This is just like
## `parParenTestClause` above, except that it also allows for unparenthesized
## `compareExpression`s.
def parLogicAndClause = {:
    parParenTestClause
|
    test = parCompareExpression
    { <> {formal: {}, test} }
:};

## Parses a short-circuit logical-and expression. The translation is along
## the lines of:
##
## ```
## expr1 & expr2
## =>
## ifIs { expr1 } { <> expr2 }
## ```
##
## ```
## (def var1 = expr1) & expr2
## =>
## ifValue { expr1 } { var1 <> expr2 }
## ```
##
## ```
## (def var1 = expr1) & expr2 & (def var3 = expr3) & expr4
## =>
## ifValues(
##     makeList(
##         { <> expr1 },
##         { var1 <> expr2 },
##         { var1, . <> expr3 }),
##     { var1, ., var3 <> expr4 }
## ```
##
## That is, a single `ifIs` or `ifValue` call if there's only one `&`, or an
## `ifValues` call if there is a chain of three or more clauses.
def parLogicAndExpression = {:
    ## This is done with the `*` on the list head (that is, most-then-last
    ## instead of the more usual arrangement of first-then-rest), since the
    ## last clause is special in that it can't be an assignment.
    most = (
        clause = parLogicAndClause
        @"&"
        { <> clause }
    )*
    last = parCompareExpression

    (
        ## Not actually an `&` expression.
        { <> eq(most, []) }
        { <> last }
    |
        ## Non-compound `&` expression.
        { <> eq(get_size(most), 1) }
        {
            def clause = most*;
            def formal = clause::formal;
            def testThunk = makeThunk(clause::test);
            def resultThunk = makeThunk(last);

            <> ifIs { eq(formal, {}) }
                { <> makeCall(REFS::ifIs, testThunk, resultThunk) }
                {
                    <> makeCall(REFS::ifValue,
                        testThunk,
                        withFormals(resultThunk, [formal]))
                }
        }
    |
        ## Compound `&` expression (three or more clauses).
        {
            ## Make a version of the test clauses, as thunks with formals
            ## lists.
            def formals =
                $Generator::filterAll(most) { clause <> clause::formal };
            def testThunks =
                $Generator::filterAll(most, $Range::makeOpenRange(0))
                    { clause, index ->
                        def test = clause::test;
                        <> withFormals(makeThunk(test),
                            $Sequence::sliceExclusive(formals, 0, index))
                    };

            ## Construct the overall `ifValues` call.
            <> makeCall(REFS::ifValues,
                makeCall(REFS::makeList, testThunks*),
                withFormals(makeThunk(last), formals))
        }
    )
:};

## Parses a short-circuit logical-or expression. The translation is along
## the lines of:
##
## ```
## expr1 | expr2 | expr3
## ```
## =>
## ```
## ifValueOr { expr1 } { <> expr2 } { <> expr3 }
## ```
def parLogicOrExpression = {:
    one = parLogicAndExpression

    (
        rest = (@"|" parLogicAndExpression)+
        { <> makeCallThunks(REFS::ifValueOr, one, rest*) }
    |
        ## It's not actually a logical-or expression.
        { <> one }
    )
:};

## Helper for `if` and `while` parsing: Takes a parenthesized list of test
## clauses and yields a function that takes the `then` node and optional
## `else` node, returning the final `if*` call. The three cases are along
## the lines of:
##
## ```
## (nonBoundExpr)
## =>
## ifIs { nonBoundExpr }
##     { ... then ... }
##     { ... else ... }
## ```
##
## ```
## (def name = boundExpr)
## =>
## ifValue { boundExpr }
##     { name -> ... then ... }
##     { ... else ... }
## ```
##
## ```
## (def name1 = expr1, unboundExpr, def name3 = expr3)
## =>
## ifValues(
##     makeList(
##         { <> expr1 },
##         { name1 <> unboundExpr },
##         { name1, . <> expr3 }),
##     { name1, ., name3 -> ... then ... }
##     { ... else ... })
## ```
def parMultiTest = {:
    clauses = parParenTestClauseList

    (
        ## Single test. Will translate as either `ifValue` or `ifIs`.
        { <> eq(get_size(clauses), 1) }
        {
            def clause = clauses*;
            def formal = clause::formal;
            def testThunk = makeThunk(clause::test);
            <> { thenThunk, elseThunk? ->
                <> ifIs { eq(formal, {}) }
                    {
                        <> makeCall(REFS::ifIs,
                            testThunk, thenThunk, elseThunk*)
                    }
                    {
                        <> makeCall(REFS::ifValue,
                            testThunk,
                            withFormals(thenThunk, [formal]),
                            elseThunk*)
                    }
            }
        }
    |
        ## General case.
        {
            ## Make a version of the test clauses, as thunks with formals
            ## lists.
            def formals =
                $Generator::filterAll(clauses) { clause <> clause::formal };
            def testThunks =
                $Generator::filterAll(clauses, $Range::makeOpenRange(0))
                    { clause, index ->
                        def test = clause::test;
                        <> withFormals(makeThunk(test),
                            $Sequence::sliceExclusive(formals, 0, index))
                    };

            ## Result function which constructs the overall `ifValues` call.
            <> { thenThunk, elseThunk? ->
                <> makeCall(REFS::ifValues,
                    makeCall(REFS::makeList, testThunks*),
                    withFormals(thenThunk, formals),
                    elseThunk*)
            }
        }
    )
:};

## Parses an if expression. The translation is along the lines of:
##
## ```
## if /out (def name1 = expr1) {
##     thenStat1
## } else if (expr2) {
##     thenStat2
## } else if (def name3 = expr3, def name4 = expr4) {
##     thenStat34
## } else {
##     elseStat
## }
## ```
## =>
## ```
## { /out ->
##     <> ifValue { expr1 }
##         { name1 -> thenStat1 }
##         {
##             <> ifIs { expr2 }
##                 { name2 -> thenStat2 }
##                 {
##                     <> ifValues(
##                         makeList(
##                             { <> expr3 },
##                             { name3 <> expr4 }),
##                         { name3, name4 -> thenStat34 },
##                         { elseStat })
##                 }
##         }
## }()
## ```
##
## with:
## * the outer thunk-call omitted if there was no yield definition.
## * omitting the final `elseStat` if there was no `else` clause.
## * `ifIs` instead of `ifValue` and no then-clause argument declaration for
##   any clause where no name binding was present.
## * `ifValues` instead of `ifValue` (with incremental formals binding) for
##   any clause that uses multiple tests.
## * arbitrary nesting of additional clauses.
def parIfExpression = {:
    @if
    yieldDef = parOptYieldDef
    firstCondition = parMultiTest
    firstThen = parNullaryClosure

    elseIfThens = (
        @else
        @if
        condition = parMultiTest
        then = parNullaryClosure
        { <> {maker: condition, then} }
    )*

    optElse = (@else parNullaryClosure)?

    {
        ## This builds the full expression from back to front (inner to outer).
        def clauses = $Sequence::reverse(
            [{maker: firstCondition, then: firstThen}, elseIfThens*]);

        ## To keep things simple, partial results are always thunks wrapped
        ## in a single-element list, so that they can be slotted directly into
        ## place as the third argument to an enclosing `if*` by saying
        ## `reduction*` (which also handles the case of a missing final
        ## `else`).
        var reduction = optElse;
        $Generator::filterPump(clauses) { clause ->
            reduction := [makeThunk(clause::maker(clause::then, reduction*))]
        };

        ## Unwrap the single-element `reduction` result list;
        def mainThunk = reduction*;

        ## Either add a yield def to the thunk and wrap it in a call, or
        ## unwrap it into a straight call, depending on if the original `if`
        ## has a yield def or not. Note that the `yield` in a thunk is always
        ## a `maybe`, which also needs to be unwrapped.
        <> ifIs { eq(yieldDef, {}) }
            { <> get_nodeValue(get_yieldNode(mainThunk)) }
            {
                ## There was a yield def. Add the yield def to the thunk,
                ## and wrap that in a call.
                <> makeCall(makeFullClosure({dataOf(mainThunk)*, yieldDef*}))
            }
    }
:};

## Parses the optional yield definition that's associated with the `break`
## exit of a loop. This always results in a list, which is empty if there
## is no yield definition present, or is a single-element list of an
## appropriate variable definition and assignment.
def parOptBreakDef = {:
    (
        y = parYieldDef
        { <> makeVarDef(y, REFS::break) }
    )?
:};

## Parses a while expression. The translation is along these lines:
##
## ```
## while /out (def name = test) { /next -> stat1; stat2 }
## ```
## =>
## ```
## { /\"break" ->
##     def out = \"break";
##     loop { /\"continue" ->
##         ifValue { test }
##             { name /next -> stat1; stat2 }
##             { yield /\"break" }
##     }
## }()
## ```
##
## with:
## * the initial break assignment omitted if there is no yield def.
## * the body argument declaration changed to `.` if there is no
##   test expression name binding.
## * `ifIs` instead of `ifValue` if there is no name binding.
## * `ifValues` instead of `ifValue` if there are multiple tests.
def parWhileExpression = {:
    @while
    breakDef = parOptBreakDef
    testMaker = parMultiTest
    code = parNullaryClosure

    {
        def loopClosure = makeFullClosure({
            yieldDef: "continue",
            statements: [
                testMaker(code, makeThunk(makeNonlocalExit(REFS::break)))
            ]
        });

        def mainClosure = makeFullClosure({
            yieldDef: "break",
            statements: [breakDef*, makeCall(REFS::loop, loopClosure)]
        });

        <> makeCall(mainClosure)
    }
:};

## Parses a do expression. The translation is along these lines:
##
## ```
## do /out { /next -> stat1; stat2 } while (expr)
## ```
## =>
## ```
## { /\"break" ->
##     def out = \"break";
##     loop { /\"continue" ->
##         { /next -> stat1; stat2 }();
##         ifNot { <> expr }
##             { yield /\"break" }
##     }
## }()
## ```
##
## with the initial break assignment omitted if there is no yield def, and
## with the `ifNot` statement omitted if there is no `while` at the end
## of the `do`.
def parDoExpression = {:
    @do
    breakDef = parOptBreakDef
    code = parNullaryClosure
    condition = (
        @while
        ex = parParenExpression
        { <> makeCallThunks(REFS::ifNot, ex, makeNonlocalExit(REFS::break)) }
    )?

    {
        def loopClosure = makeFullClosure({
            yieldDef: "continue",
            statements: [makeCall(code), condition*]
        });

        def mainClosure = makeFullClosure({
            yieldDef: "break",
            statements: [breakDef*, makeCall(REFS::loop, loopClosure)]
        });

        <> makeCall(mainClosure)
    }
:};

## Parses a for expression. The translation is along these lines:
##
## ```
## for /out (name1 in expr1, name2 in expr2) { /next -> stat1; stat2 }
## ```
## =>
## ```
## { /\"break" ->
##     def out = \"break";
##     $Generator::filterPump(expr1, expr2) { name1, name2 /\"continue" ->
##         def next = \"continue";
##         stat1; stat2
##     }
## }()
## ```
##
## with:
## * the break assignment omitted if there is no outer yield def.
## * the continue assignment omitted if there is no inner yield def
def parForExpression = {:
    @for
    breakDef = parOptBreakDef
    @"("
    genList = parGeneratorList
    @")"
    code = parBasicNullaryClosure

    {
        def genFormals = genList::formals;
        def genInits = genList::inits;

        def continueDef = ifValue { get_yieldDef(code) }
            { name <> [makeVarDef(name, REFS::continue)] }
            { <> [] };

        def loopClosure = makeFullClosure({
            formals: genFormals,
            yieldDef: "continue",
            statements: [continueDef*, get_statements(code)*]
        });

        def mainClosure = makeFullClosure({
            yieldDef: "break",
            statements: [
                breakDef*,
                makeCall(REFS::Generator_filterPump,
                    loopClosure, genInits*)
            ]
        });

        <> makeCall(mainClosure)
    }
:};

## Helper for switch expressions: Parse a single case, including
## `default` and `else` cases. Returns a map that binds `keys` and
## `code`.
def parSwitchCase = {:
    keys = (
        special = [@default @else]
        @":"
        { <> special }
    |
        parKey+
    )

    code = parNullaryClosure

    { <> {code, keys} }
:};

## Tree for the second argument to the inner `ifValue` inside a `switch`
## translation. This expression is constant across all switches, and it's most
## easily constructed by using the built-in parser.
def CALL_ARG = $Lang0::parseExpression("{ body <> body() }");

## Parses a switch expression. The translation is along these lines:
##
## ```
## switch /out (def name = testExpr) {
##     ex1: { s1a; s1b }
##     ex2: { s2a; s2b }
##     default: { statDefault }
##     else: { statElse }
## }
## ```
## =>
## ```
## { /\"break" ->
##     def out = \"break";
##     <> ifValue { testExpr }
##         { name ->
##             <> ifValue
##                 { <> get({(ex1): {s1a; s1b}, (ex2): {s2a; s2b}}, name) }
##                 { body <> body() }
##                 { statDefault }
##         }
##         { statElse }
## }()
## ```
##
## with:
## * the initial break assignment omitted if there is no yield def.
## * overrides of map keys switched around so the *first* key wins.
## * the `statElse` block omitted if there is no `else` clause.
## * the `statDefault` block omitted if there is no `default` clause.
## * the test expression variable binding changed to a safe (otherwise unused)
##   name, if no variable name was specified.
def parSwitchExpression = {:
    @switch
    breakDef = parOptBreakDef
    testClause = parParenTestClause

    @"{"
    @";"*

    cases = (
        most = (
            c = parSwitchCase
            @";"+
            { <> c }
        )*

        last = parSwitchCase?

        { <> [most*, last*] }
    )

    @";"*
    @"}"

    {
        def optDefault = $Generator::filterAll(cases) { case ->
            <> ifIs { eq(case::keys, @default) } { <> case::code }
        };

        def optElse = $Generator::filterAll(cases) { case ->
            <> ifIs { eq(case::keys, @else) } { <> case::code }
        };

        ifIs { gt(get_size(optDefault), 1) }
            { die("Multiple default cases in switch.") };

        ifIs { gt(get_size(optElse), 1) }
            { die("Multiple else cases in switch.") };

        ## The `reverse` in the case construction code is done in order to
        ## preserve the left-to-right evaluation order of the apparent text,
        ## even though the key/case override semantics is the opposite of
        ## what `cat(map)` defines.
        def caseClauses = $Generator::filterAll(cases) { case ->
            def keys = case::keys;
            <> ifIs { hasType(keys, List) }
                { <> makeCallOrApply(REFS::makeValueMap, keys*, case::code) }
        };
        def caseMap = makeCallOrApply(REFS::cat,
            makeInterpolate(
                makeCall(REFS::Sequence_reverse,
                    makeCallOrApply(REFS::makeList, caseClauses*))));

        ## If there is no specified formal, then pick a safe one, that is,
        ## a name not referenced in the case clauses.
        def testVar = ifValueOr { testClause::formal::name }
            { <> $safeVar::safeVarName("switchValue", caseMap) };

        def innerIf = makeCall(REFS::ifValue,
            makeThunk(makeGet(caseMap, makeVarRef(testVar))),
            CALL_ARG,
            optDefault*);

        def mainBody = makeFullClosure({
            formals: [{name: testVar}],
            yield: makeMaybe(innerIf)
        });

        def outerIf = makeCall(REFS::ifValue,
            makeThunk(testClause::test),
            mainBody,
            optElse*);

        def mainClosure = makeFullClosure({
            yieldDef: "break",
            statements: [breakDef*],
            yield: makeMaybe(outerIf)
        });

        <> makeCall(mainClosure)
    }
:};

## This is the top rule of the operator expression tree of rules. For more
## details, see the comment where `parOpExpression` is declared, above.
parOpExpression := parLogicOrExpression;

## Layer 2 parser for a general expression.
parExpression2 := {:
    ## These are "statement-like" expressions, in that they look like
    ## similar statements in many (most?) C-derived languages.
    parDoExpression | parForExpression |
    parIfExpression | parSwitchExpression | parWhileExpression
:};


##
## Exported Definitions
##

## Documented in spec.
export fn parseExpression(expression) {
    def tokens = ifIs { hasType(expression, String) }
        { <> tokenize(expression) }
        { <> expression };

    <> $Peg::apply(parExpressionOrError, tokens)
};

## Documented in spec.
export fn parseProgram(program) {
    def tokens = ifIs { hasType(program, String) }
        { <> tokenize(program) }
        { <> program };

    <> $Peg::apply(parProgramOrError, tokens)
};
