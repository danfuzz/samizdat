## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Path string utilities
##

#= language core.Lang0

import core.Sequence;
import proto.Number;


##
## Private Definitions
##

## Does a type / content check on `path`.
fn checkPath(path) {
    ifNot { hasType(path, String) }
        { die("Invalid non-string path.") };
    ifIs { eq(path, "") }
        { die("Invalid empty path.") };
};


##
## Exported Definitions
##

## Documented in spec.
export fn fixPath(path, basePaths*) {
    checkPath(path);

    <> ifIs { eq(get(path, 0), "/") }
        { <> path }
        {
            <> ifIs { eq(basePaths, []) }
                { <> path }
                { <> cat(fixPath(basePaths*), "/", path) }
        }
};

## Documented in spec.
export fn get_directory(path) {
    checkPath(path);

    var at = get_size(path);

    ## Back up over any path-final slashes. If we hit the start of the path,
    ## then that means the path was all slashes, making the result be `"/"`.
    { /out ->
        loop {
            at := $Number::sub(at, 1);

            def ch = get(path, at);
            ifIs { ne(ch, "/") } { yield /out };
            ifIs { eq(at, 0) } { return "/" };
        }
    }();

    ## Back up until the next-final slash. If we hit the start of the path,
    ## then that means there was no slash, making the result be `"."`. If
    ## the next-final slash is at the start of the path, then the result is
    ## `"/"`.
    loop {
        ifIs { eq(at, 0) } { return "." };
        at := $Number::sub(at, 1);

        def ch = get(path, at);
        ifIs { eq(ch, "/") }
            {
                ifIs { eq(at, 0) } { return "/" };
                return $Sequence::sliceExclusive(path, 0, at)
            };
    }
};

## Documented in spec.
export fn get_file(path) {
    checkPath(path);

    var at = get_size(path);

    ## Back up over any path-final slashes. If we hit the start of the path,
    ## then that means the path was all slashes, making the result be `"/"`.
    { /out ->
        loop {
            at := $Number::sub(at, 1);

            def ch = get(path, at);
            ifIs { ne(ch, "/") } { yield /out };
            ifIs { eq(at, 0) } { return "/" };
        }
    }();

    def endAt = at; ## The index of the final character of the result.

    ## Back up until the next-final slash. If we hit the start of the path,
    ## then that means there was no slash, making the result be the entire
    ## `path` minus any path-final slashes.
    loop {
        ifIs { eq(at, 0) }
            { return $Sequence::sliceInclusive(path, 0, endAt) };

        at := $Number::sub(at, 1);

        def ch = get(path, at);
        ifIs { eq(ch, "/") }
            {
                at := $Number::add(at, 1);
                return $Sequence::sliceInclusive(path, at, endAt)
            };
    }
};
