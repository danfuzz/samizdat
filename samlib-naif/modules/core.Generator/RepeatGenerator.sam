## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `RepeatGenerator` Type
##
## Payload is `{size, value}`.

#= language core.Lang0

import proto.Number :: sub;

import ./NullGenerator :: nullGenerator;



##
## Exported Definitions
##

## Documented in spec.
export fn makeRepeatGenerator(size, optValue?) {
    ifIs { perLe(size, 0) }
        {
            ifIs { perLt(size, 0) }
                { die("Invalid negative size for RepeatGenerator.") };
            return nullGenerator
        };

    def value = ifValueOr { optValue* } { null };
    return @RepeatGenerator{size, value}
};

## Documented in spec.
fn @@RepeatGenerator.collect(optFilterFunction?) {
    ## Just use the standard implementation.
    return Generator_stdCollect(this, optFilterFunction*)
};

## Documented in spec.
fn @@RepeatGenerator.fetch() {
    ## Just use the standard implementation.
    return Generator_stdFetch(this)
};

## Documented in spec.
fn @@RepeatGenerator.nextValue(box) {
    def size = this::size;

    return? ifIs { perGt(size, 0) }
        {
            def value = this::value;
            box* := value;
            makeRepeatGenerator(sub(size, 1), value)
        }
};
