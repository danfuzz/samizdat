## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `RepeatGenerator` Type
##
## Payload is `{size, value}`.

def $Number = moduleLoad(["proto", "Number"]);

def $NullGenerator = intraLoad("NullGenerator");



##
## Exported Definitions
##

## Documented in spec.
fn makeRepeatGenerator(size, optValue?) {
    ifIs { <> perLe(size, 0) }
        {
            ifIs { <> perLt(size, 0) }
                { die("Invalid negative size for RepeatGenerator.") };
            return $NullGenerator::nullGenerator
        };

    def value = ifValueOr { <> optValue* } { <> null };
    <> @RepeatGenerator{size, value}
};

## Just use the standard implementation.
genericBind(collect, @@RepeatGenerator, Generator_stdCollect);

## Documented in spec.
fn RepeatGenerator_nextValue(gen, box) {
    def size = gen::size;

    <> ifIs { <> perGt(size, 0) }
        {
            def value = gen::value;
            store(box, value);
            <> makeRepeatGenerator($Number::sub(size, 1), value)
        }
        {
            ## Size is `0` or negative.
            store(box)
        }
};
genericBind(nextValue, @@RepeatGenerator, RepeatGenerator_nextValue);


<> {
    makeRepeatGenerator
}
