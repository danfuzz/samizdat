## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `RepeatGenerator` Class
##
## Payload is `{size, value}`.

#= language core.Lang0

import ./NullGenerator :: nullGenerator;


##
## Class Definition
##

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

class RepeatGenerator
        access: ACCESS,
        new: NEW {
    ## Documented in spec.
    .collect(optFilterFunction?) {
        ## Just use the standard implementation.
        return Generator_stdCollect(this, optFilterFunction*)
    };

    ## Documented in spec.
    .fetch() {
        ## Just use the standard implementation.
        return Generator_stdFetch(this)
    };

    ## Documented in spec.
    .nextValue(box) {
        def data = this.(ACCESS)();
        def size = data::size;

        return? ifIs { perGt(size, 0) }
            {
                def value = data::value;
                box* := value;
                makeRepeatGenerator(size.sub(1), value)
            }
    };
};


##
## Exported Definitions
##

## Documented in spec.
export fn makeRepeatGenerator(size, optValue?) {
    ifIs { perLe(size, 0) }
        {
            ifIs { perLt(size, 0) }
                { die("Invalid negative size for RepeatGenerator.") };
            return nullGenerator
        };

    def value = ifValueOr { optValue* } { null };
    return RepeatGenerator.(NEW)(@{size, value})
};
