## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Generator functions
##

#= language core.Lang0

export import ./FilterGenerator :: *;
export import ./ListWrapGenerator :: *;
export import ./NullGenerator :: *;
export import ./OptGenerator :: *;
export import ./ParaGenerator :: *;
export import ./RepeatGenerator :: *;
export import ./SerialGenerator :: *;
export import ./ValueGenerator :: *;
export import ./unbounded :: *;


##
## Exported Definitions
##

## Re-exported from builtins. Documented in spec.
export def stdCollect = Generator_stdCollect;

## Re-exported from builtins. Documented in spec.
export def stdFetch = Generator_stdFetch;

## Re-exported from builtins. Documented in spec.
export def stdForEach = Generator_stdForEach;

## Documented in spec.
export fn filterAll(filterFunction, generators*) {
    return ifIs { eq(generators.get_size(), 1) }
        {
            ## We are collecting a single generator, so just use `.collect()`
            ## directly.
            (generators*).collect(filterFunction)
        }
        {
            ## The general case.
            FilterGenerator.new(filterFunction, generators*).collect()
        }
};

## Documented in spec.
export fn filterPump(filterFunction, generators*) {
    return? ifIs { eq(generators.get_size(), 1) }
        {
            ## We are iterating a single generator, so just use `.forEach()`
            ## directly.
            (generators*).forEach(filterFunction)
        }
        {
            ## General case of multiple (or zero) generators.
            var gen = ParaGenerator.new(generators*);
            var result = [];
            var innerResult;

            loop {
                ifValue { gen.nextValue(innerResult?) }
                    { nextGen ->
                        ifValue { filterFunction(innerResult*) }
                            { value -> result := [value] };
                        gen := nextGen
                    }
                    {
                        ## The inner generator was voided.
                        return? result*
                    }
            }
        }
};
