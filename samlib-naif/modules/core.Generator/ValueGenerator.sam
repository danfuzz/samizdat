## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `ValueGenerator` Class
##
## Payload is `{value}`, the value.

#= language core.Lang0

import ./unbounded :: unboundedCollect, unboundedFetch;


##
## Class Definition
##

## Secret used to control access to this class. TODO: Should probably be an
## anonymous symbol.
def SECRET = makeUniqlet();

## Class being defined here.
def ValueGenerator = makeObjectClass(@.ValueGenerator, SECRET);

## Documented in spec.
fn ValueGenerator.collect(optFilterFunction?) {
    ## It is an "unbounded collect" error to call this.
    unboundedCollect(this)
};

## Documented in spec.
fn ValueGenerator.fetch() {
    ## It is an "unbounded fetch" error to call this.
    unboundedFetch(this)
};

## Documented in spec.
fn ValueGenerator.nextValue(box) {
    def data = this.objectDataOf(SECRET);
    box* := data::value;
    return this
};


##
## Exported Definitions
##

## Documented in spec.
export fn makeValueGenerator(value) {
    return makeObject(ValueGenerator, SECRET, {value})
};
