## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `ListWrapGenerator` Type
##
## Payload is `subGen`, the sub-generator.

def Box = moduleLoad(["core", "Box"]);


##
## Exported Definitions
##

## Documented in spec.
fn makeListWrapGenerator(generator) {
    <> @ListWrapGenerator(generator)
};

## Documented in spec.
fn ListWrapGenerator_nextValue(gen, box) {
    def innerBox = Box::makePromise();

    <> ifValue { <> nextValue(dataOf(gen), innerBox) }
        { nextGenerator ->
            store(box, [fetch(innerBox)]);
            <> @ListWrapGenerator(nextGenerator)
        }
        {
            ## It became voided.
            store(box);
        }
};
genericBind(nextValue, @@ListWrapGenerator,
    ListWrapGenerator_nextValue);

## Just use the standard implementation.
genericBind(collect, @@ListWrapGenerator, Generator_stdCollect);

<> {
    makeListWrapGenerator
}
