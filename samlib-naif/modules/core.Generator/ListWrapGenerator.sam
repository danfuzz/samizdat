## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `ListWrapGenerator` Class
##
## Payload is `{generator}`, the sub-generator.

#= language core.Lang0


##
## Class Definition
##

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

class ListWrapGenerator
        access: ACCESS,
        new: NEW {
    ## Documented in spec.
    fn collect(optFilterFunction?) {
        ## Just use the standard implementation.
        return Generator_stdCollect(this, optFilterFunction*)
    };

    ## Documented in spec.
    fn fetch() {
        ## Just use the standard implementation.
        return Generator_stdFetch(this)
    };

    ## Documented in spec.
    fn nextValue(box) {
        def data = ACCESS(this);
        def result;

        return? ifValue { data::generator.nextValue(result?) }
            { nextGenerator ->
                box* := [result];
                makeListWrapGenerator(nextGenerator)
            }
    };
};


##
## Exported Definitions
##

## Documented in spec.
export fn makeListWrapGenerator(generator) {
    return NEW(ListWrapGenerator, @{generator})
};
