## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `ParaGenerator` Class
##
## Payload is `{generators: [gens*]}`, a list of sub-generators.

#= language core.Lang0

import core.Box :: nullBox;

import ./ListWrapGenerator :: makeListWrapGenerator;
import ./NullGenerator :: nullGenerator;


##
## Class Definition
##

## Secret used to control access to this class. TODO: Should probably be an
## anonymous selector.
def SECRET = makeUniqlet();

## Class being defined here.
def ParaGenerator = makeObjectClass("ParaGenerator", SECRET);

## Documented in spec.
fn ParaGenerator.collect(optFilterFunction?) {
    ## Just use the standard implementation.
    return Generator_stdCollect(this, optFilterFunction*)
};

## Documented in spec.
fn ParaGenerator.fetch() {
    ## Just use the standard implementation.
    return Generator_stdFetch(this)
};

## Documented in spec.
fn ParaGenerator.nextValue(box) {
    def data = objectDataOf(this, SECRET);
    def subGens = data::generators;

    ifIs { eq(subGens, []) }
        { return };

    var result;
    def generatorCalls = collect(
        subGens,
        { gen ->
            ifValue { nextValue(gen, var result) }
                { nextGenerator -> [result, nextGenerator] }
                {
                    ## One of the sub-generators became voided.
                    return
                }
        });

    def yields = collect(generatorCalls,
        { one -> nth(one, 0) });
    def nexts = collect(generatorCalls,
        { one -> nth(one, 1) });

    box* := yields;
    return makeObject(ParaGenerator, SECRET, {generators: nexts})
};


##
## Exported Definitions
##

## Documented in spec.
export fn makeParaGenerator(generators*) {
    ## Return the `nullGenerator` if we weren't passed any arguments.
    ifIs { eq(generators, []) }
        { return nullGenerator };

    ## Return a `ListWrapGenerator` if we were only passed one argument.
    ## This saves some overhead.
    ifIs { eq(generators.get_size(), 1) }
        { return makeListWrapGenerator(generators*) };

    return makeObject(ParaGenerator, SECRET, {generators})
};
