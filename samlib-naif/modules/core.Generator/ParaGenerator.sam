## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `ParaGenerator` Class
##
## Payload is `{generators: [gens*]}`, a list of sub-generators.

#= language core.Lang0

import ./ListWrapGenerator :: *;
import ./NullGenerator :: nullGenerator;


##
## Class Definition
##

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

export class ParaGenerator
        access: ACCESS,
        new: NEW {
    ## Documented in spec.
    class.new(generators*) {
        ## Return the `nullGenerator` if we weren't passed any arguments.
        ifIs { eq(generators, []) }
            { return nullGenerator };

        ## Return a `ListWrapGenerator` if we were only passed one argument.
        ## This saves some overhead.
        ifIs { eq(generators.get_size(), 1) }
            { return ListWrapGenerator.new(generators*) };

        return this.(NEW)(@{generators})
    };

    ## Documented in spec.
    .collect(optFilterFunction?) {
        ## Just use the standard implementation.
        return Generator_stdCollect(this, optFilterFunction*)
    };

    ## Documented in spec.
    .fetch() {
        ## Just use the standard implementation.
        return Generator_stdFetch(this)
    };

    ## Documented in spec.
    .forEach(optFilterFunction?) {
        ## Just use the standard implementation.
        return Generator_stdForEach(this, optFilterFunction*)
    };

    ## Documented in spec.
    .nextValue(box) {
        def data = this.(ACCESS)();
        def subGens = data::generators;

        ifIs { eq(subGens, []) }
            { return };

        var result;
        def generatorCalls = subGens.collect(
            { gen ->
                ifValue { gen.nextValue(result?) }
                    { nextGenerator -> [result, nextGenerator] }
                    {
                        ## One of the sub-generators became voided.
                        return
                    }
            });

        def yields = generatorCalls.collect({ one -> one.nth(0) });
        def nexts = generatorCalls.collect({ one -> one.nth(1) });

        box* := yields;
        return this.(NEW)(@{generators: nexts})
    };
};
