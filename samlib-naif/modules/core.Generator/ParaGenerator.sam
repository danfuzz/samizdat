## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `ParaGenerator` Class
##
## Payload is `{generators: [gens*]}`, a list of sub-generators.

#= language core.Lang0

import ./ListWrapGenerator :: makeListWrapGenerator;
import ./NullGenerator :: nullGenerator;


##
## Class Definition
##

## Secret used to control access to this class.
def SECRET = @secret.toUnlisted();

class ParaGenerator
        access: SECRET {
    ## Documented in spec.
    fn collect(optFilterFunction?) {
        ## Just use the standard implementation.
        return Generator_stdCollect(this, optFilterFunction*)
    };

    ## Documented in spec.
    fn fetch() {
        ## Just use the standard implementation.
        return Generator_stdFetch(this)
    };

    ## Documented in spec.
    fn nextValue(box) {
        def data = SECRET(this);
        def subGens = data::generators;

        ifIs { eq(subGens, []) }
            { return };

        var result;
        def generatorCalls = subGens.collect(
            { gen ->
                ifValue { gen.nextValue(var result) }
                    { nextGenerator -> [result, nextGenerator] }
                    {
                        ## One of the sub-generators became voided.
                        return
                    }
            });

        def yields = generatorCalls.collect({ one -> one.nth(0) });
        def nexts = generatorCalls.collect({ one -> one.nth(1) });

        box* := yields;
        return makeObject(ParaGenerator, SECRET, @{generators: nexts})
    };
};


##
## Exported Definitions
##

## Documented in spec.
export fn makeParaGenerator(generators*) {
    ## Return the `nullGenerator` if we weren't passed any arguments.
    ifIs { eq(generators, []) }
        { return nullGenerator };

    ## Return a `ListWrapGenerator` if we were only passed one argument.
    ## This saves some overhead.
    ifIs { eq(generators.get_size(), 1) }
        { return makeListWrapGenerator(generators*) };

    return makeObject(ParaGenerator, SECRET, @{generators})
};
