## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `SerialGenerator` Class
##
## Payload is `{generators: [gens*]}`, a list of sub-generators.

#= language core.Lang0

import ./NullGenerator :: nullGenerator;


##
## Class Definition
##

## Secret used to control access to this class. TODO: Should probably be an
## anonymous selector.
def SECRET = makeUniqlet();

## Class being defined here.
def SerialGenerator = makeObjectClass("SerialGenerator", SECRET);

## Documented in spec.
fn SerialGenerator.collect(optFilterFunction?) {
    ## Just use the standard implementation.
    return Generator_stdCollect(this, optFilterFunction*)
};

## Documented in spec.
fn SerialGenerator.fetch() {
    ## Just use the standard implementation.
    return Generator_stdFetch(this)
};

## Documented in spec.
fn SerialGenerator.nextValue(box) {
    def data = objectDataOf(this, SECRET);
    def subGens = data::generators;

    return? ifValue { get(subGens, 0) }
        { firstGen ->
            def moreGens = subGens.sliceInclusive(1);

            ifValue { nextValue(firstGen, box) }
                { nextGenerator ->
                    makeObject(SerialGenerator, SECRET,
                        {generators: [nextGenerator, moreGens*]})
                }
                {
                    ## First generator was voided.
                    nextValue(makeSerialGenerator(moreGens*), box)
                }
        }
};


##
## Exported Definitions
##

## Documented in spec.
export fn makeSerialGenerator(generators*) {
    ## Return the `nullGenerator` if we weren't passed any arguments.
    ifIs { eq(generators, []) }
        { return nullGenerator };

    ## Return the argument directly if we were only passed one.
    ## This saves some gratuitous call wrapping / double yields.
    ifIs { eq(generators.get_size(), 1) }
        { return generators* };

    return makeObject(SerialGenerator, SECRET, {generators})
};
