## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `SerialGenerator` Class
##
## Payload is `{generators: [gens*]}`, a list of sub-generators.

#= language core.Lang0

import ./NullGenerator :: nullGenerator;


##
## Class Definition
##

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

export class SerialGenerator
        access: ACCESS,
        new: NEW {
    class.new(generators*) {
        ## Return the `nullGenerator` if we weren't passed any arguments.
        ifIs { eq(generators, []) }
            { return nullGenerator };

        ## Return the argument directly if we were only passed one.
        ## This saves some gratuitous call wrapping / double yields.
        ifIs { eq(generators.get_size(), 1) }
            { return generators* };

        return this.(NEW)(@{generators})
    };


    ## Documented in spec.
    .collect(optFilterFunction?) {
        ## Just use the standard implementation.
        return Generator_stdCollect(this, optFilterFunction*)
    };

    ## Documented in spec.
    .fetch() {
        ## Just use the standard implementation.
        return Generator_stdFetch(this)
    };

    ## Documented in spec.
    .nextValue(box) {
        def data = this.(ACCESS)();
        def subGens = data::generators;

        return? ifValue { subGens.nth(0) }
            { firstGen ->
                def moreGens = subGens.sliceInclusive(1);

                ifValue { firstGen.nextValue(box) }
                    { nextGenerator ->
                        SerialGenerator.(NEW)(
                            @{generators: [nextGenerator, moreGens*]})
                    }
                    {
                        ## First generator was voided.
                        SerialGenerator.new(moreGens*).nextValue(box)
                    }
            }
    };
};
