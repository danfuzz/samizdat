## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `OptGenerator` Type
##
## Payload is `{generator}`, the sub-generator.

#= language core.Lang0

import ./ValueGenerator :: makeValueGenerator;
import ./unbounded :: unboundedCollect, unboundedFetch;


##
## Exported Definitions
##

## Documented in spec.
export fn makeOptGenerator(generator) {
    return @OptGenerator{generator}
};

## Documented in spec.
fn @@OptGenerator.collect(optFilterFunction?) {
    ## It is an "unbounded collect" error to call this.
    unboundedCollect(this)
};

## Documented in spec.
fn @@OptGenerator.fetch() {
    ## It is an "unbounded fetch" error to call this.
    unboundedFetch(this)
};

## Documented in spec.
fn @@OptGenerator.nextValue(box) {
    def result;

    return ifValue { nextValue(this::generator, var result) }
        { nextGenerator ->
            box* := [result];
            @OptGenerator{generator: nextGenerator}
        }
        { nextValue(makeValueGenerator([]), box) }
};
