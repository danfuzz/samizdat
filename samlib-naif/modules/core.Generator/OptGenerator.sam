## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `OptGenerator` Type
##
## Payload is `subGen`, the sub-generator.

def $Box = moduleLoad(["core", "Box"]);

def $ValueGenerator  = intraLoad("ValueGenerator");
def unboundedCollect = intraLoad("unboundedCollect")::unboundedCollect;


##
## Exported Definitions
##

## Documented in spec.
fn makeOptGenerator(generator) {
    <> @OptGenerator(generator)
};

## Documented in spec.
genericBind(collect, @@OptGenerator, unboundedCollect);

## Documented in spec.
fn OptGenerator_nextValue(this, box) {
    def subGen = dataOf(this);
    def innerBox = $Box::makePromise();

    <> ifValue { <> nextValue(subGen, innerBox) }
        { nextGen ->
            store(box, [fetch(innerBox)]);
            <> @OptGenerator(nextGen)
        }
        {
            <> nextValue(
                $ValueGenerator::makeValueGenerator([]),
                box)
        }
};
genericBind(nextValue, @@OptGenerator, OptGenerator_nextValue);

<> {
    makeOptGenerator
}
