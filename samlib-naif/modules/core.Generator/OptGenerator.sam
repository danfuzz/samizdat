## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `OptGenerator` Class
##
## Payload is `{generator}`, the sub-generator.

#= language core.Lang0

import ./ValueGenerator :: makeValueGenerator;
import ./unbounded :: unboundedCollect, unboundedFetch;


##
## Class Definition
##

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

class OptGenerator
        access: ACCESS,
        new: NEW {
    ## Documented in spec.
    fn collect(optFilterFunction?) {
        ## It is an "unbounded collect" error to call this.
        unboundedCollect(this)
    };

    ## Documented in spec.
    fn fetch() {
        ## It is an "unbounded fetch" error to call this.
        unboundedFetch(this)
    };

    ## Documented in spec.
    fn nextValue(box) {
        def data = this.(ACCESS)();
        def result;

        return ifValue { data::generator.nextValue(result?) }
            { nextGenerator ->
                box* := [result];
                makeOptGenerator(nextGenerator)
            }
            { makeValueGenerator([]).nextValue(box) }
    };
};


##
## Exported Definitions
##

## Documented in spec.
export fn makeOptGenerator(generator) {
    return OptGenerator.(NEW)(@{generator})
};
