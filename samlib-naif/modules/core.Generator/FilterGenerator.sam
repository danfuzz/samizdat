## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `FilterGenerator` Class
##
## Payload is a map `{filterFunction: function, generator: subGen}`.
## `subGen` is expected to produce lists of arguments to apply.

#= language core.Lang0

import ./ParaGenerator :: makeParaGenerator;


##
## Class Definition
##

## Secret used to control access to this class.
def SECRET = @secret.makeAnonymous();

## Class being defined here.
def FilterGenerator = makeObjectClass(@FilterGenerator, SECRET);

## Documented in spec.
fn FilterGenerator.collect(optFilterFunction?) {
    ## Just use the standard implementation.
    return Generator_stdCollect(this, optFilterFunction*)
};

## Documented in spec.
fn FilterGenerator.fetch() {
    ## Just use the standard implementation.
    return Generator_stdFetch(this)
};

## Documented in spec.
fn FilterGenerator.nextValue(box) {
    def data = this.objectDataOf(SECRET);
    var innerGen = data::generator;
    def filterFunction = data::filterFunction;
    var result;

    ## This loop handles the fact that the filter function is
    ## allowed to yield void to indicate a generated value is to
    ## be discarded.
    loop {
        ifValue { innerGen.nextValue(var result) }
            { nextGen ->
                ifValue { filterFunction(result*) }
                    { value ->
                        box* := value;
                        return makeObject(FilterGenerator, SECRET,
                            {filterFunction, generator: nextGen})
                    }
                    {
                        ## The filter discarded the value. As this doesn't
                        ## `return` (per se) it will fall through to the end
                        ## of the loop body and iterate.
                        innerGen := nextGen;
                    }
            }
            {
                ## The inner generator was voided.
                return
            }
    }
};


##
## Exported Definitions
##

## Documented in spec.
export fn makeFilterGenerator(filterFunction, generators*) {
    return makeObject(FilterGenerator, SECRET,
        {
            filterFunction,
            generator: makeParaGenerator(generators*)
        })
};
