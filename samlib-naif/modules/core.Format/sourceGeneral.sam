## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `sourceGeneral` and helpers
##

#= language core.Lang0

import core.Generator :: filterAll, makeFilterGenerator;
import core.Sequence :: sliceInclusive;

import ./identifier :: isIdentifier;
import ./int :: intWithBase;
import ./string :: stringChar;


## Common generic for the two `source*` variants, which takes an
## `adorn` flag.
export fn .sourceGeneral(adorn);

## Helper for optionally adorning results.
fn adornIf(adorn, before, value, after) {
    return ifIs { totalEq(adorn, true) }
        { cat(before, value, after) }
        { value }
};

## Helper which concatenates a list of list or map element stringifications.
## It assumes that every element is a string that starts with `", "`, and it
## removes that prefix from the first element. As a special case, this returns
## `""` if given `[]` for `elems`.
fn collectionBody(elems) {
    ifIs { totalEq(elems, []) }
        { return "" };

    def one = sliceInclusive(get(elems, 0), 2);
    return cat(one, sliceInclusive(elems, 1)*)
};

## Values with special conversions.
def SPECIAL_VALUES = {
    (Data):        "Data",
    (DerivedData): "DerivedData",
    (Int):         "Int",
    (List):        "List",
    (Map):         "Map",
    (String):      "String",
    (Type):        "Type",
    (Uniqlet):     "Uniqlet",
    (Value):       "Value",
    (false):       "false",
    (null):        "null",
    (true):        "true"
};

## Stringifies a key (or derived value name).
fn keyString(key) {
    ifIs { isIdentifier(key) }
        { return key };

    ifValue { get(SPECIAL_VALUES, key) }
        { string -> return cat("(", string, ")") };

    return sourceGeneral(key, true)
};

## Stringifies an int.
fn Int.sourceGeneral(adorn) {
    return intWithBase(this, 10)
};

## Stringifies a list.
fn List.sourceGeneral(adorn) {
    def listElems = filterAll(this)
        { elem -> cat(", ", sourceGeneral(elem, true)) };

    return adornIf(adorn, "[", collectionBody(listElems), "]")
};

## Stringifies a map.
fn Map.sourceGeneral(adorn) {
    def mapElems = filterAll(this)
        { mapping ->
            def key = keyString(get_key(mapping));
            def value = sourceGeneral(get_value(mapping), true);
            cat(", ", key, ": ", value)
        };

    return adornIf(adorn, "{", collectionBody(mapElems), "}");
};

## Stringifies a string.
fn String.sourceGeneral(adorn) {
    def bodyChars = makeFilterGenerator(this)
        { ch -> stringChar(ch) };
    return adornIf(adorn, "\"", cat("", bodyChars*), "\"")
};

## Stringifies a type.
fn Type.sourceGeneral(adorn) {
    ifValue { get(SPECIAL_VALUES, this) }
        { string -> return string };

    def name = typeName(this);

    ifNot { eq(typeParent(this), DerivedData) }
        { return cat("@@(opaque ", sourceGeneral(name, true), ")") };

    def body = ifIs { hasType(name, String) }
        { ifValueOr { isIdentifier(name) } { sourceGeneral(name, true) } }
        { cat("(", sourceGeneral(name, true), ")") };

    return adornIf(adorn, "@@", body, "")
};

## Stringifies a derived value or an opaque core value.
fn Value.sourceGeneral(adorn) {
    ifValue { get(SPECIAL_VALUES, this) }
        { string -> return string };

    def type = get_type(this);
    def name = typeName(type);
    def typeStr = ifIs { hasType(name, String) }
        {
            ## The type is a string.
            ifValueOr { isIdentifier(name) } { sourceGeneral(name, true) }
        }
        {
            ## General case for type.
            cat("(", sourceGeneral(type, true), ")")
        };
    def prefix = cat("@", typeStr);

    ifNot { eq(typeParent(type), DerivedData) }
        {
            ## Opaque value, possibly named.
            def body = ifValue { debugName(this) }
                { name -> keyString(name) }
                { "..." };

            return cat(prefix, "<", body, ">")
        };

    return ifValue { dataOf(this) }
        { data ->
            ## Derived data value with payload. List and map payloads don't
            ## need parens around them.
            def dataStr = sourceGeneral(data, true);
            ifIs { hasType(data, List) }
                { return cat(prefix, dataStr) };
            ifIs { hasType(data, Map) }
                { return cat(prefix, dataStr) };
            cat(prefix, "(", dataStr, ")")
        }
        {
            ## Type-only transparent derived value.
            prefix
        };
};
