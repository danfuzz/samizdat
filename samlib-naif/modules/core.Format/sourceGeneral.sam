## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `sourceGeneral` and helpers
##

#= language core.Lang0

import core.Generator :: filterAll, makeFilterGenerator;

import ./identifier :: isIdentifier;
import ./int :: intWithBase;
import ./string :: stringChar;


## Helper for optionally adorning results.
fn adornIf(adorn, before, value, after) {
    return ifIs { eq(adorn, true) }
        { before.cat(value, after) }
        { value }
};

## Helper which concatenates a list of list or map element stringifications.
## It assumes that every element is a string that starts with `", "`, and it
## removes that prefix from the first element. As a special case, this returns
## `""` if given `[]` for `elems`.
fn collectionBody(elems) {
    ifIs { eq(elems, []) }
        { return "" };

    def one = elems.nth(0).sliceInclusive(2);
    return one.cat(elems.sliceInclusive(1)*)
};

## Values with special conversions.
def SPECIAL_VALUES = {
    (Bool) :       "Bool",
    (Class):       "Class",
    (Data):        "Data",
    (DerivedData): "DerivedData",
    (Int):         "Int",
    (List):        "List",
    (Map):         "Map",
    (Null):        "Null",
    (String):      "String",
    (Symbol):      "Symbol",
    (SymbolTable): "SymbolTable",
    (Value):       "Value",
    (false):       "false",
    (null):        "null",
    (true):        "true"
};

## Stringifies a key (or derived value name).
fn keyString(key) {
    ifIs { isIdentifier(key) }
        { return key };

    ifValue { SPECIAL_VALUES.get(key) }
        { string -> return "(".cat(string, ")") };

    return sourceGeneral(key, true)
};

## Stringifies a class.
fn Class_sourceGeneral(value, adorn) {
    ifValue { SPECIAL_VALUES.get(value) }
        { string -> return string };

    def name = classNameString(value);

    ifNot { eq(classParent(value), DerivedData) }
        { return "@@(opaque ".cat(sourceGeneral(name, true), ")") };

    def body = ifIs { hasClass(name, String) }
        { ifValueOr { isIdentifier(name) } { sourceGeneral(name, true) } }
        { "(".cat(sourceGeneral(name, true), ")") };

    return adornIf(adorn, "@@", body, "")
};

## Stringifies an int.
fn Int_sourceGeneral(value, adorn) {
    return intWithBase(value, 10)
};

## Stringifies a list.
fn List_sourceGeneral(value, adorn) {
    def listElems = filterAll(value)
        { elem -> ", ".cat(sourceGeneral(elem, true)) };

    return adornIf(adorn, "[", collectionBody(listElems), "]")
};

## Stringifies a map.
fn Map_sourceGeneral(value, adorn) {
    def mapElems = filterAll(value)
        { mapping ->
            def k = keyString(mapping.get_key());
            def v = sourceGeneral(mapping.get_value(), true);
            ", ".cat(k, ": ", v)
        };

    return adornIf(adorn, "{", collectionBody(mapElems), "}");
};

## Stringifies a symbol.
fn Symbol_sourceGeneral(value, adorn) {
    def name = value.toString();

    ifIs { eq(adorn, false) }
        { return sourceGeneral(name, false) };

    def prefix = ifIs { symbolIsInterned(value) } { "@." } { "@?" };
    def body = ifIs { isIdentifier(name) }
        { name }
        { sourceGeneral(name, true) };

    return prefix.cat(body);
};

## Stringifies a string.
fn String_sourceGeneral(value, adorn) {
    def bodyChars = makeFilterGenerator(value)
        { ch -> stringChar(ch) };
    return adornIf(adorn, "\"", "".cat(bodyChars*), "\"")
};

## Stringifies a derived value or an opaque core value.
fn Value_sourceGeneral(value, adorn) {
    ifValue { SPECIAL_VALUES.get(value) }
        { string -> return string };

    def cls = get_class(value);
    def name = classNameString(cls);
    def clsStr = ifIs { hasClass(name, String) }
        {
            ## The class is a string.
            ifValueOr { isIdentifier(name) } { sourceGeneral(name, true) }
        }
        {
            ## General case for class.
            "(".cat(sourceGeneral(cls, true), ")")
        };
    def prefix = "@".cat(clsStr);

    ifNot { eq(classParent(cls), DerivedData) }
        {
            ## Opaque value, possibly named.
            def body = ifValue { value.debugSymbol() }
                { name -> keyString(name.toString()) }
                { "..." };

            return prefix.cat("<", body, ">")
        };

    return ifValue { value.dataOf() }
        { data ->
            ## Derived data value with payload. List and map payloads don't
            ## need parens around them.
            def dataStr = sourceGeneral(data, true);
            ifIs { hasClass(data, List) }
                { return prefix.cat(dataStr) };
            ifIs { hasClass(data, Map) }
                { return prefix.cat(dataStr) };
            prefix.cat("(", dataStr, ")")
        }
        {
            ## Class-only transparent derived value.
            prefix
        };
};

## Common code for the two `source*` variants, which takes an
## `adorn` flag.
export fn sourceGeneral(value, adorn) {
    return ifSwitch(
        { get_class(value) },
        {
            (Class):  { . -> Class_sourceGeneral(value, adorn) },
            (Int):    { . -> Int_sourceGeneral(value, adorn) },
            (List):   { . -> List_sourceGeneral(value, adorn) },
            (Map):    { . -> Map_sourceGeneral(value, adorn) },
            (String): { . -> String_sourceGeneral(value, adorn) },
            (Symbol): { . -> Symbol_sourceGeneral(value, adorn) }
        },
        { . -> Value_sourceGeneral(value, adorn) }
    )
};
