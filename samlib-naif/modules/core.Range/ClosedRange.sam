## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `ClosedRange` Class
##
## Payload: `{start: intOrChar, increment: int, size: int}`

#= language core.Lang0

import core.Generator :: stdCollect;

import ./rangeAdd :: *;


##
## Class Definition
##

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

export class ClosedRange
        access: ACCESS,
        new: NEW {
    ## Documented in spec.
    class.new(firstValue, size, optIncrement?) {
        def increment = ifValueOr { optIncrement* } { 1 };

        ## The use of `totalLt` ensures that `size` is an int.
        ifNot { Int.accepts(size) }
            { die("`size` must be an int.") };

        return this.(NEW)(@{firstValue, increment, size})
    };

    ## Documented in spec.
    class.newExclusive(firstValue, limit, optIncrement?) {
        ## `totalEq` ensures that `firstValue` and `limit` have the same class.
        def isEmpty = firstValue.totalEq(limit)?;
        def firstInt = cast(Int, firstValue);
        def limitInt = cast(Int, limit);
        def increment = ifValueOr { optIncrement* } { 1 };

        ## `totalEq` ensures that `increment` is an int.
        ifIs { increment.totalEq(0) }
            {
                return ifIs { isEmpty* }
                    { this.new(0, 0, 0) }
                    { this.new(firstValue, 1, 0) }
            };

        ## `increment.sign()` is either `-1` or `+1`, which when subtracted
        ## from limit "pushes" the limit in the right direction to make the
        ## truncated division produce the correct result size.
        def size =
            limitInt.sub(firstInt).sub(increment.sign()).div(increment).add(1);

        return this.new(firstValue, size, increment);
    };

    ## Documented in spec.
    class.newInclusive(firstValue, limit, optIncrement?) {
        def increment = ifValueOr { optIncrement* } { 1 };

        ## This just ensures that `firstValue` and `limit` have the same class.
        firstValue.totalEq(limit);

        ## `totalEq` ensures that `increment` is an int.
        ifIs { increment.totalEq(0) }
            { return this.new(firstValue, 1, 0) };

        def firstInt = cast(Int, firstValue);
        def limitInt = cast(Int, limit);
        def size = limitInt.sub(firstInt).div(increment).add(1);

        return this.new(firstValue, size, increment);
    };

    ## Documented in spec.
    .collect(optFilterFunction?) {
        ## Just use the standard implementation.
        return stdCollect(this, optFilterFunction*)
    };

    ## Documented in spec.
    .fetch() {
        ## Just use the standard implementation.
        return Generator_stdFetch(this)
    };

    ## Documented in spec.
    .nextValue(box) {
        def data = this.(ACCESS)();

        return? ifValue { gt(data::size, 0) }
            { size ->
                def firstValue = data::firstValue;
                def increment = data::increment;
                box* := firstValue;
                ClosedRange.(NEW)(@{
                    firstValue: rangeAdd(firstValue, increment),
                    increment,
                    size:       size.sub(1)})
            }
    };
};


##
## Exported Definitions
##

## Documented in spec.
export fn makeExclusiveRange(firstValue, limit, optIncrement?) {
    return ClosedRange.newExclusive(firstValue, limit, optIncrement*)
};

## Documented in spec.
export fn makeInclusiveRange(firstValue, limit, optIncrement?) {
    return ClosedRange.newInclusive(firstValue, limit, optIncrement*)
};
