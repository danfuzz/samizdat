## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `OpenRange` Class
##
## Payload: `{start: intOrChar, increment: int}`

#= language core.Lang0

import core.Generator :: unboundedCollect, unboundedFetch;

import ./rangeAdd :: *;


##
## Class Definition
##

## Secret used to control access to this class. TODO: Should probably be an
## anonymous selector.
def SECRET = makeUniqlet();

## Class being defined here.
def OpenRange = makeObjectClass("OpenRange", SECRET);

## Documented in spec.
fn OpenRange.collect(optFilterFunction?) {
    ## It is an "unbounded collect" error to call this.
    unboundedCollect(this)
};

## Documented in spec.
fn OpenRange.fetch() {
    ## It is an "unbounded fetch" error to call this.
    unboundedFetch(this)
};

## Documented in spec.
fn OpenRange.nextValue(box) {
    def data = this.objectDataOf(SECRET);
    def firstValue = data::firstValue;
    def increment = data::increment;

    box* := firstValue;
    return makeOpenRange(rangeAdd(firstValue, increment), increment)
};


##
## Exported Definitions
##

## Documented in spec.
export fn makeOpenRange(firstValue, optIncrement?) {
    def increment = ifValueOr { optIncrement* } { 1 };

    return makeObject(OpenRange, SECRET, {firstValue, increment})
};
