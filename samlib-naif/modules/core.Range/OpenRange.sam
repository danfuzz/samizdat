## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `OpenRange` Class
##
## Payload: `{start: intOrChar, increment: int}`

#= language core.Lang0

import core.Generator :: unboundedCollect, unboundedFetch;

import ./rangeAdd :: *;


##
## Class Definition
##

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

export class OpenRange
        access: ACCESS,
        new: NEW {
    ## Documented in spec.
    class.new(firstValue, optIncrement?) {
        def increment = ifValueOr { optIncrement* } { 1 };
        return this.(NEW)(@{firstValue, increment})
    };

    ## Documented in spec.
    .collect(optFilterFunction?) {
        ## It is an "unbounded collect" error to call this.
        unboundedCollect(this)
    };

    ## Documented in spec.
    .fetch() {
        ## It is an "unbounded fetch" error to call this.
        unboundedFetch(this)
    };

    ## Documented in spec.
    .nextValue(box) {
        def data = this.(ACCESS)();
        def firstValue = data::firstValue;
        def increment = data::increment;

        box* := firstValue;
        return OpenRange.(NEW)(
            @{firstValue: rangeAdd(firstValue, increment), increment})
    };
};
