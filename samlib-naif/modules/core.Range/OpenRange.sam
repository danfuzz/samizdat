## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `OpenRange` Type
##
## Payload: `{start: intOrChar, increment: int}`

#= language core.Lang0

import core.Generator :: unboundedCollect;

import ./rangeAdd :: *;


##
## Exported Definitions
##

## Documented in spec.
export fn makeOpenRange(firstValue, optIncrement?) {
    def increment = ifValueOr { optIncrement* } { 1 };

    return @OpenRange{firstValue, increment}
};

## Documented in spec.
fn @@OpenRange.collect(optFilterFunction?) {
    ## It is an "unbounded collect" error to call this.
    unboundedCollect(this)
};

## Documented in spec.
fn @@OpenRange.nextValue(box) {
    def firstValue = this::firstValue;
    def increment = this::increment;

    store(box, firstValue);
    return makeOpenRange(rangeAdd(firstValue, increment), increment)
};
