## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#= language core.Lang0

import core.Generator :: filterAll;
import core.Sequence :: nthFromEnd;
import proto.Number;

import ./misc ::
    formalsMaxArgs,
    formalsMinArgs;


##
## Private Definitions
##

## Splits a string into a list of strings, dividing on the given character.
fn splitAtChar(s, ch) {
    var result = [];
    var current = "";

    fn addCurrentToResult() {
        result := [result*, current];
        current := ""
    };

    ## This uses `collect` just for the filter function, ignoring the
    ## collected result.
    collect(s, { one ->
        ifIs { eq(one, ch) }
            { addCurrentToResult() }
            { current := cat(current, one) }
    });

    addCurrentToResult();
    return result
};


##
## Exported Definitions
##

## Documented in spec.
export fn get_baseName(source) {
    return ifSwitch(
        { get_class(source) },
        {
            @@external: { . ->
                def components = splitAtChar(source::name, ".");
                nthFromEnd(components, 0)
            },

            @@internal: { . ->
                def components = splitAtChar(source::name, "/");
                def last = nthFromEnd(components, 0);
                def parts = splitAtChar(last, ".");
                get(parts, 0)
            }
        })
};

## Documented in spec.
export fn get_definedNames(node) {
    return ifSwitch(
        { get_class(node) },
        {
            @@export: { . ->
                get_definedNames(get_nodeValue(node))
            },

            @@importModuleSelection: { . ->
                def prefix = get_prefix(node);
                def select = ifValueOr { get_select(node) }
                    { die("Cannot call `get_definedNames` on unresolved import.") };

                filterAll(select) { name -> cat(prefix, name) }
            },

            @@importModule:
            @@importResource:
            @@varDef:
            @@varDefMutable: { . ->
                [get_name(node)]
            }
        },
        { . -> [] }
    )
};

## Documented in spec.
export fn get_format(node) {
    return node::format
};

## Documented in spec.
export fn get_function(node) {
    return node::function
};

## Documented in spec.
export fn get_id(node) {
    return node::id
};

## Documented in spec.
export fn get_info(node) {
    return? node::info
};

## Documented in spec.
export fn get_interpolate(node) {
    return? node::interpolate
};

## Documented in spec.
export fn get_lvalue(node) {
    return? node::lvalue
};

## Documented in spec.
export fn get_name(node) {
    return? node::name
};

## Documented in spec.
export fn get_nodeValue(node) {
    return? node::value
};

## Documented in spec.
export fn get_prefix(node) {
    return node::prefix
};

## Documented in spec.
export fn get_select(node) {
    return? node::select
};

## Documented in spec.
export fn get_source(node) {
    return node::source
};

## Documented in spec.
export fn get_statements(node) {
    return node::statements
};

## Documented in spec.
export fn get_target(node) {
    return node::target
};

## Documented in spec.
export fn get_values(node) {
    return node::values
};

## Documented in spec.
export fn get_yieldNode(node) {
    return? node::yield
};

## Documented in spec.
export fn get_yieldDef(node) {
    return? node::yieldDef
};
