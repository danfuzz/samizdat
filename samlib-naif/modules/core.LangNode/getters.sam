## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#= language core.Lang0

import core.Generator :: filterAll;
import core.Sequence :: reverseNth;

import ./misc ::
    formalsMaxArgs,
    formalsMinArgs;


##
## Private Definitions
##

## Splits a string into a list of strings, dividing on the given character.
fn splitAtChar(s, ch) {
    var result = [];
    var current = "";

    fn addCurrentToResult() {
        result := [result*, current];
        current := ""
    };

    ## This uses `collect` just for the filter function, ignoring the
    ## collected result.
    s.collect({ one ->
        ifIs { eq(one, ch) }
            { addCurrentToResult() }
            { current := current.cat(one) }
    });

    addCurrentToResult();
    return result
};


##
## Exported Definitions
##

## Documented in spec.
export fn get_baseName(source) {
    return ifSwitch(
        { get_class(source) },
        {
            @@external: { . ->
                def components = splitAtChar(source::name, ".");
                reverseNth(components, 0)
            },

            @@internal: { . ->
                def components = splitAtChar(source::name, "/");
                def last = reverseNth(components, 0);
                def parts = splitAtChar(last, ".");
                parts.nth(0)
            }
        })
};

## Documented in spec.
export fn get_definedNames(node) {
    return ifSwitch(
        { get_class(node) },
        {
            @@export: { . ->
                get_definedNames(node::value)
            },

            @@importModuleSelection: { . ->
                def select = ifValueOr { node::select }
                    { die("Cannot call `get_definedNames` on unresolved import.") };

                ifValue { node::prefix }
                    { prefix ->
                        filterAll(select)
                            { name -> "".cat(prefix, name).toSymbol() }
                    }
                    { select }
            },

            @@importModule:
            @@importResource:
            @@varDef:
            @@varDefMutable: { . ->
                [node::name]
            }
        },
        { . -> [] }
    )
};
