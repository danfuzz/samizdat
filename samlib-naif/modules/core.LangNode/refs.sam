## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#= language core.Lang0

import core.Generator :: filterAll;
import ./constructors1 :: makeCall, makeLiteral, makeSelector, makeVarFetch;


##
## Private Definitions
##

## Literal selectors.
def SELECTORS = [
    "add",
    "and",
    "cat",
    "collect",
    "div",
    "divEu",
    "get_size",
    "mod",
    "modEu",
    "mul",
    "neg",
    "not",
    "or",
    "reverse",
    "shl",
    "sliceExclusive",
    "sliceInclusive",
    "shr",
    "sub",
    "xor"
];

## Global variable names / regular variable references.
def NAMES = [
    "break",
    "classAddMethod",
    "continue",
    "eq",
    "ge",
    "get",
    "gt",
    "ifIs",
    "ifNot",
    "ifSwitch",
    "ifValue",
    "ifValueOr",
    "ifValues",
    "le",
    "loadModule",
    "loadResource",
    "loop",
    "lt",
    "makeData",
    "makeDerivedDataClass",
    "makeList",
    "makeValueMap",
    "maybeValue",
    "ne",
    "perEq",
    "perGe",
    "perGt",
    "perLe",
    "perLt",
    "perNe",
    "return",
    "totalNe"
];

## Module-scoped names.
def MOD_NAMES = [
    {mod: "Format",     name: "formatterFor"},
    {mod: "Format",     name: "usual"},
    {mod: "Generator",  name: "filterAll"},
    {mod: "Generator",  name: "filterPump"},
    {mod: "Generator",  name: "makeRepeatGenerator"},
    {mod: "Generator",  name: "makeFilterGenerator"},
    {mod: "Peg",        name: "any"},
    {mod: "Peg",        name: "empty"},
    {mod: "Peg",        name: "makeChoice"},
    {mod: "Peg",        name: "makeCode"},
    {mod: "Peg",        name: "makeLookaheadFailure"},
    {mod: "Peg",        name: "makeLookaheadSuccess"},
    {mod: "Peg",        name: "makeMainSequence"},
    {mod: "Peg",        name: "makeParserThunk"},
    {mod: "Peg",        name: "makeRepeat"},
    {mod: "Peg",        name: "makeResult"},
    {mod: "Peg",        name: "makeSequence"},
    {mod: "Peg",        name: "makeString"},
    {mod: "Peg",        name: "makeToken"},
    {mod: "Peg",        name: "makeTokenSet"},
    {mod: "Peg",        name: "makeTokenSetComplement"},
    {mod: "Range",      name: "makeExclusiveRange"},
    {mod: "Range",      name: "makeInclusiveRange"},
    {mod: "Range",      name: "makeOpenRange"},
    {mod: "Sequence",   name: "reverseNth"},
    {mod: "Sequence",   name: "sliceGeneral"}
];

## Used in `MOD_NAMES` processing.
def REF_get = makeVarFetch("get");


##
## Exported Definitions
##

## Documented in spec.
export def REFS = cat(
    (filterAll(SELECTORS) { name ->
        {cat("SEL_", name): makeSelector(name)}
    })*,

    (filterAll(NAMES) { name ->
        {(name): makeVarFetch(name)}
    })*,

    (filterAll(MOD_NAMES) { modName ->
        def mod = modName::mod;
        def name = modName::name;
        def modVar = makeVarFetch(cat("$", mod));
        def refKey = cat(mod, "_", name);
        {(refKey): makeCall(REF_get, modVar, makeLiteral(name))}
    })*
);
