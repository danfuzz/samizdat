## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#= language core.Lang0

import core.Format;
import core.Generator :: filterAll;
import proto.Collection :: keyList;

import ./constructors1 :: makeExport;
import ./getters :: *;


##
## Private Definitions
##

## Calls the given `resolveFn` on the indicated `source`. Complains if the
## result is void. If the result is non-void, validate that it is a `@module`.
fn resolveAndCheck(resolveFn, source) {
    return ifValue { resolveFn(source) }
        { result ->
            ifNot { hasClass(result, @@module) }
                { die("Invalid resolution result (not a `@module`)") };
            result
        }
        { die("Could not resolve import: ", sourceString(source)) }
};

## Gets a printable human string form for the given `source`. This is
## intentionally more verbose than the equivalent (internal) function
## in `core.ModuleSystem`.
fn sourceString(source) {
    ifIs { hasClass(source, @@internal) }
        { return cat("internal ./", source::name) };
    ifIs { hasClass(source, @@external) }
        { return cat("external ", source::name) };

    return cat("weird source ", $Format::source(source))
};


##
## Exported Definitions
##

## Documented in spec.
export fn resolveImport(node, resolveFn) {
    return ifSwitch(
        { get_class(node) },
        {
            @@importModule: { . ->
                ## No need to modify, just validate.
                resolveAndCheck(resolveFn, node::source);
                node
            },

            @@importModuleSelection: { . ->
                ## We need to inspect the resolved innards, so keep the resolved value
                ## (unlike the other related functions).
                def resolved = resolveAndCheck(resolveFn, node::source);

                ## Get the `info::exports` out of the resolved result. Default to `{}`
                ## if not present.
                def info = ifValueOr { resolved::info } { {} };
                def exports = ifValueOr { info::exports } { {} };

                ifValue { get_select(node) }
                    { select ->
                        ## Explicit selection, so no need to return a modified result.
                        ## Just validate that all selected names are available for import.
                        filterAll(select) { one ->
                            ifNot { get(exports, one) }
                                {
                                    die("Could not resolve import: ",
                                        sourceString(node::source), " :: ",
                                        one)
                                }
                        };
                        node
                    }
                    {
                        ## It's a wildcard import, so return a modified node that lists
                        ## all the exported names.
                        def select = keyList(exports);
                        @importModuleSelection{dataOf(node)*, select}
                    }
            },

            @@importResource: { . ->
                ## No need to modify, just validate. TODO: Validate.
                node
            }
        })
};

## Documented in spec.
export fn withResolvedImports(node, resolveFn) {
    def rawStatements = get_statements(node);

    def converted = filterAll(rawStatements) { s /out ->
        var exported = false;
        var defNode = s;
        ifIs { hasClass(s, @@export) }
            {
                exported := true;
                defNode := s::value
            };

        ifValueOr
            { hasClass(defNode, @@importModule) }
            { hasClass(defNode, @@importModuleSelection) }
            { hasClass(defNode, @@importResource) }
            {
                ## Not an `import*` node.
                yield /out s
            };

        def resolved = resolveImport(defNode, resolveFn);

        yield ifIs { eq(exported, true) }
            { makeExport(resolved) }
            { resolved }
    };

    return @(get_class(node)){dataOf(node)*, statements: [converted*]}
};
