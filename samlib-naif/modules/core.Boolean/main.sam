## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Booleans
##

#= language core.Lang0

import core.Bitwise :: *;


##
## Exported Definitions
##

## Documented in spec.
fn @@Boolean.and(other) {
    return @Boolean(and(dataOf(this), dataOf(other)))
};

## Documented in spec.
fn @@Boolean.bit(n) {
    return bit(dataOf(this), n)
};

## Documented in spec.
fn @@Boolean.bitSize() {
    return 1
};

## Documented in spec.
fn @@Boolean.not() {
    return @Boolean(xor(dataOf(this), 1))
};

## Documented in spec.
fn @@Boolean.or(other) {
    return @Boolean(or(dataOf(this), dataOf(other)))
};

## Documented in spec.
fn @@Boolean.shl(n) {
    def newValue = shl(dataOf(this), n);

    return ifValueOr { get({0: false, 1: true}, newValue) }
        { die("Undefined boolean shift result.") }
};

## Documented in spec.
fn @@Boolean.toInt() {
    return dataOf(this)
};

## Documented in spec.
fn @@Boolean.toNumber() {
    return dataOf(this)
};

## Documented in spec.
fn @@Boolean.xor(other) {
    return @Boolean(xor(dataOf(this), dataOf(other)))
};
