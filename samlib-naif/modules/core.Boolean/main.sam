## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Booleans
##

def Bitwise = moduleLoad(["core", "Bitwise"]);


##
## Exported Definitions
##

## Documented in spec.
fn Boolean_and(bool1, bool2) {
    <> @Boolean(Bitwise::and(dataOf(bool1), dataOf(bool2)))
};
genericBind(Bitwise::and, @@Boolean, Boolean_and);

## Documented in spec.
fn Boolean_bit(bool, n) {
    <> Bitwise::bit(dataOf(bool), n)
};
genericBind(Bitwise::bit, @@Boolean, Boolean_bit);

## Documented in spec.
fn Boolean_bitSize(bool) {
    <> 1
};
genericBind(Bitwise::bitSize, @@Boolean, Boolean_bitSize);

## Documented in spec.
fn Boolean_not(bool) {
    <> @Boolean(Bitwise::xor(dataOf(bool), 1))
};
genericBind(Bitwise::not, @@Boolean, Boolean_not);

## Documented in spec.
fn Boolean_or(bool1, bool2) {
    <> @Boolean(Bitwise::or(dataOf(bool1), dataOf(bool2)))
};
genericBind(Bitwise::or, @@Boolean, Boolean_or);

## Documented in spec.
fn Boolean_shl(bool, n) {
    def newValue = Bitwise::shl(dataOf(bool), n);

    <> ifValueOr { <> get({0: false, 1: true}, newValue) }
        { die("Undefined boolean shift result.") }
};
genericBind(Bitwise::shl, @@Boolean, Boolean_shl);

## Documented in spec.
fn Boolean_toInt(bool) {
    <> dataOf(bool)
};
genericBind(toInt, @@Boolean, Boolean_toInt);

## Documented in spec.
fn Boolean_toNumber(bool) {
    <> dataOf(bool)
};
genericBind(toNumber, @@Boolean, Boolean_toNumber);

## Documented in spec.
fn Boolean_xor(bool1, bool2) {
    <> @Boolean(Bitwise::xor(dataOf(bool1), dataOf(bool2)))
};
genericBind(Bitwise::xor, @@Boolean, Boolean_xor);
