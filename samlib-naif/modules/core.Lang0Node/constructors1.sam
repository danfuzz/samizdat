## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>


def $Collection = moduleLoad(["core", "Collection"]);
def $Generator  = moduleLoad(["core", "Generator"]);

##
## Exported definitions
##

## Documented in spec.
fn makeApply(function, actuals) {
    <> @apply{function, actuals}
};

## Documented in spec.
fn makeCall(function, actuals*) {
    <> @call{function, actuals}
};

## Documented in spec.
fn makeCallLiterals(function, actuals*) {
    def literals = $Generator::filterAll(actuals) { one <> makeLiteral(one) };
    <> makeCall(function, literals*)
};

## Documented in spec.
fn makeCallThunks(function, actuals*) {
    def thunks = $Generator::filterAll(actuals) { one <> makeThunk(one) };
    <> makeCall(function, thunks*)
};

## Documented in spec.
fn makeJump(function, optValue?) {
    <> ifValue { <> optValue* }
        { value <> @jump{function, value} }
        { <> @jump{function} }
};

## Documented in spec.
fn makeLiteral(value) {
    <> @literal{value}
};

## Documented in spec.
fn makeThunk(expression) {
    <> @closure{formals: [], statements: [], yield: expression}
};

## Documented in spec.
fn makeVarBind(name, value) {
    <> @varBind{name, value}
};

## Documented in spec.
fn makeVarDef(name, optValue?) {
    <> ifValue { <> optValue* }
        { value <> @varDef{name, value} }
        { <> @varDef{name} }
};

## Documented in spec.
fn makeVarDefMutable(name, optValue?) {
    <> ifValue { <> optValue* }
        { value <> @varDefMutable{name, value} }
        { <> @varDefMutable{name} }
};

## Documented in spec.
fn makeVarRef(name) {
    <> @varRef{name}
};

## Documented in spec.
fn makeVarRefLvalue(name) {
    <> @varRef{
        name,
        lvalue: { node <> makeVarBind(name, node) }
    }
};

## Documented in spec.
fn withoutBind(node) {
    <> @(get_typeName(node))($Collection::del(dataOf(node), "bind"))
};

## Documented in spec.
fn withoutInterpolate(node) {
    <> @(get_typeName(node))($Collection::del(dataOf(node), "interpolate"))
};

## Documented in spec.
fn withoutIntermediates(node) {
    def data = $Collection::del(
        $Collection::del(dataOf(node), "lvalue"),
        "interpolate");

    <> @(get_typeName(node))(data)
};

<> {
    makeApply,
    makeCall,
    makeCallLiterals,
    makeCallThunks,
    makeJump,
    makeLiteral,
    makeThunk,
    makeVarBind,
    makeVarDef,
    makeVarDefMutable,
    makeVarRef,
    makeVarRefLvalue,
    withoutBind,
    withoutIntermediates,
    withoutInterpolate
}
