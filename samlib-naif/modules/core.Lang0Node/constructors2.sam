## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#= language core.Lang0

import core.Collection;
import core.Generator;

import ./constructors1 :: *;
import ./getters :: *;
import ./refs :: REFS;


##
## Exported Definitions
##

## Documented in spec.
export fn makeCallOrApply(function, actuals*) {
    ifIs { <> perEq(actuals, []) }
        {
            ## No actuals. Easy out.
            return makeCall(function)
        };

    ## Convert the actuals as if interpolation needs to be handled. If in the
    ## end it doesn't, then the original actuals are used as-is. This converts
    ## runs of non-interpolated actuals to `makeList(ac, ac, ...)`, which
    ## converts cleanly at runtime as part of the ultimate call to `cat`.

    var pending = [];       ## Non-interpolated actuals, to be `makeList`ed.
    var cookedActuals = []; ## Fully-processed actuals (of either type).

    fn addToCooked(actual) {
        cookedActuals := [cookedActuals*, actual];
    };

    fn addPendingToCooked() {
        ifIs { <> perNe(pending, []) }
            {
                addToCooked(makeCall(REFS::makeList, pending*));
                pending := [];
            }
    };

    $Generator::filterPump(actuals) { actual ->
        ifValue { <> get_interpolate(actual) }
            { node ->
                addPendingToCooked();
                addToCooked(makeCall(REFS::collect, node))
            }
            { pending := [pending*, actual] }
    };

    ifIs { <> perEq(cookedActuals, []) }
        {
            ## There were no interpolated arguments.
            return makeCall(function, actuals*)
        };

    ## There is at least one interpolated argument.

    addPendingToCooked();

    <> ifIs { <> nth(cookedActuals, 1) }
        {
            ## More than one actual. Use `cat`.
            <> makeApply(function,
                makeCall(REFS::cat, cookedActuals*))
        }
        {
            ## Only one. Use it directly as the actuals for the `apply` node.
            <> makeApply(function, cookedActuals*)
        }
};

## Documented in spec.
export fn .makeDynamicImport();

## Documented in spec.
fn @@importModule.makeDynamicImport() {
    ## The translation is approximately `def name = loadModule(source)`.

    def name = get_name(this);
    def source = get_source(this);

    <> [makeVarDef(name,
            makeCall(REFS::loadModule, makeLiteral(source)))]
};

## Documented in spec.
fn @@importModuleSelection.makeDynamicImport() {
    ## The translation is along the same lines as for `importModule`
    ## translations, except as a list of statements, one per binding being
    ## imported, each one wrapped in a `get` call, e.g. `def name =
    ## get(load(source), "name")`.

    def source = get_source(this);
    def names = get_definedNames(this);
    def select = get_select(this);
    def loadCall = makeCall(REFS::loadModule, makeLiteral(source));

    <> $Generator::filterAll(names, select) { name, sel ->
        <> makeVarDef(name, makeCall(REFS::get, loadCall, makeLiteral(sel)))
    };
};

## Documented in spec.
fn @@importResource.makeDynamicImport() {
    ## The translation is approximately
    ## `def name = loadResource(source, format)`.

    def name = get_name(this);
    def format = get_format(this);
    def source = get_source(this);

    <> [
        makeVarDef(name,
            makeCall(REFS::loadResource,
                makeLiteral(source), makeLiteral(format)))
    ]
};

## Documented in spec.
export fn makeGet(collArg, keyArg) {
    <> makeCall(REFS::get, collArg, keyArg)
};

## Documented in spec.
export fn makeImport(baseData) {
    var data = baseData;  ## Modified in some cases below.

    ifValue { <> data::select }
        { select ->
            ## It's a module binding selection.

            ifIs { <> data::name }
                { die("Import selection name must be a prefix.") };
            ifIs { <> data::format }
                { die("Cannot import selection of resource.") };

            ifNot { <> data::prefix }
            {
                ## Default to empty string for `prefix`.
                data := {data*, prefix: ""}
            };

            ifIs { <> hasType(select, @@"*") }
                {
                    ## It's a wildcard import.
                    data := $Collection::del(data, "select");
                };

            return @importModuleSelection(data)
        };

    ifNot { <> data::name }
        {
            ## No `name` provided, so figure out a default one.
            data := {data*, name: cat("$", get_baseName(data::source))}
        };

    ifIs { <> data::format }
        {
            ## It's a resource.
            ifIs { <> hasType(data::source, @@external) }
                { die("Cannot import external resource.") };
            return @importResource(data)
        };

    ## It's a whole-module import.
    <> @importModule(data)
};

## Documented in spec.
export fn makeInfoMap(node) {
    ifValue { <> get_info(node) }
        { info -> return info };

    def statements = get_statements(node);
    var exports = {};
    var imports = {};
    var resources = {};

    ## Adds all the names (a list of strings) to the `exports` map.
    fn addToExports(names) {
        exports := {exports*, names*: Value};
    };

    ## Adds or revises an element in the `imports` map.
    fn addToImports(source, names) {
        def orig = ifValueOr { <> get(imports, source) } { <> {} };
        def revised = {orig*, names*: Value};
        imports := {imports*, (source): revised};
    };

    ## Adds or revises an element in the `resources` map.
    fn addToResources(source, format) {
        ## This bounces through a map to uniquify the formats list.
        def orig = ifValueOr { <> get(resources, source) } { <> [] };
        def revised = $Collection::keyList({orig*: null, (format): null});
        resources := {resources*, (source): revised};
    };

    ## Handles any `import*` node type. Ignores other types.
    fn handleImport(s) {
        ifIs { <> hasType(s, @@importModule) }
            { addToImports(get_source(s), [@module]) };
        ifIs { <> hasType(s, @@importModuleSelection) }
            {
                def names = ifValueOr { <> get_select(s) }
                    { die("Cannot call `makeInfoMap` on unresolved import.") };
                addToImports(get_source(s), names)
            };
        ifIs { <> hasType(s, @@importResource) }
            { addToResources(get_source(s), get_format(s)) };
    };

    ## The filter is just being used as a for-each loop. The direct
    ## result is ignored.
    $Generator::filterAll(statements) { s ->
        ifIs { <> hasType(s, @@exportSelection) }
            { addToExports(get_select(s)) };
        ifIs { <> hasType(s, @@export) }
            {
                addToExports(get_definedNames(s));
                handleImport(get_nodeValue(s))
            };
        handleImport(s)
    };

    <> {exports, imports, resources}
};

## Documented in spec.
export fn makeInterpolate(node) {
    <> @call{function: REFS::interpolate, actuals: [node], interpolate: node}
};

## Documented in spec.
export fn makeMaybeValue(node) {
    <> makeCall(REFS::maybeValue, makeThunk(node))
};

## Documented in spec.
export fn withDynamicImports(node) {
    def rawStatements = get_statements(node);

    ifIs { <> eq(rawStatements, []) }
        {
            ## Nothing to convert. Easy out!
            return node
        };

    def converted = $Generator::filterAll(rawStatements) { s /out ->
        ifValueOr
            { <> hasType(s, @@importModule) }
            { <> hasType(s, @@importModuleSelection) }
            { <> hasType(s, @@importResource) }
            {
                ## Not an `import*`.
                <out> [s]
            };

        <out> makeDynamicImport(s)
    };

    def statements = cat(converted*);
    <> @(get_type(node)){dataOf(node)*, statements}
};

## Documented in spec.
export fn withModuleDefs(node) {
    ifIs { get_yield(node) }
        { die("Invalid node for `withModuleDefs` (has `yield`).") };

    ## This is the metainformation of the module. In addition to being
    ## represented directly in the final `yield`, the (informational)
    ## `exports` in this is what's used to produce the top-level `exports`
    ## map.
    def info = makeInfoMap(node);

    def rawStatements = get_statements(node);

    ## This is a one-for-one list of replacements for the original
    ## `statements`.
    def statements = $Generator::filterAll(rawStatements) { s /out ->
        ifIs { <> hasType(s, @@exportSelection) }
            { <out> };

        <> ifIs { <> hasType(s, @@export) }
            { <> get_nodeValue(s) }
            { <> s }
    };

    ## This is a list of lists of mappings which, when combined, is a map
    ## of all exports.
    def exportValues = $Generator::filterAll(info::exports) { mapping ->
        def name = get_key(mapping);
        <> makeCall(REFS::makeValueMap, makeLiteral(name), makeVarRef(name))
    };

    def yieldExports = ifIs { <> eq(exportValues, []) }
        { <> makeLiteral({}) }
        { <> makeCall(REFS::cat, exportValues*) };
    def yieldInfo = makeLiteral(info);
    def yieldNode = makeCall(REFS::makeValue,
        makeLiteral(@@module),
        makeCall(REFS::cat,
            makeCall(REFS::makeValueMap, makeLiteral("exports"), yieldExports),
            makeCall(REFS::makeValueMap, makeLiteral("info"), yieldInfo)));

    <> @(get_type(node)){
        dataOf(node)*,
        info,
        yield: yieldNode,
        statements
    }
};

## Documented in spec.
export fn withoutTops(node) {
    def rawStatements = get_statements(node);

    ## This is a collation of all the forward declarations.
    def tops = $Generator::filterAll(rawStatements) { s ->
        def defNode = ifIs { <> hasType(s, @@export) }
            { <> get_nodeValue(s) }
            { <> s };

        <> ifIs { <> defNode::top }
            { <> makeVarDef(get_name(defNode)) }
    };

    ## These are the one-for-one replacements for the original `statements`.
    def mains = $Generator::filterAll(rawStatements) { s ->
        def defNode = ifIs { <> hasType(s, @@export) }
            { <> get_nodeValue(s) }
            { <> s };

        <> ifIs { <> defNode::top }
            { <> makeVarBind(get_name(defNode), get_nodeValue(defNode)) }
            { <> s }
    };

    ## This lists all the exported variables that were transformed above.
    def exports = $Generator::filterAll(rawStatements) { s /out ->
        ifNot { <> hasType(s, @@export) }
            { <out> };

        def defNode = get_nodeValue(s);
        ifNot { <> defNode::top }
            { <out> };

        <> get_name(defNode)
    };

    def optSelection = ifIs { <> eq(exports, []) }
        { <> [] }
        { <> [makeExportSelection(exports*)] };

    <> @(get_type(node)){
        dataOf(node)*,
        statements: [tops*, mains*, optSelection*]
    }
};

## Documented in spec.
export fn withTop(node) {
    <> @(get_type(node)){dataOf(node)*, top: true}
};
