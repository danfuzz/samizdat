## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#= language core.Lang0

import core.Collection;
import core.Generator;

import ./constructors1 ::
    makeExport;

import ./getters ::
    get_nodeValue,
    get_select,
    get_statements;


##
## Exported functions
##

## Documented in spec.
export fn .resolveImport(resolveFn);

## Documented in spec.
fn @@importModule.resolveImport(resolveFn) {
    ## No need to modify, just validate. TODO: Validate.
    <> this
};

## Documented in spec.
fn @@importModuleSelection.resolveImport(resolveFn) {
    ifIs { <> get_select(this) }
        {
            ## Explicit selection; so no need to modify, just validate.
            ## TODO: Validate.
            return this
        };

    ## TODO: In order to handle wildcard imports, this function will
    ## have to be able to ask for the list of exports from arbitrary
    ## modules. This will probably mean adding an argument for a
    ## "module oracle" of some sort.
    def select = die("TODO: wildcard selection import");

    <> @(get_type(this)){dataOf(this)*, select}
};

## Documented in spec.
fn @@importResource.resolveImport(resolveFn) {
    ## No need to modify, just validate. TODO: Validate.
    <> this
};

## Documented in spec.
export fn withResolvedImports(node, resolveFn) {
    def rawStatements = get_statements(node);

    def converted = $Generator::filterAll(rawStatements) { <out> s ->
        var exported = false;
        var defNode = s;
        ifIs { <> hasType(s, @@export) }
            {
                exported := true;
                defNode := get_nodeValue(s)
            };

        ifValueOr
            { <> hasType(defNode, @@importModule) }
            { <> hasType(defNode, @@importModuleSelection) }
            { <> hasType(defNode, @@importResource) }
            {
                ## Not an `import*` node.
                <out> s
            };

        def resolved = resolveImport(defNode, resolveFn);

        <> ifIs { <> eq(exported, true) }
            { <> makeExport(resolved) }
            { <> resolved }
    };

    <> @(get_type(node)){dataOf(node)*, statements: [converted*]}
};
