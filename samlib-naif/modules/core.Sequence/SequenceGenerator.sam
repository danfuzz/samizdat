## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `SequenceGenerator` Type
##
## Payload is `{seq: seq, index: int}`.

def $Number = moduleLoad(["proto", "Number"]);


##
## Exported Definitions
##

## Documented in spec.
fn @@SequenceGenerator.collect(optFilterFunction?) {
    ## Just use the standard implementation.
    <> Generator_stdCollect(this, optFilterFunction*)
};

## Documented in spec.
fn @@SequenceGenerator.nextValue(box) {
    def index = this::index;

    <> ifValue { <> nth(this::seq, index) }
        { value ->
            store(box, value);
            <> @SequenceGenerator{dataOf(this)*, index: $Number::add(index, 1)}
        }
        {
            ## Voided (out of elements).
            store(box)
        }
};
