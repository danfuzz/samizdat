## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Sequence functions
##

#= language core.Lang0

import proto.Number;

## Re-export. Documented in spec.
export import proto.Sequence ::
    nth,
    reverse,
    sliceExclusive,
    sliceInclusive;

## This just binds generics without adding exports.
import ./SequenceGenerator;


##
## Exported Definitions
##

## Documented in spec.
export fn nthFromEnd(seq, n) {
    def index =
        $Number::sub(get_size(seq), $Number::add(n, 1));
    <> nth(seq, index)
};

## Documented in spec.
export fn sliceGeneral(seq, style, start, optEnd?) {
    def limit = $Number::sub(get_size(seq), 1);
    def func = ifIs { <> eq(style, @exclusive) }
        { <> sliceExclusive }
        { <> sliceInclusive };
    def startIndex = ifIs { <> hasType(start, @@fromStart) }
        { <> dataOf(start) }
        { <> $Number::sub(limit, dataOf(start)) };
    def optEndIndex = (ifValue { <> optEnd* }
        { end ->
            <> ifIs { <> hasType(end, @@fromStart) }
                { <> dataOf(end) }
                { <> $Number::sub(limit, dataOf(end)) }
        })?;

    <> func(seq, startIndex, optEndIndex*)
};
