## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Sequence functions
##

#= language core.Lang0


##
## Exported Definitions
##

## Documented in spec.
export fn reverseNth(seq, n) {
    def index = seq.get_size().sub(n).sub(1);
    return? seq.nth(index)
};

## Documented in spec.
export fn sliceGeneral(seq, style, start, optEnd?) {
    def limit = seq.get_size().sub(1);
    def func = ifIs { eq(style, @exclusive) }
        { @sliceExclusive }
        { @sliceInclusive };
    def startIndex = ifIs { hasClass(start, @@fromStart) }
        { start::value }
        { limit.sub(start::value) };
    def optEndIndex = (ifValue { optEnd* }
        { end ->
            ifIs { hasClass(end, @@fromStart) }
                { end::value }
                { limit.sub(end::value) }
        })?;

    return? func(seq, startIndex, optEndIndex*)
};
