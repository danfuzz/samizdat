## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Value functions
##


##
## Exported Definitions
##

## Documented in spec.
fn ge(value, other) {
    <> ifNot { <> eq(order(value, other), -1) }
        { <> value }
};

## Documented in spec.
fn gt(value, other) {
    <> ifIs { <> eq(order(value, other), 1) }
        { <> value }
};

## Documented in spec.
fn le(value, other) {
    <> ifNot { <> eq(order(value, other), 1) }
        { <> value }
};

## Documented in spec.
fn lt(value, other) {
    <> ifIs { <> eq(order(value, other), -1) }
        { <> value }
};

## Documented in spec.
fn ne(value, other) {
    <> ifNot { <> eq(value, other) }
        { <> value }
};

## Documented in spec.
fn perGe(value, other) {
    <> ifNot { <> eq(perOrder(value, other), -1) }
        { <> value }
};

## Documented in spec.
fn perGt(value, other) {
    <> ifIs { <> eq(perOrder(value, other), 1) }
        { <> value }
};

## Documented in spec.
fn perLe(value, other) {
    <> ifNot { <> eq(perOrder(value, other), 1) }
        { <> value }
};

## Documented in spec.
fn perLt(value, other) {
    <> ifIs { <> eq(perOrder(value, other), -1) }
        { <> value }
};

## Documented in spec.
fn perNe(value, other) {
    <> ifNot { <> perEq(value, other) }
        { <> value }
};

## Documented in spec.
fn totGe(value, other) {
    <> ifNot { <> eq(totOrder(value, other), -1) }
        { <> value }
};

## Documented in spec.
fn totGt(value, other) {
    <> ifIs { <> eq(totOrder(value, other), 1) }
        { <> value }
};

## Documented in spec.
fn totLe(value, other) {
    <> ifNot { <> eq(totOrder(value, other), 1) }
        { <> value }
};

## Documented in spec.
fn totLt(value, other) {
    <> ifIs { <> eq(totOrder(value, other), -1) }
        { <> value }
};

## Documented in spec.
fn totNe(value, other) {
    <> ifNot { <> totEq(value, other) }
        { <> value }
};

<> {
    ge,
    gt,
    le,
    lt,
    ne,
    perGe,
    perGt,
    perLe,
    perLt,
    perNe,
    totGe,
    totGt,
    totLe,
    totLt,
    totNe
}
