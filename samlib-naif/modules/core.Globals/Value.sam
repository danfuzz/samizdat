## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Value functions
##

#= language core.Lang0


##
## Exported Definitions
##

## Documented in spec.
export fn ge(value, other) {
    return? ifNot { eq(order(value, other), -1) }
        { value }
};

## Documented in spec.
export fn gt(value, other) {
    return? ifIs { eq(order(value, other), 1) }
        { value }
};

## Documented in spec.
export fn le(value, other) {
    return? ifNot { eq(order(value, other), 1) }
        { value }
};

## Documented in spec.
export fn lt(value, other) {
    return? ifIs { eq(order(value, other), -1) }
        { value }
};

## Documented in spec.
export fn ne(value, other) {
    return? ifNot { eq(value, other) }
        { value }
};

## Documented in spec.
export fn perGe(value, other) {
    return? ifNot { eq(perOrder(value, other), -1) }
        { value }
};

## Documented in spec.
export fn perGt(value, other) {
    return? ifIs { eq(perOrder(value, other), 1) }
        { value }
};

## Documented in spec.
export fn perLe(value, other) {
    return? ifNot { eq(perOrder(value, other), 1) }
        { value }
};

## Documented in spec.
export fn perLt(value, other) {
    return? ifIs { eq(perOrder(value, other), -1) }
        { value }
};

## Documented in spec.
export fn perNe(value, other) {
    return? ifNot { perEq(value, other) }
        { value }
};

## Documented in spec.
export fn totalGe(value, other) {
    return? ifNot { eq(totalOrder(value, other), -1) }
        { value }
};

## Documented in spec.
export fn totalGt(value, other) {
    return? ifIs { eq(totalOrder(value, other), 1) }
        { value }
};

## Documented in spec.
export fn totalLe(value, other) {
    return? ifNot { eq(totalOrder(value, other), 1) }
        { value }
};

## Documented in spec.
export fn totalLt(value, other) {
    return? ifIs { eq(totalOrder(value, other), -1) }
        { value }
};

## Documented in spec.
export fn totalNe(value, other) {
    return? ifNot { value.totalEq(other) }
        { value }
};
