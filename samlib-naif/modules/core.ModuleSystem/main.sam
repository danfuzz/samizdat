## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Module loading mechanism
##
## **Note:** When running fully interpreted, this file is loaded three times.
## The first time is before any other in-language definitions are made;
## Notably, `null` isn't yet defined, so we manually define it early in the
## file.
##

## This directive only has an effect when the module system loads *itself*
## in a chained loader. The primordial / bootstrap module system gets loaded
## as a layer 0 file no matter what the directive says (or doesn't say).
#= language core.Lang0


## Bootstrap modules `core.Io0` and `core.Lang0`. Bindings are all as
## documented in the spec. These are set up here in order to avoid the
## infinite regress of trying to load `core.Io0` and `core.Lang0` as their own
## prerequisites.

def $Io0 = {
    cwd:           Io0_cwd,
    fileType:      Io0_fileType,
    readFileUtf8:  Io0_readFileUtf8,
    readLink:      Io0_readLink,
    writeFileUtf8: Io0_writeFileUtf8
};

def $Lang0 = {
    eval:            Lang0_eval,
    evalBinary:      Lang0_evalBinary,
    languageOf:      Lang0_languageOf,
    parseExpression: Lang0_parseExpression,
    parseProgram:    Lang0_parseProgram,
    tokenize:        Lang0_tokenize
};

def BOOTSTRAP_MODULES = {
    "core.Io0":   $Io0,
    "core.Lang0": $Lang0
};


##
## Private definitions
##

## See header comment.
def null = @Null;

## Default language module to use, when language is unspecified.
def DEFAULT_LANGUAGE = "core.Lang2";

## Set-like map of characters that are allowed in module and file components.
def VALID_COMPONENT_CHARS = {
    "_$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"*: null
};

## Gets the file name suffix of the last component of the given path.
## **Note:** This is written in a super-oddball way, because of how little
## core library is actually available at this point.
fn fileNameSuffix(path) {
    var gotDot = 0;
    var result = "";

    ## `collect` is used here as a "for-each," ignoring the collected result.
    collect(path,
        { ch ->
            ifIs { <> eq(ch, "/") }
                {
                    ## New path component.
                    gotDot := 0;
                }
                {
                    ifIs { <> eq(ch, ".") }
                        {
                            gotDot := 1;
                            result := "";
                        }
                        { result := cat(result, ch) }
                }
        });

    <> ifIs { <> eq(gotDot, 0) }
        { <> "" }
        { <> result }
};

## Validates a fully-qualified module name.
fn checkFqName(fqName) {
    ifNot { <> hasType(fqName, String) }
        { die("Invalid module name: not a string") };
    ifIs { <> eq(fqName, "") }
        { die("Invalid module name: empty string") };

    var lastCh = ".";  ## Init to `"."` to make the first check work out.

    ## `collect` is used here as a "for-each," ignoring the collected result.
    collect(fqName,
        { <next> ch ->
            ifIs { <> eq(ch, ".") }
                {
                    ifIs { <> eq(lastCh, ".") }
                        { die("Invalid module name: empty component") };
                    lastCh := ".";
                    <next>
                };
            ifNot { <> get(VALID_COMPONENT_CHARS, ch) }
                {
                    die(cat("Invalid module name: bad character \"", ch,
                        "\""));
                };
            lastCh := ch;
        });

    ifIs { <> eq(lastCh, ".") }
        { die("Invalid module name: empty component (at end)") };
};

## Helper for `checkIntraPath`: Validates a character pair.
fn checkIntraPathPair(lastCh, ch) {
    ifIs { <> eq(ch, "/") }
        {
            ifIs { <> eq(lastCh, "/") }
                { die("Invalid intra-module path: empty component") };
            ifIs { <> eq(lastCh, ".") }
                { die("Invalid intra-module path: empty suffix") };
            return;
        };

    ifIs { <> eq(ch, ".") }
        {
            ifIs { <> eq(lastCh, "/") }
                { die("Invalid intra-module path: component-initial dot") };
            ifIs { <> eq(lastCh, ".") }
                { die("Invalid intra-module path: double dot") };
            return;
        };

    ifNot { <> get(VALID_COMPONENT_CHARS, ch) }
        {
            die(cat("Invalid intra-module path: bad character \"", ch,
                "\""));
        };
};

## Validates an intra-module file path.
fn checkIntraPath(path) {
    ifNot { <> hasType(path, String) }
        { die("Invalid intra-module path: not a string") };
    ifIs { <> eq(path, "") }
        { die("Invalid intra-module path: empty string") };

    var lastCh = "/";  ## Init to `"/"` to make the first check work out.

    ## `collect` is used here as a "for-each," ignoring the collected result.
    collect(path,
        { ch ->
            checkIntraPathPair(lastCh, ch);
            lastCh := ch;
        });

    checkIntraPathPair(lastCh, "/");
};

## Validates an absolute file path string. It must be a string and start with
## `"/"`.
fn checkAbsolutePath(path) {
    ifIs { <> eq(path, "") }
        { die("Invalid file path: empty string") };
    ifNot { <> hasType(path, String) }
        { die("Invalid file path: not a string") };
    ifNot { <> eq(get(path, 0), "/") }
        { die("Invalid file path: not absolute") }
};

## Updates a map-containing box to have the given additional / replacement
## binding.
fn updateMapBox(box, key, value) {
    def newMap = { fetch(box)*, (key): value };
    store(box, newMap)
};


##
## Generic functions
##

## Documented in spec.
export fn .moduleLoad(fqName);

## Documented in spec.
export fn .intraLoad(path);
export fn .intraReadUtf8(path);
export fn .intraType(path);


##
## Type Definition: `ModuleLoader`
##
## Payload:
## * `next` -- next `ModuleLoader` to check when trying to find a module
## * `basePath` -- absolute path prefix for all loading, with trailing `/`.
##   Direct subdirectory names correspond to modules.
## * `globals` -- global variable environment to use when loading
## * `loadedBox` -- map from partial paths to the results of loading
##
## TODO: This should be an opaque type.
##

## Helper for `moduleLoad` which does the actual loading.
fn doModuleLoad(md, fqName) {
    def modulePath = cat(md::basePath, fqName);

    <> ifIs { <> eq($Io0::fileType(modulePath)?, ["directory"]) }
        {
            note(cat("    ", fqName));
            def loader = makeIntraLoader(modulePath, md::globals, md);

            ## A successful void module load result gets silently transformed
            ## to the empty map.
            def result = ifValueOr { <> intraLoadMain(loader) }
                { <> {} };

            note("        Done.");
            <> result
        }
};

## Documented in spec.
fn @@ModuleLoader.moduleLoad(fqName) {
    checkFqName(fqName);
    def loadedBox = this::loadedBox;

    ## The loaded map maps paths to `"loading"` for a load-in-progress
    ## and to `[result]` for a successfully-loaded result.

    ifValue { <> get(fetch(loadedBox), fqName) }
        { found ->
            ifIs { <> eq(found, "loading") }
                { die(cat("Module load loop: ", fqName)) };
            return found*
        };

    updateMapBox(loadedBox, fqName, "loading");

    def result = ifValueOr { <> doModuleLoad(this, fqName) }
        { <> moduleLoad(this::next, fqName) };

    updateMapBox(loadedBox, fqName, [result]);
    <> result
};

## Documented in spec.
fn @@Null.moduleLoad(fqName) {
    checkFqName(fqName);
    <> ifValueOr { <> get(BOOTSTRAP_MODULES, fqName) }
        { die(cat("Module not found: ", fqName)) }
};

## Documented in spec.
export fn makeModuleLoader(path, globals, nextModuleLoader) {
    checkAbsolutePath(path);

    ## Check for existence and directoriness.
    def pathType = $Io0::fileType(path)?;
    ifIs { <> eq(pathType, []) }
        {
            ## No such file or directory.
            return nextModuleLoader
        };
    ifNot { <> eq(pathType*, "directory") }
        {
            die(cat("Module loader path exists but is not a directory: ",
                path))
        };

    <> @ModuleLoader{
        basePath: cat(path, "/"),
        globals,
        next: nextModuleLoader,
        loadedBox: Box_makeCell({})
    }
};


##
## Type Definition: `IntraLoader`
##
## Payload:
## * `moduleLoader` -- module loader
## * `basePath` -- absolute path prefix for all loading, with trailing `/`
## * `globals` -- global variable environment to use when loading
## * `loadedBox` -- map from partial paths to the results of loading
##
## TODO: This should be an opaque type.
##

## Convenient helper which just loads a top-level `main`.
fn intraLoadMain(loader) {
    <> intraLoad(loader, "main")
};

## Helper for `intraLoad` which does the actual loading.
fn doIntraLoad(il, path) {
    note(cat("        ", path));

    def pathPrefix = cat(il::basePath, path);
    def binPath = cat(pathPrefix, ".samb");

    ifIs { <> eq($Io0::fileType(binPath)?, ["file"]) }
        {
            def func = $Lang0::evalBinary(il::globals, binPath);
            return func()
        };

    def sourcePath = cat(pathPrefix, ".sam");
    ifIs { <> eq($Io0::fileType(sourcePath)?, ["file"]) }
        {
            def text = $Io0::readFileUtf8(sourcePath);
            def languageName = ifValueOr { <> $Lang0::languageOf(text) }
                { <> DEFAULT_LANGUAGE };
            def lang = moduleLoad(il::moduleLoader, languageName);
            def tree = lang::parseProgram(text);
            def func = lang::eval(il::globals, tree);
            return func()
        };

    die(cat("Missing code: ", sourcePath));
};

## Documented in spec.
fn @@IntraLoader.intraType(path) {
    checkIntraPath(path);
    def fullPath = cat(this::basePath, path);
    <> $Io0::fileType(fullPath)
};

## Documented in spec.
fn @@IntraLoader.intraLoad(path) {
    checkIntraPath(path);
    def loadedBox = this::loadedBox;

    ## Local loads are allowed to return void, so we track a list of
    ## the result. That is, a void return ends up being `[]`.

    ifValue { <> get(fetch(loadedBox), path) }
        { found -> return found* };

    def optResult = doIntraLoad(this, path)?;
    updateMapBox(loadedBox, path, optResult);
    <> optResult*
};

## Documented in spec.
fn @@IntraLoader.intraReadUtf8(path) {
    checkIntraPath(path);
    def fullPath = cat(this::basePath, path);

    ifNot { <> eq($Io0::fileType(fullPath)?, ["file"]) }
        { die(cat("Missing resource: ", fullPath)) };

    <> $Io0::readFileUtf8(fullPath)
};

## Documented in spec.
export fn makeIntraLoader(path, globals, nextModuleLoader) {
    checkAbsolutePath(path);
    def basePath = cat(path, "/");
    def modulesDir = cat(basePath, "modules");
    def moduleLoader = makeModuleLoader(modulesDir, globals, nextModuleLoader);

    ## Forward declaration, for recursive references in the `module_*`
    ## functions immediately below.
    def result;

    fn module_intraLoad(path)     { <> intraLoad(result, path)          };
    fn module_intraReadUtf8(path) { <> intraReadUtf8(result, path)      };
    fn module_intraType(path)     { <> intraType(result, path)          };
    fn module_moduleLoad(fqName)  { <> moduleLoad(moduleLoader, fqName) };
    fn module_moduleLoader()      { <> moduleLoader                     };

    def fullGlobals = {
        globals*,
        intraLoad:     module_intraLoad,
        intraReadUtf8: module_intraReadUtf8,
        intraType:     module_intraType,
        moduleLoad:    module_moduleLoad,
        moduleLoader:  module_moduleLoader
    };

    result := @IntraLoader{
        basePath,
        moduleLoader,
        globals: fullGlobals,
        loadedBox: Box_makeCell({})
    };

    <> result
};


##
## Private Definitions: Single-file running
##

## Makes a global environment sufficient for evaluating a single file.
fn makeFileGlobals(moduleLoader) {
    fn file_moduleLoad(fqName) { <> moduleLoad(moduleLoader, fqName) };
    fn file_moduleLoader()     { <> moduleLoader                     };

    <> {
        ## The standard global environment.
        moduleLoad(moduleLoader, "core.Globals")::fullEnvironment()*,

        moduleLoad:   file_moduleLoad,
        moduleLoader: file_moduleLoader
    }
};

## Runs a program which has been `eval`ed. This works for both text and
## binary programs. This calls the given `programFunc`. If it returns
## a map that binds `main`, then this in turn calls that `main`, returning
## whatever that does. If not, this returns whatever the original function
## call returned (including void).
fn runProgram(programFunc, args) {
    def optResult = programFunc()?;

    ifIs { <> eq(optResult, []) }
        { return };

    def result = optResult*;

    ifIs { <> hasType(result, Map) }
        {
            ifValue { <> result::main }
                { main -> return main(args*) }
        };

    return result;
};

## Helper for `runFile`, which handles program text.
fn runTextFile(path, moduleLoader, args) {
    def globals = makeFileGlobals(moduleLoader);
    def text = $Io0::readFileUtf8(path);
    def languageName = ifValueOr { <> $Lang0::languageOf(text) }
        { <> DEFAULT_LANGUAGE };
    def lang = moduleLoad(moduleLoader, languageName);
    def tree = lang::parseProgram(text);
    def func = lang::eval(globals, tree);

    <> runProgram(func, args)
};

## Helper for `runFile`, which handles binaries.
fn runBinaryFile(path, moduleLoader, args) {
    def globals = makeFileGlobals(moduleLoader);
    def func = $Lang0::evalBinary(globals, path);

    <> runProgram(func, args)
};


##
## Exported Definitions
##

## Documented in spec.
export fn main(libraryPath, primitiveGlobals) {
    def loader = makeIntraLoader(libraryPath, primitiveGlobals, null);
    def mainModule = intraLoadMain(loader);
    def mainFunction = mainModule::main;
    <> mainModule::main(libraryPath, primitiveGlobals)
};

## Documented in spec.
export fn run(path, moduleLoader, args*) {
    def globals = moduleLoad(moduleLoader, "core.Globals")::fullEnvironment();
    def loader = makeIntraLoader(path, globals, moduleLoader);
    def optMainModule = intraLoadMain(loader)?;

    ifIs { <> eq(optMainModule, []) }
        { die("No exports from module's `main`.") };

    def mainModule = optMainModule*;

    ifNot { <> hasType(mainModule, Map) }
        { die("Non-map export from module's `main`.") };

    def optMain = mainModule::main?;

    ifIs { <> eq(optMain, []) }
        { die("No `main` export from module's `main`.") };

    <> (optMain*)(args*)
};

## Documented in spec.
export fn runFile(path, moduleLoader, args*) {
    def suffix = fileNameSuffix(path);

    ifIs { <> eq(suffix, "sam") }
        { return runTextFile(path, moduleLoader, args) };

    ifIs { <> eq(suffix, "samb") }
        { return runBinaryFile(path, moduleLoader, args) };

    die(cat("Unknown file name suffix: ", suffix))
};
