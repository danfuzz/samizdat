## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Module loading mechanism
##
## **Note:** When running fully interpreted, this file is loaded twice. The
## first time is before any other in-language definitions are made.
##

#= language core.Lang0


## Bootstrap modules `core.Io0` and `core.Lang0`. Bindings are all as
## documented in the spec. These are set up here in order to avoid the
## infinite regress of trying to load `core.Io0` and `core.Lang0` as their own
## prerequisites.

def $Io0 = {
    cwd:           Io0_cwd,
    fileType:      Io0_fileType,
    readFileUtf8:  Io0_readFileUtf8,
    readLink:      Io0_readLink,
    writeFileUtf8: Io0_writeFileUtf8
};

def $Lang0 = {
    eval:            Lang0_eval,
    evalBinary:      Lang0_evalBinary,
    languageOf:      Lang0_languageOf,
    parseExpression: Lang0_parseExpression,
    parseProgram:    Lang0_parseProgram,
    tokenize:        Lang0_tokenize
};

def BOOTSTRAP_MODULES = {
    ["core", "Io0"]:   $Io0,
    ["core", "Lang0"]: $Lang0
};


##
## Private definitions
##

## Default language module to use, when language is unspecified.
def DEFAULT_LANGUAGE = ["core", "Lang2"];

## Set-like map of characters that are not allowed in module components.
def INVALID_MODULE_CHARS = {[".", "/", "\0"]*: @Null};

## Helper for `flattenModulePath`, which processes a single component. It
## rejects empty components and components with dots, slashes, or null
## characters (`\0`) in them. It returns the component prefixed with `.`
## on success.
fn flattenModuleComponent(component) {
    ifIs { <> eq(component, "") }
        { die("Invalid module path component: empty string") };
    ifNot { <> hasType(component, String) }
        { die("Invalid module path component: not a string") };

    ## `collect` is used here as a "for each," ignoring the collected result.
    collect(component,
        { ch ->
            ifIs { <> get(INVALID_MODULE_CHARS, ch) }
                { die("Invalid character in module path component.") }
        });

    <> cat(".", component)
};

## Flattens a module path (list of component names) to a simple string, which
## corresponds to both the "human" name of the module and the directory name
## that the module could be found in.
fn flattenModulePath(name) {
    ifIs { <> eq(name, []) }
        { die("Invalid module path: empty list") };
    ifNot { <> hasType(name, List) }
        { die("Invalid module path: not a list") };

    ## Validate each component, prefixing them with `.`. Concatenate them all
    ## together, and drop the leading `.`.
    def withDots = collect(name, flattenModuleComponent);
    <> Sequence_sliceInclusive(cat(withDots*), 1)
};

## Splits a module name string into a list of component names. Does very
## little error checking.
fn splitModuleName(name) {
    ifIs { <> eq(name, "") }
        { die("Invalid module name: empty string") };
    ifNot { <> hasType(name, String) }
        { die("Invalid module name: not a string") };

    var result = [];
    var current = "";

    ## This uses `collect` just for the filter function, ignoring the
    ## collected result.
    collect(name, { ch ->
        ifIs { <> eq(ch, ".") }
            {
                result := [result*, current];
                current := ""
            }
            { current := cat(current, ch) }
    });

    <> [result*, current]
};

## Validates an absolute file path string. It must be a string and start with
## `"/"`.
fn checkAbsolutePath(path) {
    ifIs { <> eq(path, "") }
        { die("Invalid file path: empty string") };
    ifNot { <> hasType(path, String) }
        { die("Invalid file path: not a string") };
    ifNot { <> eq(get(path, 0), "/") }
        { die("Invalid file path: not absolute") }
};

## Updates a map-containing box to have the given additional / replacement
## binding.
fn updateMapBox(box, key, value) {
    def newMap = { fetch(box)*, (key): value };
    store(box, newMap)
};


##
## Generic functions
##

## Documented in spec.
export fn .moduleLoad(path);

## Documented in spec.
export fn .intraLoad(path);
export fn .intraReadUtf8(path);
export fn .intraType(path);


##
## Type Definition: `ModuleLoader`
##
## Payload:
## * `next` -- next `ModuleLoader` to check when trying to find a module
## * `basePath` -- absolute path prefix for all loading, with trailing `/`.
##   Direct subdirectory names correspond to modules.
## * `globals` -- global variable environment to use when loading
## * `loadedBox` -- map from partial paths to the results of loading
##
## TODO: This should be an opaque type.
##

## Helper for `moduleLoad` which does the actual loading.
fn doModuleLoad(md, dotName) {
    def modulePath = cat(md::basePath, dotName);

    <> ifIs { <> eq($Io0::fileType(modulePath)?, ["directory"]) }
        {
            note(cat("    ", dotName));
            def loader = makeIntraLoader(modulePath, md::globals, md);

            ## A successful void module load result gets silently transformed
            ## to the empty map.
            def result = ifValueOr { <> intraLoadMain(loader) }
                { <> {} };

            note("        Done.");
            <> result
        }
};

## Documented in spec.
fn @@ModuleLoader.moduleLoad(path) {
    def loadedBox = this::loadedBox;
    def dotName = flattenModulePath(path);

    ## The loaded map maps paths to `"loading"` for a load-in-progress
    ## and to `[result]` for a successfully-loaded result.

    ifValue { <> get(fetch(loadedBox), dotName) }
        { found ->
            ifIs { <> eq(found, "loading") }
                { die(cat("Module load loop: ", dotName)) };
            return found*
        };

    updateMapBox(loadedBox, dotName, "loading");

    def result = ifValueOr { <> doModuleLoad(this, dotName) }
        { <> moduleLoad(this::next, path) };

    updateMapBox(loadedBox, dotName, [result]);
    <> result
};

## Documented in spec.
fn @@Null.moduleLoad(path) {
    <> ifValueOr { <> get(BOOTSTRAP_MODULES, path) }
        { die(cat("Module not found: ", flattenModulePath(path))) }
};

## Documented in spec.
export fn makeModuleLoader(path, globals, nextModuleLoader) {
    checkAbsolutePath(path);
    def basePath = cat(path, "/");

    <> @ModuleLoader{
        basePath,
        globals,
        next: nextModuleLoader,
        loadedBox: Box_makeCell({})
    }
};


##
## Type Definition: `IntraLoader`
##
## Payload:
## * `moduleLoader` -- module loader
## * `basePath` -- absolute path prefix for all loading, with trailing `/`
## * `globals` -- global variable environment to use when loading
## * `loadedBox` -- map from partial paths to the results of loading
##
## TODO: This should be an opaque type.
##

## Convenient helper which just loads a top-level `main`.
fn intraLoadMain(loader) {
    <> intraLoad(loader, "main")
};

## Helper for `intraLoad` which does the actual loading.
fn doIntraLoad(il, path) {
    note(cat("        ", path));

    def pathPrefix = cat(il::basePath, path);
    def binPath = cat(pathPrefix, ".samb");

    ifIs { <> eq($Io0::fileType(binPath)?, ["file"]) }
        {
            def func = $Lang0::evalBinary(il::globals, binPath);
            return func()
        };

    def sourcePath = cat(pathPrefix, ".sam");
    ifIs { <> eq($Io0::fileType(sourcePath)?, ["file"]) }
        {
            def text = $Io0::readFileUtf8(sourcePath);
            def languageName = ifValue { <> $Lang0::languageOf(text) }
                { name <> splitModuleName(name) }
                { <> DEFAULT_LANGUAGE };
            def lang = moduleLoad(il::moduleLoader, languageName);
            def tree = lang::parseProgram(text);
            def func = lang::eval(il::globals, tree);
            return func()
        };

    die(cat("Missing code: ", sourcePath));
};

## Documented in spec.
fn @@IntraLoader.intraType(path) {
    def fullPath = cat(this::basePath, path);
    <> $Io0::fileType(fullPath)
};

## Documented in spec.
fn @@IntraLoader.intraLoad(path) {
    def loadedBox = this::loadedBox;

    ## Local loads are allowed to return void, so we track a list of
    ## the result. That is, a void return ends up being `[]`.

    ifValue { <> get(fetch(loadedBox), path) }
        { found -> return found* };

    def optResult = doIntraLoad(this, path)?;
    updateMapBox(loadedBox, path, optResult);
    <> optResult*
};

## Documented in spec.
fn @@IntraLoader.intraReadUtf8(path) {
    def fullPath = cat(this::basePath, path);

    ifNot { <> eq($Io0::fileType(fullPath)?, ["file"]) }
        { die(cat("Missing resource: ", fullPath)) };

    <> $Io0::readFileUtf8(fullPath)
};

## Documented in spec.
export fn makeIntraLoader(path, globals, nextModuleLoader) {
    checkAbsolutePath(path);
    def basePath = cat(path, "/");
    def modulesDir = cat(basePath, "modules");
    def moduleLoader = makeModuleLoader(modulesDir, globals, nextModuleLoader);

    ## Forward declaration, for recursive references in the `module_*`
    ## functions immediately below.
    def result;

    fn module_intraLoad(path)     { <> intraLoad(result, path)        };
    fn module_intraReadUtf8(path) { <> intraReadUtf8(result, path)    };
    fn module_intraType(path)     { <> intraType(result, path)        };
    fn module_moduleLoad(path)    { <> moduleLoad(moduleLoader, path) };
    fn module_moduleLoader()      { <> moduleLoader                   };

    def fullGlobals = {
        globals*,
        intraLoad:     module_intraLoad,
        intraReadUtf8: module_intraReadUtf8,
        intraType:     module_intraType,
        moduleLoad:    module_moduleLoad,
        moduleLoader:  module_moduleLoader
    };

    result := @IntraLoader{
        basePath,
        moduleLoader,
        globals: fullGlobals,
        loadedBox: Box_makeCell({})
    };

    <> result
};


##
## Exported Definitions
##

## Documented in spec.
export fn run(path, globals, moduleLoader, args*) {
    def loader = makeIntraLoader(path, globals, moduleLoader);
    def optMainModule = intraLoadMain(loader)?;

    ifIs { <> eq(optMainModule, []) }
        { die("No exports from module's `main`.") };

    def mainModule = optMainModule*;

    ifNot { <> hasType(mainModule, Map) }
        { die("Non-map export from module's `main`.") };

    def optMain = mainModule::main?;

    ifIs { <> eq(optMain, []) }
        { die("No `main` export from module's `main`.") };

    <> (optMain*)(args*)
};
