## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `ParaGenerator` Type
##
## Payload is `[subGens*]`, a list of sub-generators.

def Box        = moduleLoad(["core", "Box"]);
def Collection = moduleLoad(["core", "Collection"]);
def Sequence   = moduleLoad(["core", "Sequence"]);

def ListWrapGenerator = localLoad(["ListWrapGenerator"]);
def NullGenerator     = localLoad(["NullGenerator"]);


##
## Exported Definitions
##

## Documented in spec.
fn makeParaGenerator(generators*) {
    ## Return the `nullGenerator` if we weren't passed any arguments.
    ifIs { <> eq(generators, []) }
        { return NullGenerator::nullGenerator };

    ## Return a `ListWrapGenerator` if we were only passed one argument.
    ## This saves some overhead.
    ifIs { <> eq(Collection::sizeOf(generators), 1) }
        { return ListWrapGenerator::makeListWrapGenerator(generators*) };

    <> @ParaGenerator(generators)
};

## Documented in spec.
fn ParaGenerator_nextValue(gen, box) {
    def subGens = dataOf(gen);

    ifIs { <> eq(subGens, []) }
        { return nextValue(Box::nullBox, box) };

    def generatorCalls = collect(
        subGens,
        { gen ->
            def innerBox = Box::makePromise();
            <> ifValue { <> nextValue(gen, innerBox) }
                { nextGenerator <> [Box::fetch(innerBox), nextGenerator] }
                {
                    ## One of the sub-generators became voided.
                    Box::store(box);
                    return
                }
        });

    def yields = collect(generatorCalls,
        { one <> Sequence::nth(one, 0) });
    def nexts = collect(generatorCalls,
        { one <> Sequence::nth(one, 1) });

    Box::store(box, yields);
    <> @ParaGenerator(nexts)
};
genericBind(nextValue, @@ParaGenerator, ParaGenerator_nextValue);

## Just use the standard implementation.
genericBind(collect, @@ParaGenerator, Generator_stdCollect);

<> {
    makeParaGenerator
}
