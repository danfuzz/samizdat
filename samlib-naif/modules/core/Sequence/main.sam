## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Sequence functions
##

def Sequence = moduleUse({name: ["proto", "Sequence"]});

## This just binds generics without adding exports.
submoduleUse("SequenceGenerator");


##
## Exported Definitions
##

## Documented in spec.
fn nthFromEnd(seq, n) {
    def index =
        Number::sub(Collection::sizeOf(seq), Number::add(n, 1));
    <> Sequence::nth(seq, index)
};

## Documented in spec.
fn sliceGeneral(seq, style, start, optEnd?) {
    def limit = Number::sub(Collection::sizeOf(seq), 1);
    def func = ifIs { <> eq(style, @exclusive) }
        { <> Sequence::sliceExclusive }
        { <> Sequence::sliceInclusive };
    def startIndex = ifIs { <> hasType(start, @@fromStart) }
        { <> dataOf(start) }
        { <> Number::sub(limit, dataOf(start)) };
    def optEndIndex = (ifValue { <> optEnd* }
        { end ->
            <> ifIs { <> hasType(end, @@fromStart) }
                { <> dataOf(end) }
                { <> Number::sub(limit, dataOf(end)) }
        })?;

    <> func(seq, startIndex, optEndIndex*)
};

<> {
    ## Re-exported from proto.
    nth:            Sequence::nth,
    reverse:        Sequence::reverse,
    sliceExclusive: Sequence::sliceExclusive,
    sliceInclusive: Sequence::sliceInclusive,

    ## Defined in this file.
    nthFromEnd,
    sliceGeneral
}


