## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `BasicInput` class
##

#= language core.Lang0

##
## Class Definition
##
## Payload: {tokens: generator, next: box(@{token, state})}

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

export class BasicState
        access: ACCESS,
        new: NEW {
    ## Documented in spec.
    class.new(input) {
        def tokens = ifIs { String.accepts(input) }
            {
                ## This converts generated characters into tokens with the
                ## characters as the record name.
                input.collect { ch -> @(cast(Symbol, ch)){} }
            }
            { input };

        def next;
        return this.(NEW)(@{tokens, next: next?})
    };

    ## Documented in spec.
    .applyRule(rule, box, items) {
        return? rule.parse(box, this, items)
    };

    ## Documented in spec.
    .collect(optFilterFunction?) {
        def data = this.(ACCESS)();
        return data::tokens.collect(optFilterFunction*)
    };

    ## Documented in spec.
    .fetch() {
        def data = this.(ACCESS)();
        return data::tokens.fetch()
    };

    ## Documented in spec.
    .nextValue(box) {
        def data = this.(ACCESS)();
        return? ifValue { data::next* }
            { next ->
                ## The next value was previously computed.
                box.store(next::token);
                next::state
            }
            {
                ## First time that this method is being called on this object
                ## (typical), or any time this method is being called when
                ## `tokens` is voided.
                ifValue { data::tokens.nextValue(box) }
                    { tokens ->
                        def next;
                        def state = BasicState.(NEW)(@{tokens, next: next?});
                        data::next* := @{token: box*, state};
                        state
                    }
            }
    };
};
