## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `BasicState` class
##

#= language core.Lang0

import core.Generator :: stdCollect, stdFetch;

import ./VoidState :: voidState;


##
## Class Definition
##
## Payload: {tokens: generator, next: box(@{token, state})}

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

export class BasicState
        access: ACCESS,
        new: NEW {
    ## Documented in spec.
    class.new(tokens) {
        def first;
        def rest = ifValueOr { tokens.nextValue(first?) }
            { return voidState };
        def nextState = Lazy.new { this.new(rest) };

        return this.(NEW)(@{first, nextState})
    };

    ## Documented in spec.
    .applyRule(rule, box, items) {
        return? rule.parse(box, this, items)
    };

    ## Documented in spec.
    .collect(optFilterFunction?) {
        ## Just use the standard implementation.
        return stdCollect(this, optFilterFunction*)
    };

    ## Documented in spec.
    .fetch() {
        ## Just use the standard implementation.
        return stdFetch(this)
    };

    ## Documented in spec.
    .nextValue(box) {
        def data = this.(ACCESS)();

        box.store(data::first);
        return data::nextState*
    };
};
