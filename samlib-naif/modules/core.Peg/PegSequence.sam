## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `PegSequence` class
##

#= language core.Lang0

import core.Generator :: filterPump;

import ./PegResult :: *;
import ./PegTokenSet :: *;


##
## Class Definition
##
## Payload: {rules: [rule*]}

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

export class PegSequence
        access: ACCESS,
        new: NEW {
    ## Documented in spec.
    class.new(rules*) {
        ## Trivial case: No rules. Return the empty rule.
        ifIs { eq(rules, []) }
            { return empty };

        ## Trivial case: One rule. Return that rule directly.
        ifIs { eq(rules.get_size(), 1) }
            { return rules* };

        ## The general case.
        return this.(NEW)(@{rules})
    };

    ## Documented in spec.
    class.newString(string) {
        def resultType = cast(Symbol, string);

        ## Trivial case: Empty string. Return an always-successful yield of `@""`.
        ifIs { eq(string, "") }
            { return PegResult.new(@""{}) };

        ## Trivial case: One-char string. Return a simple one-char rule.
        ifIs { eq(string.get_size(), 1) }
            { return PegTokenSet.new(resultType) };

        ## This is implemented as, in effect, `(@"1" @"2" ... { string })`,
        ## which allows us to minimize code duplication.

        ## Make a list of rules per character.
        def chars = string.collect { ch -> PegTokenSet.new(cast(Symbol, ch)) };

        return this.new(chars*, PegResult.new(@(resultType){}))
    };

    ## Documented in spec.
    .parse(box, input, items*) {
        ## Each rule after the first gets passed as additional arguments
        ## the matched results of all the previous rules, in order.

        def data = this.(ACCESS)();
        var remainingInput = input;
        var results = items;  ## Includes initial items and each parsed value.
        var result = null;

        ## This is akin to `for (rule in data::rules) { ... }`.
        filterPump(data::rules) { rule ->
            ifValue { rule.parse(result?, remainingInput, results*) }
                { newInput ->
                    remainingInput := newInput;
                    results := [results*, result]
                }
                {
                    ## Propagate the failure.
                    return
                }
        };

        box* := result;
        return remainingInput
    };
};
