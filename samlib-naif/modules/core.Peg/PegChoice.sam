## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `PegChoice` class
##

#= language core.Lang0

import core.Generator :: filterPump;

import ./PegFail :: fail;


##
## Class Definition
##
## Payload: {rules: [rule*]}

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

export class PegChoice
        access: ACCESS,
        new: NEW {
    ## Documented in spec.
    class.new(rules*) {
        ## Trivial case: No rules. Return the failure rule.
        ifIs { eq(rules, []) }
            { return fail };

        ## Trivial case: One rule. Return that rule directly.
        ifIs { eq(rules.get_size(), 1) }
            { return rules* };

        ## The general case.
        return this.(NEW)(@{rules})
    };

    ## Documented in spec.
    .parse(state) {
        def data = this.(ACCESS)();
        filterPump(data::rules) { rule ->
            ifValue { state.applyRule(rule) }
                { newState -> return newState }
        };

        ## No rule succeeded.
        return
    };
};
