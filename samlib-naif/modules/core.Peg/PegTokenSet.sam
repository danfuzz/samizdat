## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `PegTokenSet` class
##

#= language core.Lang0

import ./PegFail :: fail;


##
## Class Definition
##
## Payload: {set: {names*: null}}

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

class PegTokenSet
        access: ACCESS,
        new: NEW {
    ## Documented in spec.
    fn parse(box, input, items*) {
        def data = this.(ACCESS)();
        def result;

        return? ifValue { input.nextValue(result?) }
            { newInput ->
                ifIs { data::set.get(result.get_name()) }
                    {
                        box* := result;
                        newInput
                    }
            }
    };
};


##
## Exported Definitions
##

## Documented in spec.
export fn makeToken(name) {
    ## This just makes a single-item token set. The performance difference
    ## between that and doing a more special-case single item name check is
    ## probably negligible.

    return makeTokenSet(name)
};

## Documented in spec.
export fn makeTokenSet(names*) {
    ifIs { eq(names, []) }
        {
            ## Trivial case: Empty set, so it can never succeed in matching.
            return fail
        };

    def set = {names*: true};  ## A set-like map of all the token names.

    return PegTokenSet.(NEW)(@{set})
};
