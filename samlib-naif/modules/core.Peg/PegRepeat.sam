## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `PegRepeat` class
##

#= language core.Lang0


##
## Class Definition
##
## Payload: {rule: rule, maxSize?: int, minSize: int}

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

export class PegRepeat
        access: ACCESS,
        new: NEW {
    ## Documented in spec.
    class.new(rule, optMinSize?, optMaxSize?) {
        def minSize = ifValueOr { optMinSize* } { 0 };
        def maxMap = ifValue { optMaxSize* }
            { sz ->
                ifIs { lt(sz, minSize) }
                    { die("Invalid repeat spec: maxSize < minSize") };
                @{maxSize: sz}
            }
            { @{} };
        return this.(NEW)(@{maxMap*, minSize, rule})
    };

    ## Documented in spec.
    .parse(box, input, items) { ->
        def data = this.(ACCESS)();
        def rule = data::rule;
        var remainingInput = input;
        var results = [];  ## Values that have been parsed by the inner rule.
        var count = 0;
        var result;

        def maxCheck = ifValue { data::maxSize }
            { maxSize ->
                {
                    ifIs { count.totalEq(maxSize) }
                        {
                            ## We parsed the max repeat size. Return it.
                            box* := results;
                            return remainingInput
                        }
                }
            }
            { {->} };

        loop {
            ifValue { remainingInput.applyRule(rule, result?, items) }
                { newInput ->
                    ## Successfully parsed the inner rule.
                    remainingInput := newInput;
                    results := [results*, result];
                    count := count.add(1);
                    maxCheck()
                }
                {
                    ## Failed to parse the inner rule. Check for minimum match
                    ## count. Store result and return success if appropriate.
                    return? ifIs { totalGe(count, data::minSize) }
                        {
                            box* := results;
                            remainingInput
                        }
                }
        }
    };
};
