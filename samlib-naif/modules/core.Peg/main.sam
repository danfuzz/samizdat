## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## PEG (Parsing Expression Grammar) support
##

#= language core.Lang0

import core.Box :: makeCell, makePromise, nullBox;
import core.Generator :: filterPump, makeFilterGenerator;


##
## Type Definitions
##

## Documented in spec.
export fn .parse(box, input, items*);

## Documented in spec.
export def any = @PegAny;

## Documented in spec.
export def empty = @PegResult{value: null};

## Documented in spec.
export def eof = @PegEof;

## Documented in spec.
export def fail = @PegFail;

## Documented in spec.
fn @@PegAny.parse(box, input, .*) {
    return? nextValue(input, box)
};

## Documented in spec.
fn @@PegChoice.parse(box, input, items*) {
    filterPump(this::rules) { rule ->
        ifValue { parse(rule, box, input, items*) }
            { newInput -> return newInput }
    };

    ## No rule succeeded.
    return
};

## Documented in spec.
fn @@PegCode.parse(box, input, items*) {
    return? ifValue { this::function(items*) }
        { result ->
            store(box, result);
            input
        }
};

## Documented in spec.
fn @@PegEof.parse(box, input, .*) {
    return? ifNot { nextValue(input, nullBox) }
        {
            store(box, null);
            input
        }
};

## Documented in spec.
fn @@PegFail.parse(box, input, .*) {
    ## Do nothing, and return void.
};

## Documented in spec.
fn @@PegLookaheadFailure.parse(box, input, items*) {
    return? ifNot { parse(this::rule, nullBox, input, items*) }
        {
            store(box, null);
            input
        }
};

## Documented in spec.
fn @@PegLookaheadSuccess.parse(box, input, items*) {
    return? ifIs { parse(this::rule, box, input, items*) }
        { input }
};

## Documented in spec.
fn @@PegMain.parse(box, input, .*) {
    ## The point of this implementation is to drop the `items` context.
    return? parse(this::rule, box, input)
};

## Documented in spec.
fn @@PegRepeat.parse(box, input, items*) {
    var remainingInput = input;
    var results = [];  ## Values that have been parsed by the inner rule.

    fn doLoop() { /out ->
        def rule = this::rule;
        def innerBox = makeCell();

        def maxCheck = ifValue { this::maxSize }
            { maxSize ->
                { ->
                    ifIs { eq(get_size(results), maxSize) }
                        { yield /out }
                }
            }
            { {->} };

        loop {
            ifValue { parse(rule, innerBox, remainingInput, items*) }
                { newInput ->
                    ## Successfully parsed the inner rule.
                    remainingInput := newInput;
                    results := [results*, fetch(innerBox)];
                    maxCheck()
                }
                {
                    ## Failed to parse the inner rule.
                    yield /out
                }
        }
    };

    doLoop();

    ## Check for minimum match count. Store result and return success if
    ## appropriate.
    return? ifIs { ge(get_size(results), this::minSize) }
        {
            store(box, results);
            remainingInput
        }
};

## Documented in spec.
fn @@PegResult.parse(box, input, .*) {
    store(box, this::value);
    return input
};

## Documented in spec.
fn @@PegSequence.parse(box, input, items*) {
    ## Each rule after the first gets passed as additional arguments
    ## the matched results of all the previous rules, in order.

    def innerBox = makeCell();
    var remainingInput = input;
    var results = items;  ## Includes intial items and each parsed value.
    var lastResult = null;

    ## This is akin to `for (rule in this::rules) { ... }`.
    filterPump(this::rules) { rule ->
        ifValue { parse(rule, innerBox, remainingInput, results*) }
            { newInput ->
                remainingInput := newInput;
                lastResult := fetch(innerBox);
                results := [results*, lastResult]
            }
            {
                ## Propagate the failure.
                return
            }
    };

    store(box, lastResult);
    return remainingInput
};

## Documented in spec.
fn @@PegThunk.parse(box, input, items*) {
    return? ifValue { this::function(items*) }
        { thunkResult -> parse(thunkResult, box, input, items*) }
};

## Documented in spec.
fn @@PegTokenSet.parse(box, input, items*) {
    def innerBox = makePromise();

    return? ifValue { nextValue(input, innerBox) }
        { newInput ->
            def item = fetch(innerBox);
            ifIs { get(this::types, get_type(item)) }
                {
                    store(box, item);
                    newInput
                }
        }
};

## Documented in spec.
fn @@PegTokenSetComplement.parse(box, input, items*) {
    def innerBox = makePromise();

    return? ifValue { nextValue(input, innerBox) }
        { newInput ->
            def item = fetch(innerBox);
            ifNot { get(this::types, get_type(item)) }
                {
                    store(box, item);
                    newInput
                }
        }
};


##
## Exported Definitions
##

## Private helper for `makeCharSet*`, which takes a string and produces a
## list of token types for the characters.
fn typeListFromString(string) {
    return collect(string, { ch -> @@(ch) })
};

## Private helper for `make*Set*`, which takes a `sense` argument and
## produces the desired rule.
fn genericMakeTokenSet(sense, types) {
    def set = {types*: true};  ## A set-like map of all the token types.

    ifIs { eq(set, {}) }
        {
            ## Trivial case: Empty set. Return an appropriate absolute rule.
            return ifIs { eq(sense, true) } { fail } { any }
        };

    return ifIs { eq(sense, true) }
        { @PegTokenSet{types: set} }
        { @PegTokenSetComplement{types: set} }
};

## Documented in spec.
export fn makeResult(value) {
    return @PegResult{value}
};

## Documented in spec.
export fn makeCharSet(strings*) {
    ## Make a combined string, passing it to the general token set constructor,
    ## which then splays all the characters out as a set of map keys.
    return genericMakeTokenSet(true, typeListFromString(cat("", strings*)))
};

## Documented in spec.
export fn makeCharSetComplement(strings*) {
    ## See comment in `makeCharSet`.
    return genericMakeTokenSet(false, typeListFromString(cat("", strings*)))
};

## Documented in spec.
export fn makeChoice(rules*) {
    ## Trivial case: No rules. Return the failure rule.
    ifIs { eq(rules, []) }
        { return @PegFail };

    ## Trivial case: One rule. Return that rule directly.
    ifIs { eq(get_size(rules), 1) }
        { return rules* };

    ## The general case.
    return @PegChoice{rules}
};

## Documented in spec.
export fn makeCode(function) {
    return @PegCode{function}
};

## Documented in spec.
export fn makeLookaheadFailure(rule) {
    ## Optimiziation: Representation of `!.`.
    ifIs { eq(rule, @PegAny) }
        { return @PegEof };

    ## Optimization: Representation of `!()`.
    ifIs { eq(rule, empty) }
        { return @PegFail };

    ## The general case.
    return @PegLookaheadFailure{rule}
};

## Documented in spec.
export fn makeLookaheadSuccess(rule) {
    return @PegLookaheadSuccess{rule}
};

## Documented in spec.
export fn makeMainChoice(rules*) {
    return @PegMain{rule: makeChoice(rules*)}
};

## Documented in spec.
export fn makeMainSequence(rules*) {
    return @PegMain{rule: makeSequence(rules*)}
};

## Documented in spec.
export fn makeParserThunk(function) {
    return @PegThunk{function}
};

## Documented in spec.
export fn makeRepeat(rule, optMinSize?, optMaxSize?) {
    def minSize = ifValueOr { optMinSize* } { 0 };
    def maxMap = ifValue { optMaxSize* } { sz -> {maxSize: sz} } { {} };
    return @PegRepeat{maxMap*, minSize, rule}
};

## Documented in spec.
export fn makeSequence(rules*) {
    ## Trivial case: No rules. Return the empty rule.
    ifIs { eq(rules, []) }
        { return empty };

    ## Trivial case: One rule. Return that rule directly.
    ifIs { eq(get_size(rules), 1) }
        { return rules* };

    ## The general case.
    return @PegSequence{rules}
};

## Documented in spec.
export fn makeString(string) {
    ## Trivial case: Empty string. Return an always-successful yield of `@""`.
    ifIs { eq(string, "") }
        { return @PegResult{value: @""} };

    ## Trivial case: One-char string. Return a simple one-char rule.
    ifIs { eq(get_size(string), 1) }
        { return makeToken(@@(string)) };

    ## This is implemented as, in effect, `(@"1" @"2" ... { string })`,
    ## which allows us to minimize code duplication.

    ## Make a list of rules per character.
    def types = typeListFromString(string);
    def chars = collect(types, makeToken);

    return @PegSequence{rules: [chars*, @PegResult{value: @(@@(string))}]}
};

## Documented in spec.
export fn makeToken(type) {
    ## This is just uses a single-item token set. The performance difference
    ## between that and doing a more special-case single item type check is
    ## probably negligible.
    return makeTokenSet(type)
};

## Documented in spec.
export fn makeTokenSet(tokens*) {
    return genericMakeTokenSet(true, tokens)
};

## Documented in spec.
export fn makeTokenSetComplement(tokens*) {
    return genericMakeTokenSet(false, tokens)
};


##
## Miscellaneous functions
##

## Documented in spec.
export fn apply(rule, input) {
    def box = makePromise();
    def generator = ifIs { hasType(input, String) }
        {
            ## This converts generated characters into tokens with the
            ## characters as the type.
            makeFilterGenerator(input) { ch -> @(@@(ch)) }
        }
        { input };

    return? ifIs { parse(rule, box, generator) }
        { fetch(box) }
};

## Documented in spec.
export fn stringFromTokenList(tokens) {
    return cat("", collect(tokens, get_typeName)*)
};
