## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## PEG (Parsing Expression Grammar) support
##

#= language core.Lang0

import core.Box;
import core.Generator;
import core.Sequence;


##
## Type Definitions
##

## `peg.parse(box, input, items*)`
export fn .parse(box, input, items*);

## Documented in spec.
export def any = @PegAny;

## Documented in spec.
export def empty = @PegResult(null);

## Documented in spec.
export def eof = @PegEof;

## Documented in spec.
export def fail = @PegFail;

## Documented in spec.
fn @@PegAny.parse(box, input, .*) {
    <> nextValue(input, box)
};

## Documented in spec.
fn @@PegChoice.parse(box, input, items*) {
    $Generator::filterPump(dataOf(this)) { rule ->
        def innerBox = $Box::makePromise();
        ifValue { <> parse(rule, innerBox, input, items*) }
            { newInput ->
                store(box, fetch(innerBox));
                return newInput
            }
    };

    ## No rule succeeded.
    store(box)
};

## Documented in spec.
fn @@PegCode.parse(box, input, items*) {
    <> ifValue { <> dataOf(this)(items*) }
        { result ->
            store(box, result);
            <> input
        }
        { store(box) };
};

## Documented in spec.
fn @@PegEof.parse(box, input, .*) {
    <> ifIs { <> nextValue(input, $Box::nullBox) }
        { store(box) }
        {
            store(box, null);
            <> input
        }
};

## Documented in spec.
fn @@PegFail.parse(box, input, .*) {
    store(box)
};

## Documented in spec.
fn @@PegLookaheadFailure.parse(box, input, items*) {
    <> ifIs { <> parse(dataOf(this), $Box::nullBox, input, items*) }
        { store(box) }
        {
            store(box, null);
            <> input
        }
};

## Documented in spec.
fn @@PegLookaheadSuccess.parse(box, input, items*) {
    <> ifIs { <> parse(dataOf(this), box, input, items*) }
        { <> input }
};

## Documented in spec.
fn @@PegMain.parse(box, input, .*) {
    ## The point of this implementation is to drop the `items` context.
    <> parse(dataOf(this), box, input)
};

## Documented in spec.
fn @@PegOpt.parse(box, input, items*) {
    def innerBox = $Box::makePromise();
    <> ifValue { <> parse(dataOf(this), innerBox, input, items*) }
        { newInput ->
            store(box, [fetch(innerBox)]);
            <> newInput
        }
        {
            store(box, []);
            <> input
        }
};

## Documented in spec.
fn @@PegRepeat.parse(box, input, items*) {
    def rule = this::rule;
    var remainingInput = input;
    var results = []; ## Values that have been parsed by the inner rule.

    loop {
        def innerBox = $Box::makePromise();
        ifValue { <> parse(rule, innerBox, remainingInput, items*) }
            { newInput ->
                ## Successfully parsed the inner rule.
                remainingInput := newInput;
                results := [results*, fetch(innerBox)]
            }
            {
                ## Failed to parse the inner rule.
                ifValue { <> this::minSize }
                    { minSize ->
                        ifIs { <> lt(get_size(results), minSize) }
                            {
                                ## Did not parse minimum required count.
                                store(box);
                                return
                            }
                    };
                store(box, results);
                return remainingInput
            }
    }
};

## Documented in spec.
fn @@PegResult.parse(box, input, .*) {
    store(box, dataOf(this));
    <> input
};

## Documented in spec.
fn @@PegSequence.parse(box, input, items*) {
    ## Each rule after the first gets passed as additional arguments
    ## the matched results of all the previous rules, in order.

    var remainingInput = input;
    var results = items; ## Includes intial items and each parsed value.

    ## This is akin to `for (rule in dataOf(this)) { ... }`.
    $Generator::filterPump(dataOf(this)) { rule ->
        def innerBox = $Box::makePromise();
        ifValue { <> parse(rule, innerBox, remainingInput, results*) }
            { newInput ->
                remainingInput := newInput;
                results := [results*, fetch(innerBox)]
            }
            {
                ## Propagate the failure.
                store(box);
                return
            }
    };

    store(box, $Sequence::nthFromEnd(results, 0));
    <> remainingInput
};

## Documented in spec.
fn @@PegThunk.parse(box, input, items*) {
    <> ifValue { <> dataOf(this)(items*) }
        { thunkResult <> parse(thunkResult, box, input, items*) }
};

## Documented in spec.
fn @@PegTokenSet.parse(box, input, items*) {
    def innerBox = $Box::makePromise();

    ifValue { <> nextValue(input, innerBox) }
        { newInput ->
            def item = fetch(innerBox);
            ifIs { <> get(this, get_type(item)) }
                {
                    store(box, item);
                    return newInput
                }
        };

    ## Either EOF or no match.
    store(box);
};

## Documented in spec.
fn @@PegTokenSetComplement.parse(box, input, items*) {
    def innerBox = $Box::makePromise();

    ifValue { <> nextValue(input, innerBox) }
        { newInput ->
            def item = fetch(innerBox);
            ifNot { <> get(this, get_type(item)) }
                {
                    store(box, item);
                    return newInput
                }
        };

    ## Either EOF or no match.
    store(box);
};


##
## Exported Definitions
##

## Private helper for `makeCharSet*`, which takes a string and produces a
## list of token types for the characters.
fn typeListFromString(string) {
    <> collect(string, { ch <> @@(ch) })
};

## Private helper for `make*Set*`, which takes a `sense` argument and
## produces the desired rule.
fn genericMakeTokenSet(sense, types) {
    def set = {types*: true}; ## A set-like map of all the token types.

    ifIs { <> eq(set, {}) }
        {
            ## Trivial case: Empty set. Return an appropriate absolute rule.
            return ifIs { <> eq(sense, true) }
                { <> fail }
                { <> any }
        };

    <> ifIs { <> eq(sense, true) }
        { <> @PegTokenSet(set) }
        { <> @PegTokenSetComplement(set) }
};

## Documented in spec.
export fn makeResult(value) {
    <> @PegResult(value)
};

## Documented in spec.
export fn makeCharSet(strings*) {
    ## Make a combined string, passing it to the general token set constructor,
    ## which then splays all the characters out as a set of map keys.
    <> genericMakeTokenSet(true, typeListFromString(cat("", strings*)))
};

## Documented in spec.
export fn makeCharSetComplement(strings*) {
    ## See comment in `makeCharSet`.
    <> genericMakeTokenSet(false, typeListFromString(cat("", strings*)))
};

## Documented in spec.
export fn makeChoice(rules*) {
    ## Trivial case: No rules. Return the failure rule.
    ifIs { <> eq(rules, []) }
        { return @PegFail };

    ## Trivial case: One rule. Return that rule directly.
    ifIs { <> eq(get_size(rules), 1) }
        { return rules* };

    ## The general case.
    <> @PegChoice(rules)
};

## Documented in spec.
export fn makeCode(function) {
    <> @PegCode(function)
};

## Documented in spec.
export fn makeLookaheadFailure(rule) {
    ## Optimiziation: Representation of `!.`.
    ifIs { <> eq(rule, @PegAny) }
        { return @PegEof };

    ## Optimization: Representation of `!()`.
    ifIs { <> eq(rule, empty) }
        { return @PegFail };

    ## The general case.
    <> @PegLookaheadFailure(rule)
};

## Documented in spec.
export fn makeLookaheadSuccess(rule) {
    <> @PegLookaheadSuccess(rule)
};

## Documented in spec.
export fn makeMainChoice(rules*) {
    <> @PegMain(makeChoice(rules*))
};

## Documented in spec.
export fn makeMainSequence(rules*) {
    <> @PegMain(makeSequence(rules*))
};

## Documented in spec.
export fn makeOpt(rule) {
    <> @PegOpt(rule)
};

## Documented in spec.
export fn makePlus(rule) {
    <> @PegRepeat{rule, minSize: 1}
};

## Documented in spec.
export fn makeSequence(rules*) {
    ## Trivial case: No rules. Return the empty rule.
    ifIs { <> eq(rules, []) }
        { return empty };

    ## Trivial case: One rule. Return that rule directly.
    ifIs { <> eq(get_size(rules), 1) }
        { return rules* };

    ## The general case.
    <> @PegSequence(rules)
};

## Documented in spec.
export fn makeStar(rule) {
    <> @PegRepeat{rule}
};

## Documented in spec.
export fn makeThunk(function) {
    <> @PegThunk(function)
};

## Documented in spec.
export fn makeString(string) {
    ## Trivial case: Empty string. Return an always-successful yield of `@""`.
    ifIs { <> eq(string, "") }
        { return @PegResult(@"") };

    ## Trivial case: One-char string. Return a simple one-char rule.
    ifIs { <> eq(get_size(string), 1) }
        { return makeToken(@@(string)) };

    ## This is implemented as, in effect, `(@"1" @"2" ... { <> string })`,
    ## which allows us to minimize code duplication.

    ## Make a list of rules per character.
    def types = typeListFromString(string);
    def chars = collect(types, makeToken);

    <> @PegSequence[chars*, @PegResult(@(string))]
};

## Documented in spec.
export fn makeToken(type) {
    ## This is just uses a single-item token set. The performance difference
    ## between that and doing a more special-case single item type check is
    ## probably negligible.
    <> @PegTokenSet{(type): null}
};

## Documented in spec.
export fn makeTokenSet(tokens*) {
    <> genericMakeTokenSet(true, tokens)
};

## Documented in spec.
export fn makeTokenSetComplement(tokens*) {
    <> genericMakeTokenSet(false, tokens)
};


##
## Miscellaneous functions
##

## Documented in spec.
export fn apply(rule, input) {
    def box = $Box::makePromise();
    def generator = ifIs { <> hasType(input, String) }
        {
            ## This converts generated characters into tokens with the
            ## characters as the type.
            <> $Generator::makeFilterGenerator(input) { ch <> @(ch) }
        }
        { <> input };

    <> ifIs { <> parse(rule, box, generator) }
        { <> fetch(box) }
};

## Documented in spec.
export fn stringFromTokenList(tokens) {
    <> cat("", collect(tokens, get_typeName)*)
};
