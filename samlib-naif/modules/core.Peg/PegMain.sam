## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `PegMain` class
##

#= language core.Lang0

import ./PegChoice :: *;
import ./PegSequence :: *;


##
## Class Definition
##
## Payload: {rule: rule}

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

export class PegMain
        access: ACCESS,
        new: NEW {
    ## Documented in spec.
    class.new(rule) {
        return this.(NEW)(@{rule})
    };

    ## Documented in spec.
    class.newChoice(rules*) {
        return PegMain.new(PegChoice.new(rules*))
    };

    ## Documented in spec.
    class.newSequence(rules*) {
        return PegMain.new(PegSequence.new(rules*))
    };

    ## Documented in spec.
    .parse(box, state) {
        ## The point of this class is to drop the context.
        def data = this.(ACCESS)();
        def origContext = state.get_context();
        return? ifValue { state.withContext([]).applyRule(data::rule, box) }
            { newState -> newState.withContext([origContext*, box*]) }
    };
};
