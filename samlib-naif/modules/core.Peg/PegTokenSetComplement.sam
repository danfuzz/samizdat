## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `PegTokenSetComplement` class
##

#= language core.Lang0

import ./PegAny :: any;


##
## Class Definition
##
## Payload: {set: {class*: null}}

## Secret used to control access to this class. TODO: Should probably be an
## anonymous selector.
def SECRET = makeUniqlet();

## Class being defined here.
def PegTokenSetComplement = makeObjectClass("PegTokenSetComplement", SECRET);

## Documented in spec.
fn PegTokenSetComplement.parse(box, input, items*) {
    def data = objectDataOf(this, SECRET);
    def result;

    return? ifValue { nextValue(input, var result) }
        { newInput ->
            ifNot { get(data::set, get_class(result)) }
                {
                    box* := result;
                    newInput
                }
        }
};


##
## Exported Definitions
##

## Documented in spec.
export fn makeTokenSetComplement(clses*) {
    ifIs { eq(clses, []) }
        {
            ## Trivial case: Empty set, so any token will do.
            return any
        };

    def set = {clses*: true};  ## A set-like map of all the token classes.

    return makeObject(PegTokenSetComplement, SECRET, {set})
};
