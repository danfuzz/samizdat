## Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Unary operator demo
##

def Io1 = moduleUse({name: ["core", "Io1"]});


##
## Helper Definitions
##

## Prints out the given value.
fn msg(value) {
    Io1::note(Format::source(value))
};

## Something to call.
fn returnVoid() {
    ## Nothing to see here!
};

## Something to call.
fn returnString() {
    <> "Fun times!"
};


##
## Main Tests
##

Io1::note("Ints and binary");

msg(-0);
msg(-10);
msg(- - 20);
msg(- - - 30);
msg(!!! 0);
msg(!!! -1);
msg(!!! - 1);
msg(!!! - !!! 1);
msg(returnString());
msg(returnVoid()?);
msg(returnString()?);

Io1::note("\nBoolean / logic conversion");

msg(returnVoid()??);
msg(returnString()??);
msg(true??);
msg(false??);   ## This one is the documented surprising result.
msg((true**)?);
msg((false**)?);

Io1::note("\nLogic ops");

msg((!returnVoid())?);
msg((!returnString())?);
msg((!true)?);
msg((!false)?);  ## This one is the documented surprising result.
msg((! !10)?);
msg((! !"fuzzy bunnies")?);
msg((! ! !@fizmo)?);

Io1::note("\nCollections");

msg(#"foo");
msg(#[]);
msg(#({a: 10, b: 20, c: 30, d:40}));

msg(^"!sniffuM");
msg(^[1000, 100, 10, 1]);

msg(["blort", "fizmo", "igram"][0]);
msg(["blort", "fizmo", "igram"][1]);
msg(["blort", "fizmo", "igram"][3]?);
msg(["blort", "fizmo", "igram"][-10]?);
msg(["blort", "fizmo", "igram"]["x"]?);

msg({a: "axolotl", c: "cuttlefish", n: "nutria"}["a"]);
msg({a: "axolotl", c: "cuttlefish", n: "nutria"}["n"]);
msg({a: "axolotl", c: "cuttlefish", n: "nutria"}::c);
msg({a: "axolotl", c: "cuttlefish", n: "nutria"}::"c");
msg({a: "axolotl", c: "cuttlefish", n: "nutria"}::\"c");
msg({a: "axolotl", c: "cuttlefish", n: "nutria"}[0]?);

msg("frotz"[0]);
msg("frotz"[4]);
msg("frotz"[5]?);
msg("frotz"[-1]?);
msg("frotz"["ztrof"]?);

msg(returnString()[2]);
msg((returnString()[99])?);


<> 0
