# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# `if*` function demo
#


# This declares the arguments to the program itself.
SELF_PATH, ARGS* ->

def Io0 = moduleGet({name: ["core", "Io0"]});


#
# Main demos
#

def opt1 = optValue { <> };
Io0::note(Format::source(opt1));

def opt2 = optValue { <> "Yes: opt" };
Io0::note(Format::source(opt2));

def v1 = ifValue { <> "Yes." }
    { value ->
        Io0::note(value);
        <> "Yes: v1"
    };
Io0::note(v1);

def v2 = ifValue { <> "Yes." }
    { value ->
        Io0::note(value);
        <> "Yes: v2"
    }
    { Io0::die("No.") };
Io0::note(v2);

def v3 = ifValue { <> }
    { value -> Io0::die("No.") }
    {
        Io0::note("Yes.");
        <> "Yes: v3"
    };
Io0::note(v3);

def v4 = optValue { <> ifValue { <> } { value -> Io0::die("No."); } };
Io0::note(Format::source(v4));

def v5 = ifIs { <> "Yes." }
    { <> "Yes: v5" };
Io0::note(v5);

def v6 = ifIs { <> "Yes." }
    { <> "Yes: v6" }
    { Io0::die("No.") };
Io0::note(v6);

def v7 = ifIs { <> }
    { Io0::die("No.") }
    { <> "Yes: v7" };
Io0::note(v7);

def v8 = optValue { <> ifIs { <> } { Io0::die("No.") } };
Io0::note(Format::source(v8));

def v9 = optValue { <> ifNot { <> "Yes." } { Io0::die("No.") } };
Io0::note(Format::source(v9));

def v10 = ifNot { <> }
    { <> "Yes: v10" };
Io0::note(v10);

def v11 = ifValueOr
    { <> "Yes: v11" }
    { Io0::die("No.") };
Io0::note(v11);

def v12 = ifValueOr
    { <> }
    { <> "Yes: v12" };
Io0::note(v12);

# Admittedly odd edge case.
def v13 = ifValues([],
    { <> "Yes: v13" },
    { Io0::die("No.") });
Io0::note(v13);

# Admittedly odd edge case.
def v14 = ifValues([],
    { <> "Yes: v14" });
Io0::note(v14);

def v15 = ifValues(
    [
        { <> "Yes: v15" }
    ],
    { args* <> Format::source(args) });
Io0::note(v15);

def v16 = ifValues(
    [
        { <> "Yes: v16" }
    ],
    { args* <> Format::source(args) },
    { Io0::die("No.") });
Io0::note(v16);

def v17 = ifValues(
    [
        { <> }
    ],
    { x -> Io0::die("No.") },
    { <> "Yes: v17" });
Io0::note(v17);

def v18 = optValue { <> ifValues([ { <> } ], { x -> Io0::die("No.") }) };
Io0::note(Format::source(v18));

def v19 = ifValues(
    [
        { <> "1" },
        { x <> cat(x, "2") }
    ],
    { args* <> Format::source(args) },
    { Io0::die("No.") });
Io0::note(v19);

def v20 = ifValues(
    [
        { <> "1" },
        { x <> }
    ],
    { Io0::die("No.") },
    { <> "Yes: v20" });
Io0::note(v20);

def v21 = ifValues(
    [
        { <> "1" },
        { x <> cat(x, "2") },
        { x, y <> cat(x, y, "3") },
        { x, y, z <> cat(x, y, z, "4") }
    ],
    { args* <> Format::source(args) },
    { Io0::die("No.") });
Io0::note(v21);

<> 0
