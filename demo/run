#!/bin/bash
#
# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>


#
# Directory and program name detection
#

# Preserve the original working dir as origDir.
origDir="${PWD}"

# Set progName to the program name, progDir to its directory, and baseDir
# to progDir's directory. Follows symlinks.
prog="$0"
while [[ -h ${prog} ]]; do
    [[ "$(/bin/ls -ld "${prog}")" =~ .*' -> '(.*)$ ]]
    newProg="${BASH_REMATCH[1]}"
    if [[ ${newProg} =~ ^/ ]]; then
        prog="${newProg}"
    else
        prog="$(dirname "${prog}")/${newProg}"
    fi
done
progName="$(basename "${prog}")"
progDir="$(dirname "${prog}")"
cd "${progDir}"
progDir="${PWD}"
cd ..
baseDir="${PWD}"
cd "${origDir}"
unset prog
unset newProg



#
# Argument parsing
#

# Which Samizdat layer to use.
layer=''

# Whether to build the binary.
build='no'

# Whether to compile with optimization.
optimize='no'

# Whether to run with iprofiler (OS X specific profile tool)
iprofiler='no'

while [[ $1 != '' ]]; do
    opt="$1"
    if [[ ${opt} == '--' ]]; then
        shift
        break
    elif [[ ${opt} == '--help' ]]; then
        echo "${progName} [--sam0 | --sam1 | --sam2] [--build] [--iprofile]" \
            "[--optimize]"
        echo "    demo-name arg..."
        exit
    elif [[ ${opt} == '--sam0' ]]; then
        layer='0'
    elif [[ ${opt} == '--sam1' ]]; then
        layer='1'
    elif [[ ${opt} == '--sam2' ]]; then
        layer='2'
    elif [[ ${opt} == '--build' ]]; then
        build='yes'
    elif [[ ${opt} == '--iprofiler' ]]; then
        iprofiler='yes'
    elif [[ ${opt} == '--optimize' ]]; then
        optimize='yes'
        build='yes'
    elif [[ ${opt} =~ ^- ]]; then
        echo "Unknown option: ${opt}" 1>&2
        exit 1
    else
        break
    fi
    shift
done
unset opt

name="$1"
shift

if [[ ${name} == '' ]]; then
    echo 'Missing demo name.' 1>&2
fi


#
# Main script
#

# Find the demo directory, expanding from the given name if necessary.

if [[ ! ${name} =~ ^/ ]]; then
    names=($(find "${progDir}" -type d -name "${name}*"))
    case "${#names[@]}" in
        (0) echo "Not found: ${name}" 1>&2 ;;
        (1) : ;;
        (*) echo "Multiple matches: ${name}" 1>&2 ;;
    esac
    name="${names[0]}"
fi

# Ensure it's a readable directory .

if [[ ! (-r ${name} && -d ${name}) ]]; then
    echo "Not a readable directory: ${name}" 1>&2
    exit 1
fi

# Find the "main" script.

mainFile="$(cd "${name}"; find . -name 'main.sam*')"

if [[ ${mainFile} == '' ]]; then
    echo "No main script in directory: ${name}" 1>&2
    exit 1
fi

# Build the executable, if requested.

if [[ ${build} == 'yes' ]]; then
    buildOpts=()

    if [[ ${optimize} == 'yes' ]]; then
        buildOpts=(--optimize)
    fi

    echo "Building the executable..."
    "${baseDir}/samizdat-0/build" "${buildOpts[@]}" > /dev/null || exit 1
fi

# Set up how to run the executable.

PATH="${PATH}:${baseDir}/out/samizdat-0"
cmd=("samizdat-0")

if [[ ${layer} != '' ]]; then
    cmd+=(--file-suffix="sam${layer}")
fi

if [[ ${iprofiler} == 'yes' ]]; then
    cmd=("$(which samizdat-0)")
    # May also want to use the -allocations option.
    cmd=(iprofiler -T 20s -timeprofiler "${cmd[@]}")
fi

# Run it in the demo dir, passing it the main script name and any other
# arguments passed to this script.

echo "Running demo: $(basename "${name}")"
cd "${name}"
exec "${cmd[@]}" "${mainFile}" "$@"
