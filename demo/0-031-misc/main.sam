## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Demo / scratch code
##

#= language core.Lang0


##
## Helper Definitions
##

## Demo of `+` argument repeat modifier.
fn stuff(items+) {
    note("stuff: ", $Format::source(items))
};

## Demo of formal argument repeat modifiers. Also of quoted identifiers.
fn blort(foo, bar?, \"weird name"?, more*) {
    stuff(foo, bar, \"weird name", more)
};

## Emits the stringified version of the given value to the console.
fn process(value) {
    note($Format::source(value));

    ## Test of explicit void yield.
    <>
};


##
## Main Tests
##

export fn main(selfPath, name?, rest*) {
    ## Be welcoming.

    ifIs { <> eq(name, ["danfuzz"]) }
        { note("Hello, Danfuzz!\n") }
        { note("Hello, Самиздат!\n") };

    process(selfPath);
    process(rest);
    process($Collection::del("mufxfins", 3));
    process($Collection::del(["pie", "fishburgers", "croissants"], 1));
    process($Collection::del({one: 1, two: 2, three: 3}, "two"));
    process($Collection::put("bizcuits", 2, "s"));
    process($Collection::put(["scones", "natto"], 1, "ice cream"));
    process($Collection::put({one: 1, two: 2, three: 3}, "four", 4));
    process($Collection::keyList([@a, @b, @c]));
    process($Collection::keyList("abcde"));
    process($Collection::keyList({a: "apple", b: "butter"}));
    process($Collection::valueList({a: "apple", b: "butter"}));
    process($Collection::valueList("blort"));
    process(makeUniqlet());
    process(blort);
    process(cat);
    process(ne);
    process(String);
    process($Format::int(71, 2));
    process($Format::int(71, 10));
    process($Format::int(71, 16));
    process($Format::int(71, 36));
    process(cat(toString(1), toString(31), toString(127)));

    blort(1);
    blort(1, 2);
    blort(1, 2, 3);
    blort(1, 2, 3, 4);
    blort(1, 2, 3, 4, 5);
    stuff(1);
    stuff(1, 2);
}
