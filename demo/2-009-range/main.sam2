# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Range demo, with layer 2 syntax.
#


# This declares the arguments to the program itself.
SELF_PATH, ARGS* ::


#
# Helper functions
#

# Prints out the values yielded by the given generator.
fn out(generator) {
    def values = listFromGenerator(generator);
    io0Note(format("Got: %q", values))
};

# Prints out 10 values yielded by the given generator (and no more).
fn outTen(generator) {
    def values = listFromGenerator(
        paraGeneratorFromValues(generator, [(1..10)*]));
    def extract = listMap(values) { ., value :: <> listFirst(value) };
    io0Note(format("Got: %q", extract))
};


#
# Main tests
#

io0Note("Inclusive, default increment...");
out(100..110);
out("U".."Z");
out(9..9);
out(9..0);
out("f".."f");
out("f".."a");

io0Note("\nInclusive, explicit increment...");
out(0..200..1000);
out("a"..5.."z");
out(10..-1..1);
out("F"..-2.."A");
out(9..0..9);

io0Note("\nExclusive, default increment...");
out(100..!110);
out("U"..!"Z");
out(9..!9);
out(9..!0);
out("f"..!"f");
out("f"..!"a");

io0Note("\nExclusive, explicit increment...");
out(0..200..!1000);
out("a"..5..!"z");
out(10..-1..!1);
out("F"..-2..!"A");
out(9..0..!9);

io0Note("\nOpen, default increment...");
outTen(-10..+);
outTen("M"..+);

io0Note("\nOpen, explicit increment...");
outTen(99..-1..+);
outTen("z"..-2..+);

<> 0
