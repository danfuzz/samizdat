## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Switch expression demo
##


##
## Private Definitions
##

fn powerName(value) {
    <> switch /out (value) {
        1:           { <> "one" };
        2:           { <out> "two" };
        4:           { return "four" };
        8:           { /outie -> <outie> "eight" };
        (1..4)*:     { <> "um..." };
        5: 6: blort: { <> "wha?" };
        default:     { <> "uh..." }
    }
};

fn interpolator(value, keys) {
    <> switch (value) {
        10: 11:      { <> "Constant override" };
        (value * 0): { /out -> <out> "Calculated override" };
        keys*:       { <> "Yes" };
        default:     { <> "No" }
    }
};

fn elser(item?) {
    <> switch (item*) {
        blort: { <> "See in the dark." };
        fizmo: { <> "Unclog pipes." };
        else:  { <> "Mysterious non-item." }
    }
};

fn namer(value) {
    <> switch (def x = value) {
        1: 2: 3: { <> x * 10   };
        4: 5: 6: { <> x * 100  };
        default: { <> x * 1000 }
    }
};


##
## Main Tests
##

note("Power...");
note(powerName(0));
note(powerName(1));
note(powerName(2));
note(powerName(3));
note(powerName(4));
note(powerName(5));
note(powerName(6));
note(powerName(7));
note(powerName(8));
note(powerName("blort"));

note("\nInterpolate...");
note(interpolator(1, [1, 2, 3]));
note(interpolator(2, [4..6]));
note(interpolator(10, [8..18]));
note(interpolator(11, [8..18]));
note(interpolator(0, [0, 5]));

note("\nElse...");
note(elser("blort"));
note(elser("fizmo"));
note(elser());
note($Format::source(elser("igram")?)); ## `?` because we expect void.

note("\nVoid yield...");
ifNot
    {
        <> switch (lt(2, 1)) {
            default: { note("Huh?") }
        }
    }
    { note("Yes, void.") };

note("\nNames...");
note($Format::source(namer(1)));
note($Format::source(namer(2)));
note($Format::source(namer(3)));
note($Format::source(namer(4)));
note($Format::source(namer(5)));
note($Format::source(namer(6)));
note($Format::source(namer(7)));
