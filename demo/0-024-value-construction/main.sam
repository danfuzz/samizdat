## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Demo of value construction
##

#= language core.Lang0


##
## Private Definitions
##

## Expects the two values to be `eq`.
fn expectSame(v1, v2) {
    ifIs { eq(v1, v2) }
        { note("Yes.") }
        {
            die("Different: ",
                $Format::source(v1), ", ", $Format::source(v2))
        }
};

## Expects the two values to be `ne`.
fn expectDifferent(v1, v2) {
    ifIs { ne(v1, v2) }
        { note("Yes.") }
        { die("Same: ", $Format::source(v1)) }
};

## Expects the value to be a core value.
fn expectCore(v) {
    ifIs { Record.accepts(v) }
        { die("Record: ", $Format::source(v)) }
        { note("Yes.") }
};

## Expects the value to be a record.
fn expectRecord(v) {
    ifIs { Record.accepts(v) }
        { note("Yes.") }
        { die("Opaque: ", $Format::source(v)) }
};


##
## Main Tests
##
## Expect everything to be a "yes."
##

## Function

note("\nFunction");

def fn1 = { x -> x };
def fn2 = { x -> x };

expectSame(fn1, fn1);
expectSame(fn2, fn2);
expectDifferent(fn1, fn2);
expectDifferent(fn2, fn1);
expectCore(fn1);
expectCore(fn2);


