# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Unary operator demo
#


# This declares the arguments to the program itself.
SELF_PATH, ARGS* ->


#
# Helper Definitions
#

# Prints out the given value.
fn msg(value) {
    io0Note(sourceString(value))
};

# Something to call.
fn returnVoid() {
    # Nothing to see here!
};

# Something to call.
fn returnString() {
    <> "Fun times!"
};


#
# Main Tests
#

io0Note("Ints and binary");

msg(-0);
msg(-10);
msg(- - 20);
msg(- - - 30);
msg(!!! 0);
msg(!!! -1);
msg(!!! - 1);
msg(!!! - !!! 1);
msg(returnString());
msg(returnVoid()?);
msg(returnString()?);

io0Note("\nBoolean / logic conversion");

msg(returnVoid()??);
msg(returnString()??);
msg(true??);
msg(false??);   # This one is the documented surprising result.
msg((true**)?);
msg((false**)?);

io0Note("\nLogic ops");

msg((!returnVoid())?);
msg((!returnString())?);
msg((!true)?);
msg((!false)?);  # This one is the documented surprising result.
msg((! !10)?);
msg((! !"fuzzy bunnies")?);
msg((! ! !@fizmo)?);

io0Note("\nCollection indexing");

msg(["blort", "fizmo", "igram"][0]);
msg(["blort", "fizmo", "igram"][1]);
msg(["blort", "fizmo", "igram"][3]?);
msg(["blort", "fizmo", "igram"][-10]?);
msg(["blort", "fizmo", "igram"]["x"]?);

msg({a: "axolotl", c: "cuttlefish", n: "nutria"}["a"]);
msg({a: "axolotl", c: "cuttlefish", n: "nutria"}["n"]);
msg({a: "axolotl", c: "cuttlefish", n: "nutria"}::c);
msg({a: "axolotl", c: "cuttlefish", n: "nutria"}::"c");
msg({a: "axolotl", c: "cuttlefish", n: "nutria"}::\"c");
msg({a: "axolotl", c: "cuttlefish", n: "nutria"}[0]?);

msg("frotz"[0]);
msg("frotz"[4]);
msg("frotz"[5]?);
msg("frotz"[-1]?);
msg("frotz"["ztrof"]?);

msg(returnString()[2]);
msg((returnString()[99])?);


<> 0
