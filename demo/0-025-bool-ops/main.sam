## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Boolean demo
##

#= language core.Lang0


##
## Private Definitions
##

## Checks an expected result.
fn expect(name, result, func) {
    ifValue { func() }
        { got ->
            ifNot { eq(got, result) }
                {
                    note("Unexpected result: ", $Format::source(got));
                    die("For: ", name);
                }
        }
        {
            note("Unexpected void result.");
            die("For: ", name);
        }
};

## Checks an expected void result.
fn expectVoid(name, func) {
    ifValue { func() }
        { got ->
            note("Unexpected non-void result: ", $Format::source(got));
            die("For: ", name)
        }
};


##
## Main demos
##

note("Booleans");
note($Format::source(false));
note($Format::source(true));

expect("and1", false, { false.and(false) });
expect("and2", false, { false.and(true) });
expect("and3", false, { true.and(false) });
expect("and4", true,  { true.and(true) });

expect("or1", false, { false.or(false) });
expect("or2", true,  { false.or(true) });
expect("or3", true,  { true.or(false) });
expect("or4", true,  { true.or(true) });

expect("xor1", false, { false.xor(false) });
expect("xor2", true,  { false.xor(true) });
expect("xor3", true,  { true.xor(false) });
expect("xor4", false, { true.xor(true) });

expect("not1", true,  { false.not() });
expect("not2", false, { true.not() });

expect("bit1", 0, { false.bit(0) });
expect("bit2", 1, { true.bit(0) });
expect("bit3", 0, { false.bit(1) });
expect("bit4", 0, { true.bit(1) });
expect("bit5", 0, { false.bit(2) });
expect("bit6", 0, { true.bit(2) });

expect("bitSize1", 1, { false.bitSize() });
expect("bitSize2", 1, { true.bitSize() });

expect("shl1", false, { false.shl(0) });
expect("shl2", false, { false.shl(1) });
expect("shl3", false, { false.shl(2) });
expect("shl4", false, { false.shl(-1) });
expect("shl5", false, { false.shl(-2) });
expect("shl6", true,  { true.shl(0) });
expect("shl7", false, { true.shl(-1) });
expect("shl8", false, { true.shl(-2) });

expect("shr1", false, { false.shr(0) });
expect("shr2", false, { false.shr(-1) });
expect("shr3", false, { false.shr(-2) });
expect("shr4", false, { false.shr(1) });
expect("shr5", false, { false.shr(2) });
expect("shr6", true,  { true.shr(0) });
expect("shr7", false, { true.shr(1) });
expect("shr8", false, { true.shr(2) });

expect("toInt1", 0, { false.toInt() });
expect("toInt2", 1, { true.toInt() });

expectVoid("toLogic1", { false.toLogic() });
expect("toLogic2", true, { true.toLogic() });

expect("fromLogic1", false, { Bool.fromLogic() });
expect("fromLogic2", true, { Bool.fromLogic(true) });
expect("fromLogic3", true, { Bool.fromLogic(false) });
expect("fromLogic4", true, { Bool.fromLogic("blort") });

note("All good.");
