## Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## If clause demo
##

def Io1 = moduleUse({name: ["core", "Io1"]});


##
## Helper Definitions
##

fn returnBlort() {
    <> "blort"
};

fn returnFrotz() {
    <> "frotz"
};

fn returnIgram() {
    <> "igram"
};

fn returnVoid() {
    # I can see through time.
};


##
## Main Tests
##

if (1 \== 1) {
    Io1::note("1 is 1")
};

if (1 \== 2) {
    Io1::note("1 is 2?!")
};

if (1 \== 1) {
    Io1::note("1 is 1")
} else {
    Io1::note("1 is not 1?!")
};

if (1 \== 2) {
    Io1::note("1 is 2?!")
} else {
    Io1::note("1 is not 2")
};

if (1 \== 1) {
    Io1::note("1 is 1")
} else if (1 \== 2) {
    Io1::note("1 is 2?!")
};

if (1 \== 2) {
    Io1::note("1 is 2?!")
} else if (1 \== 3) {
    Io1::note("1 is 3?!")
};

if (1 \== 1) {
    Io1::note("1 is 1")
} else if (1 \== 2) {
    Io1::note("1 is 2?!")
} else {
    Io1::note("1 is not 1?!")
};

if (1 \== 2) {
    Io1::note("1 is 2?!")
} else if (1 \== 1) {
    Io1::note("1 is 1")
} else {
    Io1::note("1 is not 1?!")
};

if (1 \== 2) {
    Io1::note("1 is 2?!")
} else if (1 \== 3) {
    Io1::note("1 is 3?!")
} else {
    Io1::note("1 is not 2 or 3")
};

def blort1 = if (1 \== 1) {
    <> "1 is 1"
} else {
    <> "1 is not 1?!"
};

Io1::note(blort1);

def blort2 = if <out> (1 \== 2) {
    <out> "1 is 2?!"
} else {
    <out> "1 is not 2"
};

Io1::note(blort2);

if (def x = returnBlort()) {
    Io1::note(x)
};

if (def x = returnBlort()) {
    Io1::note(x)
} else {
    Io1::note("Um?!")
};

if (def x = returnVoid()) {
    Io1::note("Um?!")
} else {
    Io1::note("The expected void.")
};

if (def x = returnVoid()) {
    Io1::note("Um?!")
} else if (def y = returnFrotz()) {
    Io1::note(y)
} else if (def x = returnIgram()) {
    Io1::note(x)
};

if (def x = returnVoid()) {
    Io1::note("Um?!")
} else if (def y = returnBlort()) {
    Io1::note(y)
} else if (def y = returnFrotz()) {
    Io1::note(y)
} else if (def x = returnIgram()) {
    Io1::note(x)
};

if (def x = returnVoid()) {
    Io1::note("Um?!")
} else if (def y = returnVoid()) {
    Io1::note("Um?!")
} else if (def x = returnIgram()) {
    Io1::note(x)
} else {
    Io1::note("Um?!")
};

if (def x = "fr", def y = "otz") {
    Io1::note(cat(x, y))
} else {
    Io1::note("Um?")
};

if (def x = "x", def y = returnVoid()) {
    Io1::note("Um?!")
} else {
    Io1::note("Yes.")
};

if (def x = returnVoid(), def y = "y") {
    Io1::note("Um?!")
} else {
    Io1::note("Yes.")
};

if (def x = "fr", "stuff", def y = "ot", def z = "z") {
    Io1::note(cat(x, y, z))
};

if (def x = returnVoid()) {
    Io1::note("Um?!")
} else if (def x = "fi", "stuff", def y = "zm", def z = "o") {
    Io1::note(cat(x, y, z))
};

<> 0
