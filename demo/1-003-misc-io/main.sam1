# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Demo / scratch code
#


# This declares the arguments to the program itself.
SELF_PATH, ARGS* ->

def Io1 = moduleGet({name: ["core", "Io1"]});


#
# Helper Definitions
#

# Demo of reading a sibling file through a sandboxed reader.
fn sibling() {
    def reader = Io1::sandboxedReader(butLast(SELF_PATH));
    def text = reader(["sibling.txt"]);
    Io1::note(text);
};

# Demo of finding and non-finding files.
fn fileExists() {
    fn tryFile(path) {
        ifIs { <> Io1::fileExists(path) }
            { Io1::note(cat("Exists: ", Format::sourceString(path))) }
            { Io1::note(cat("Does not exist: ", Format::sourceString(path))) }
    };

    def base = butLast(SELF_PATH);
    tryFile([base*, "sibling.txt"]);
    tryFile([base*, "non-sibling.txt"]);
};

# Emits the stringified version of the given value to the console.
fn process(value) {
    Io1::note(Format::sourceString(value));
};


#
# Main Tests
#

process(Io1::pathFromFlat("///foo//////./bar/./../baz"));
process(Io1::pathFromFlat("/a/b/x/y/z/../../../c/"));
process(Io1::flatFromPath(["fizmo", "igram", "blort", ""]));
process(Io1::pathListFromFlat("/foo:/foo/bar:baz/blort/"));

sibling();
fileExists();

<> 0
