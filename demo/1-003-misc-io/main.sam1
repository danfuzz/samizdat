## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Demo / scratch code
##

def Io1 = moduleLoad(["core", "Io1"]);


##
## Helper Definitions
##

## Demo of reading a sibling file.
fn sibling() {
    def selfDir = Sequence::sliceExclusive(SELF_PATH, 0);
    def text = Io1::readFileUtf8([selfDir*, "sibling.txt"]);
    note(text);
};

## Demo of finding and non-finding files.
fn fileExists() {
    fn tryFile(path) {
        ifIs { <> Io1::fileExists(path) }
            { note(cat("Exists: ", Format::source(path))) }
            { note(cat("Does not exist: ", Format::source(path))) }
    };

    def selfDir = Sequence::sliceExclusive(SELF_PATH, 0);
    tryFile([selfDir*, "sibling.txt"]);
    tryFile([selfDir*, "non-sibling.txt"]);
};

## Emits the stringified version of the given value to the console.
fn process(value) {
    note(Format::source(value));
};


##
## Main Tests
##

process(Io1::pathFromFlat("///foo//////./bar/./../baz"));
process(Io1::pathFromFlat("/a/b/x/y/z/../../../c/"));
process(Io1::flatFromPath(["fizmo", "igram", "blort", ""]));

sibling();
fileExists();

<> 0
