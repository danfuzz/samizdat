# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Demo / scratch code
#


# This declares the arguments to the program itself.
ARGS* ::


#
# Helper definitions
#

# Example of self-recursion using `yCombinator`. This is how a simple
# self-recursive Samizdat function might end up looking when coverted
# into Samizdat Layer 0 form.
#
# Returns a listlet with intlet contents that count down from `n`,
# generated recursively. The "main" function literal here is wrapped
# in an outer function layer, whose argument is used to achieve
# recursion. See `xCombinator` above.
countDown = yCombinator { countDown ::
    <> { n ::
        <> ifTrue { <> ge n @0 }
            { <> listletPrepend n (countDown (isub n @1)) }
            { <> @[] }
    }
};

# Example of mutual recursion using `yStarCombinator`. See discussion
# above.
countDowns = yStarCombinator
    { f1 f2 ::
        <> { n ::
            <> ifTrue { <> gt n @0 }
                { <> listletPrepend n (f2 (isub n @1)) }
                { <> @[@0] }
        }
    }
    { f1 f2 ::
        <> { n :: <> listletPrepend @"and" (f1 n) }
    };
countDown2 = listletNth countDowns @0;


# Emits the stringified version of the given value to the console.
process = { value ::
    io0Note (sourceStringlet value)
};


#
# Main function
#

main = { selfPath name rest* ::
    # Be welcoming.

    ifTrue { <> eq name @danfuzz }
        { io0Note @"Hello, Danfuzz!\n" }
        { io0Note @"Hello, Самиздат!\n" };

    process selfPath;
    process rest;
    process @0;
    process @98765;
    process @-12345;
    process @[];
    process @[@-1];
    process @[@1 @-2];
    process @[@-1 @2 @300];
    process @"";
    process @"\"Blort.\" \n";
    process @[=];
    process @[@1=@2];
    process @[@1=@2 @888=@1];
    process @[@fizmo=@omzif @igram=@margi @blort=@trolb];
    process null;
    process false;
    process true;
    process @@;
    process (countDown @10);
    process (countDown2 @5);
};

<> apply main ARGS
