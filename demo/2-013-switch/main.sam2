# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Switch expression demo
#

def Io1 = moduleUse({name: ["core", "Io1"]});


#
# Helper Definitions
#

fn powerName(value) {
    <> switch <out> (value) {
        1:             { <> "one" }
        2:             { <out> "two" }
        4:             { return "four" }
        8:             { <> "eight" }
        (1..4)*:       { <> "um..." }
        5 | 6 | blort: { <> "wha?" }
        default:       { <> "uh..." }
    }
};

fn interpolator(value, keys) {
    <> switch (value) {
        10 | 11:     { <> "Constant override" }
        (value * 0): { <> "Calculated override" }
        keys*:       { <> "Yes" }
        default:     { <> "No" }
    }
};

fn elser(item?) {
    <> switch (item*) {
        blort: { <> "See in the dark." }
        fizmo: { <> "Unclog pipes." }
        else:  { <> "Mysterious non-item." }
    }
};

fn namer(value) {
    <> switch (x := value) {
        1|2|3:   { <> Number::mul(x, 10)   }
        4|5|6:   { <> Number::mul(x, 100)  }
        default: { <> Number::mul(x, 1000) }
    }
};


#
# Main Tests
#

Io1::note("Power...");
Io1::note(powerName(0));
Io1::note(powerName(1));
Io1::note(powerName(2));
Io1::note(powerName(3));
Io1::note(powerName(4));
Io1::note(powerName(5));
Io1::note(powerName(6));
Io1::note(powerName(7));
Io1::note(powerName("blort"));

Io1::note("\nInterpolate...");
Io1::note(interpolator(1, [1, 2, 3]));
Io1::note(interpolator(2, [(4..6)*]));
Io1::note(interpolator(10, [(8..18)*]));
Io1::note(interpolator(11, [(8..18)*]));
Io1::note(interpolator(0, [0, 5]));

Io1::note("\nElse...");
Io1::note(elser("blort"));
Io1::note(elser("fizmo"));
Io1::note(elser());
Io1::note(Format::source(elser("igram")?)); # `?` because we expect void.

Io1::note("\nVoid yield...");
ifNot
    {
        <> switch (lt(2, 1)) {
            default: { Io1::note("Huh?") }
        }
    }
    { Io1::note("Yes, void.") };

Io1::note("\nNames...");
Io1::note(Format::source(namer(1)));
Io1::note(Format::source(namer(2)));
Io1::note(Format::source(namer(3)));
Io1::note(Format::source(namer(4)));
Io1::note(Format::source(namer(5)));
Io1::note(Format::source(namer(6)));
Io1::note(Format::source(namer(7)));

<> 0
