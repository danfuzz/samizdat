# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Method call demo
#

def Io1 = moduleUse({name: ["core", "Io1"]});


#
# Helper Definitions
#

# Prints out the given value.
fn msg(value) {
    Io1::note("\%q(value)");
};


#
# Main Tests
#

def sizeOf = Collection::sizeOf;
def nth = Collection::nth;

Io1::note("\nBasic syntax");
msg([1, 2].sizeOf());
msg(["zero", "one", "two"].get(0));
msg(["zero", "one", "two"].nth(1));
msg((100).perEq(100));
msg("".cat("Awesome", "tastic!"));

Io1::note("\nExpression syntax for name");
def funcList = [nth, perEq];
msg(["zero", "one", "two"].(Collection::first(funcList))(1));

Io1::note("\nGetting bound methods");
def method1 = [1, 2, 3].sizeOf;
msg(method1());

def method2 = [4, 5, 6].(Collection::last(funcList));
msg(method2([4, 5, 6]));
msg(method2([9])?);

<> 0
