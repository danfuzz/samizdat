## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Generator function demo
##

def Io0 = moduleLoad(["core", "Io0"]);


##
## Helper Definitions
##

## Prints the given value, indented slightly.
fn msg(value) {
    Io0::note(cat("  ", Format::source(value)))
};

## Outputs all generated values, with a header and a footer.
fn msgAll(header, gen) {
    Io0::note(header);
    Generator::filterAll([gen*]) { elem -> msg(elem) };
    Io0::note("  [fin]");
    Io0::note(cat("  value: ", Format::source(gen)));
    Io0::note("")
};

## Outputs ten generated values, with a header and a footer.
fn msgTen(header, origGen) {
    Io0::note(header);

    var count = 10;
    var gen = origGen;
    { <done> ->
        loop {
            count := Number::sub(count, 1);
            ifIs { <> lt(count, 0) }
                { <done> };

            def box = Box::makePromise();
            <> ifValue { <> nextValue(gen, box) }
                { nextGen ->
                    msg(Box::fetch(box));
                    gen := nextGen
                }
                { <done> }
        }
    }();

    Io0::note("  [...]");
    Io0::note(cat("  value: ", Format::source(origGen)));
    Io0::note("")
};


##
## Main Tests
##

msgTen("Open range (10)",
    Range::makeOpenRange(10));

msgTen("Open range (100, 5)",
    Range::makeOpenRange(100, 5));

msgTen("Open range (\"z\", -2)",
    Range::makeOpenRange("z", -2));

msgTen("Open range (333, 0)",
    Range::makeOpenRange(333, 0));

msgTen("Open range (\"!\", 0)",
    Range::makeOpenRange("!", 0));

Io0::note("");

msgAll("Closed range (100, 7)",
    Range::makeClosedRange(100, 7));

msgAll("Closed range (3, 5, 10)",
    Range::makeClosedRange(3, 5, 10));

msgAll("Closed range (3, 0, 10)",
    Range::makeClosedRange(3, 0, 10));

msgAll("Closed range (\"9\", 10, -1)",
    Range::makeClosedRange("9", 10, -1));

Io0::note("");

msgAll("Inclusive range (5..10)",
    Range::makeInclusiveRange(5, 10));

msgAll("Inclusive range (10..1 by -2)",
    Range::makeInclusiveRange(10, 1, -2));

msgAll("Inclusive range (\"a\"..\"z\" by 5)",
    Range::makeInclusiveRange("a", "z", 5));

msgAll("Zero-increment inclusive int range",
    Range::makeInclusiveRange(10, 20, 0));

msgAll("Zero-increment inclusive character range",
    Range::makeInclusiveRange("x", "a", 0));

msgAll("Empty inclusive range",
    Range::makeInclusiveRange(10, 9, 1));

Io0::note("");

msgAll("Exclusive range (5..!10)",
    Range::makeExclusiveRange(5, 10));

msgAll("Exclusive range (10..!1 by -2)",
    Range::makeExclusiveRange(10, 1, -2));

msgAll("Exclusive range (\"a\"..!\"z\" by 5)",
    Range::makeExclusiveRange("a", "z", 5));

msgAll("Zero-increment exclusive int range",
    Range::makeExclusiveRange(10, 20, 0));

msgAll("Zero-increment exclusive character range",
    Range::makeExclusiveRange("x", "a", 0));

msgAll("Empty exclusive range",
    Range::makeExclusiveRange(10, 9, 1));

<> 0
