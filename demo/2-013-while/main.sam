## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Loop expression demo
##


##
## Main Tests
##

def box = $Box::makeCell(0);

while (fetch(box) < 5) {
    store(box, fetch(box) + 1);
    note("Value A is \%q(fetch(box)).")
};

while (fetch(box) < 15) {
    store(box, fetch(box) + 1);
    if (fetch(box) < 10) {
        continue
    };
    note("Value B is \%q(fetch(box)).")
};

while (fetch(box) < 30) { /next ->
    store(box, fetch(box) + 1);
    if (fetch(box) < 25) {
        yield /next
    };
    note("Value C is \%q(fetch(box)).")
};

def result1 = while (fetch(box) < 40) {
    store(box, fetch(box) + 1);
    if (fetch(box) == 35) {
        break "blort"
    };
    note("Value D is \%q(fetch(box)).")
};

note("Result 1 is \%q(result1).");

def result2 = while /out (fetch(box) < 40) {
    store(box, fetch(box) + 1);
    if (fetch(box) == 38) {
        yield /out "fizmo"
    };
    note("Value E is \%q(fetch(box)).")
};

note("Result 2 is \%q(result2).");

while (def value = (45 > fetch(box))) {
    def nextVal = value + 1;
    store(box, nextVal);
    note("Value F is \%q(nextVal).")
};

## First test will be the one that fails.
while (def value1 = (50 > fetch(box)), def value2 = value1 + 100) {
    store(box, value1 + 1);
    note("Value G is \%q(fetch(box)); \%q(value1) \%q(value2)");
};

## Second test will be the one that fails.
while (def value1 = fetch(box), def value2 = (55 > value1)) {
    store(box, value1 + 1);
    note("Value H is \%q(fetch(box)); \%q(value1) \%q(value2)");
};
