# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# List / argument interpolation demo.
#


# This declares the arguments to the program itself.
SELF_PATH, ARGS* ::


#
# Helper function
#

fn out(args*) {
    io0Note(format("Got: %q", args))
};

fn ten() {
    <> 10
};

fn list5() {
    <> [5]
};

fn yieldTest(x) {
    <> x*
};

fn nonlocalTest(x) {
    return x*
};

#
# Main tests
#

io0Note("Testing...");
out(makeRange(1, 1));
out(makeRange(1, 3));
out(makeRange(2, 1));
out(makeRange(3, 1, -1));
out(makeRange(0, 14, 5));
out([1..3]);
out([1..3]*);
out(1..3);
out("x", 10..15);
out(ten()..15, "y");
out(["a", "b", "c"]*, ["d", "e", "f", ["g"]*]*);
out(["a".."z"]);
out(["0".."9": "woo"]);
out([["f", "u", "z"]*: "muffins"]);
out([:, [0..6: "blort"]*, [5..9: "fizmo"]*]);

ifValue { <> yieldTest([]) }
    { value :: <> out(value) }
    { out("void") };

ifValue { <> nonlocalTest([]) }
    { value :: <> out(value) }
    { out("void") };

ifValue { <> yieldTest(["blort"]) }
    { value :: <> out(value) }
    { out("void") };

ifValue { <> nonlocalTest(["fizmo"]) }
    { value :: <> out(value) }
    { out("void") };

# The extra parens here force the interpolated expression not to be considered
# at function argument level.
out((list5()*));

# Likewise the minus sign here (because it binds looser than the
# interpolation star).
out(-list5()*);

def five = list5()*;
out(five);

out([blort: list5()*]);

<> 0
