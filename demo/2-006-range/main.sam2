## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Range demo, with layer 2 syntax
##

def Io1 = moduleUse({name: ["core", "Io1"]});


##
## Helper Definitions
##

## Prints out the values yielded by the given generator or list.
fn msg(item) {
    if (isList(item)) {
        Io1::note("Got list: \%q(item)")
    } else {
        Io1::note("Got gen: \%q([item*])")
    }
};

## Prints out 10 values yielded by the given generator (and no more).
fn msgTen(generator) {
    def values = Generator::makeFilterGenerator(generator, (1..10))
        { v, . <> v };
    Io1::note("Got: \%q([values*])")
};


##
## Main Tests
##

Io1::note("Inclusive, default increment...");
msg((100..110));
msg(("U".."Z"));
msg((9..9));
msg((9..0));
msg(("f".."f"));
msg(("f".."a"));
msg([1..10]);
msg([10..1]);

Io1::note("\nInclusive, explicit increment...");
msg((0..1000 by 200));
msg(("a".."z" by 5));
msg((10..1 by -1));
msg(("F".."A" by -2));
msg((9..9 by 0));
msg([0..9 by 3]);

Io1::note("\nExclusive, default increment...");
msg((100..!110));
msg(("U"..!"Z"));
msg((9..!9));
msg((9..!0));
msg(("f"..!"f"));
msg(("f"..!"a"));
msg([1..!10]);
msg([10..!1]);

Io1::note("\nExclusive, explicit increment...");
msg((0..!1000 by 200));
msg(("a"..!"z" by 5));
msg((10..!1 by -1));
msg(("F"..!"A" by -2));
msg((9..!9 by 0));
msg([0..!9 by 3]);

Io1::note("\nOpen, default increment...");
msgTen((-10..));
msgTen(("M"..));

Io1::note("\nOpen, explicit increment...");
msgTen((99.. by -1));
msgTen(("z".. by -2));

<> 0
