# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Unary operator demo.
#


# This declares the arguments to the program itself.
SELF_PATH, ARGS* ::


#
# Helper definitions
#

# Prints out the given value.
fn msg(value) {
    io0Note("\%q(value)");
};

fn payloadSize(token) {
    <> coreSizeOf(dataOf(token))
};

fn listishNth(listish, n) {
    <> listNth(dataOf(listish), n)
};

fn mappishNth(mappish, n) {
    <> mapNth(dataOf(mappish), n)
};

fn mappishGet(mappish, key) {
    <> mapGet(dataOf(mappish), key)
};

fn weirdSize(value) {
    def payload = dataOf(value);
    <> listFirst(payload)
};

fn weirdNth(value, n) {
    ifIs { <> lt(n, 0) }
        { return };

    def payload = dataOf(value);
    def size = weirdSize(value);

    ifIs { <> ge(n, size) }
        { return };

    <> listNth(payload, iadd(n, 1))
};

def DISPATCH = [
    listish: [
        get:  listishNth,
        nth:  listishNth,
        size: payloadSize
    ],
    mappish: [
        get:  mappishGet,
        nth:  mappishNth,
        size: payloadSize
    ],
    weird: [
        get:  weirdNth,
        nth:  weirdNth,
        size: weirdSize
    ]
];


#
# Main tests
#

io0Note("\nListish");
msg(@[listish: [1, 2]].size());
msg(@[listish: ["zero", "one", "two"]].get(1));
msg(@[listish: ["zero", "one", "two"]].nth(2));

io0Note("\nMappish");
msg(@[mappish: [a: "aardvark", b: "bear"]].size());
msg(@[mappish: [a: "aardvark", b: "bear"]].get("a"));
msg(@[mappish: [a: "aardvark", b: "bear"]].nth(1));

io0Note("\nWeird");
def weirdValue = @[weird: [3, @x, @y, @z, @p, @d, @q]];
msg(weirdValue.size());
msg(weirdValue.get(2));
msg(weirdValue.nth(4)?);

io0Note("\nExpression syntax for name");
msg(weirdValue."size"());
msg(weirdValue.(stringAdd("s", "ize"))());

io0Note("\nGetting raw methods");
def method1 = @[listish: [1, 2, 3]].size;
msg(method1());

def method2 = @[listish: [4, 5, 6]].(stringAdd("n", "th"));
msg(method2(1));

<> 0
