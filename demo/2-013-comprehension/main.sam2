# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Comprehension syntax demo.
#


# This declares the arguments to the program itself.
SELF_PATH, ARGS* ::


#
# Helper definitions
#

# Prints generator or collection output.
fn msg(header, gen) {
    io0Note(header);
    doFilter(gen) { item <> io0Note("  \%q(item)") };
    io0Note("")
};


#
# Main tests
#

io0Note("Concise Forms\n");

msg("One-item generator",
    (x in ["a", "b", "c"] <> "~~\(x)~~"));

msg("Two-item generator",
    (foo in 1..10, bar in 100..100..+ <> foo + bar));

msg("One-item collect",
    [x in ["a", "b", "c"] <> "~~\(x)~~"]);

msg("Two-item collect",
    [foo in 1..10, bar in 100..100..+ <> foo + bar]);

io0Note("Extended forms\n");

msg("One-item generator",
    (x in ["a", "b", "c"] ::
        <> "~~\(x)~~"
    ));

msg("Two-item multi-line generator",
    (foo in 1..10, bar in 100..100..+ ::
        def result = foo + bar;
        <> result
    ));

msg("One-item collect",
    [x in ["a", "b", "c"] ::
        <> "~~\(x)~~"
    ]);

msg("Two-item multi-line collect",
    [foo in 1..10, bar in 100..100..+ ::
        def result = foo + bar;
        <> result
    ]);

msg("Three-item multi-line collect",
    [a in 0..4, b in 50..10..90, c in 300..100..700 ::
        def sum = a + b + c;
        def evenOdd = ((sum % 2) \== 0) & "Even" | "Odd";
        <> "\(evenOdd)\(sum)"
    ]);

<> 0
