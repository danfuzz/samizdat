## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## The venerable Y Combinator and friends
##

def Io0 = moduleUse({name: ["core", "Io0"]});


##
## Combinator Definitions
##
## These functions are meant to be able to be defined in fairly incomplete
## implementations of Samizdat Layer 0, to help with bootstrapping of
## implementations that truly disallow function self-reference and/or mutual
## function reference. In particular, these functions do not make any calls
## to non-primitive library functions, and they limit their explicit primitive
## library function calls to just `collect`.
##

## The U combinator, which is a function that takes a function argument and
## returns the result of applying that function to itself as its own argument.
## This is a very simple function, simple enough that it's often not worth
## writing a call to it (instead just "manually" expanding it where needed).
## It is included and used here, specifically so that the common structure
## between the two Y combinator variants is more obvious.
fn uCombinator(function) { <> function(function) };

## The U* combinator. This is like the U combinator, except expanded to
## work for multiple function arguments, in this case both passed and
## returned as an array. Each function argument is called with the entire
## contents of the array (as individual arguments). The result of each of
## the calls is packaged back up into a new array to become the return
## value of this function.
##
## Naming note: I (danfuzz) haven't found any official name for this
## function, but the name `U*` makes for a nice parallel with the name
## `Y*`. That is, the Y combinator uses the U combinator in the same way
## that the Y* combinator uses this function.
fn uStarCombinator(functions) {
    <> collect(functions, { function <> function(functions*) })
};

## Documented in associated README file.
fn yCombinator(function) {
    ## Although it is coded here using a named function, it's just for
    ## readability and not a strict necessity. That is, the definition of
    ## `applicator` doesn't directly refer to the variable `applicator`.

    fn applicator(selfRef) {
        <> { args* <> function(uCombinator(selfRef))(args*) }
    };

    <> uCombinator(applicator);
};

## Documented in associated README file.
fn yStarCombinator(functions*) {
    ## The code here is meant to be exactly parallel to that of `yCombinator`,
    ## except with additional list mapping (including via the
    ## `uStarCombinator` function) where necessitated by the multiple-function
    ## nature of this variant.

    def applicators = collect(
        functions,
        { function ->
            <> { selfRefs* ->
                <> { args* <> function(uStarCombinator(selfRefs)*)(args*) }
            }
        });

    <> uStarCombinator(applicators);
};


##
## Main Tests
##

## Example of self-recursion using `yCombinator`. This is how a simple
## self-recursive Samizdat function might end up looking when coverted
## into Samizdat Layer 0 form.
##
## Returns a list with int contents that count down from `n`,
## generated recursively. The "main" function literal here is wrapped
## in an outer function layer, whose argument is used to achieve
## recursion.
def countDown = yCombinator { countDown ->
    <> { n ->
        <> ifIs { <> ge(n, 0) }
            { <> [n, countDown(Number::sub(n, 1))*] }
            { <> [] }
    }
};

## Example of mutual recursion using `yStarCombinator`. See discussion
## above.
def countDowns = yStarCombinator
    { f1, f2 ->
        <> { n ->
            <> ifIs { <> gt(n, 0) }
                { <> [n, f2(Number::sub(n, 1))*] }
                { <> [0] }
        }
    }
    { f1, f2 ->
        <> { n <> ["and", f1(n)*] }
    };
def countDown2 = Sequence::nth(countDowns, 0);

## Emits the stringified version of the given value to the console.
fn msg(value) {
    Io0::note(Format::source(value));
};

msg(countDown(10));
Io0::note("");
msg(countDown2(5));

<> 0
