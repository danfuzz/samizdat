# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Lookahead / backtrackable reader, which operates on either
# listlets or stringlets.
#


# Object state consists of:
#
# * `@nth` &mdash; Function to use to get the nth item of the value being
#   read.
# * `@size` &mdash; The size of the value (in elements / characters).
# * `@at` &mdash; The current cursor position.
#
# Convention: `do` prefix for public exposed functions, and `x` prefix for
# private non-dispatched functions.

# Gets the cursor position.
xAt = { state :: <> mapletGet state @at };

# Gets the nth element.
xNth = { state n :: <> (mapletGet state @nth) n };

# Gets the size.
xSize = { state :: <> mapletGet state @size };

# Gets the current cursor position.
doAt = { state :: <> @[@result=(xAt state)] };

# Returns whether the reader is at EOF.
doEof = { state :: <> @[@result=(lt (xAt state) (xSize state))] };

# Peeks at the next element without consuming it. Returns void at EOF.
doPeek = { state ::
    at = xAt state;
    <> ifValue { <> xNth state at }
        { value :: <> @[@result=value] };
};

# Reads the next element, consuming it. Returns void at EOF.
doRead = { state ::
    at = xAt state;
    nextState = mapletPut state @at (iadd at @1);
    <> ifValue { <> xNth state at }
        { value :: <> @[@result=value @state=nextState] };
};

# Resets the cursor to the given value. It is only valid to
# reset backwards (or no-oply reset to the current cursor).
doReset = { state resetAt ::
    at = xAt state;
    nextState = mapletPut state @at resetAt;

    ifTrue { <> or { <> lt resetAt @0 } { <> gt resetAt at } }
        { io0die (format @"Invalid reset value: %Q" resetAt) };

    <> @[@state=nextState]
};

# Dispatch table.
READER_DISPATCH = @[
    @at    = doAt
    @eof   = doEof
    @peek  = doPeek
    @read  = doRead
    @reset = doReset
];

# Performs method dispatch.
readerDispatch = { state name rest* ::
    <> apply (mapletGet READER_DISPATCH name) state rest
};

# Returns a lookahead-enabled reader. The given argument must be
# either a listlet or a stringlet.
reader = { value ::
    nth = mapletGet
        @[@listlet=listletNth @stringlet=stringletNth]
        (lowType value);
    nthFunc = { n :: <> nth value n };

    <> object readerDispatch @[
        @at   = @0
        @size = (lowSize value)
        @nth  = nthFunc
    ]
};

<> @[@reader = reader];
