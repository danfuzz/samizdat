# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Lookahead / backtrackable reader, which operates on either
# lists or strings.
#


# Object state consists of:
#
# * `"nth"` &mdash; Function to use to get the nth item of the value being
#   read.
# * `"size"` &mdash; The size of the value (in elements / characters).
# * `"at"` &mdash; The current cursor position.
#
# Convention: `do` prefix for public exposed functions, and `x` prefix for
# private non-dispatched functions.

# Gets the cursor position.
xAt = { state :: <> mapGet state "at" };

# Gets the nth element.
xNth = { state n :: <> (mapGet state "nth") n };

# Gets the size.
xSize = { state :: <> mapGet state "size" };

# Gets the current cursor position.
doAt = { yield state :: yield (xAt state) };

# Returns whether the reader is at EOF.
doEof = { yield state :: yield (ge (xAt state) (xSize state)) };

# Peeks at the next element without consuming it. Returns void at EOF.
doPeek = { yield state ::
    at = xAt state;
    ifValue { <> xNth state at }
        { value :: yield value }
        { yield() }
};

# Reads the next element, consuming it. Returns void at EOF.
doRead = { yield state ::
    at = xAt state;
    ifValue { <> xNth state at }
        { value :: yield value }
        { yield() };

    <> mapPut state "at" (iadd at 1);
};

# Resets the cursor to the given value. It is only valid to
# reset backwards (or no-oply reset to the current cursor).
doReset = { yield state resetAt ::
    at = xAt state;

    ifTrue { <> or { <> lt resetAt 0 } { <> gt resetAt at } }
        { io0die (format "Invalid reset value: %Q" resetAt) };

    yield();
    <> mapPut state "at" resetAt;
};

# Dispatch table.
READER_DISPATCH = [
    "at"    = doAt
    "eof"   = doEof
    "peek"  = doPeek
    "read"  = doRead
    "reset" = doReset
];

# Performs method dispatch.
readerDispatch = { yield state name rest* ::
    <> apply (mapGet READER_DISPATCH name) yield state rest
};

# Returns a lookahead-enabled reader. The given argument must be
# either a list or a string.
reader = { value ::
    nth = mapGet
        ["list"=listNth "string"=stringNth]
        (lowType value);
    nthFunc = { n :: <> nth value n };

    <> object readerDispatch [
        "at"   = 0
        "size" = (lowSize value)
        "nth"  = nthFunc
    ]
};

<> ["reader" = reader]
