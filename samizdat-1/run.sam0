# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# `run` function, which is the effective main entry point to the program.
#

# This is the reader to use for reading internal files (e.g. and in
# particular, the embedded copy of samizdat-0-lib).
READER ::

# The "unadorned" layer 0 parser defined in this program.
sam1Parser = parser TOKEN0_RULES TREE0_RULES;

# Parses the given program text, yielding a `program` node. This also
# compares the would-be result with the result of doing the same operation
# using the samizdat-0 facilities for same, complaining if they're not
# equal.
sam1Tree = { programText ::
    # Turn the text into a parse tree using the tokenizer and tree parser
    # defined in this program.
    programNode = sam1Parser programText;

    # Turn the text into a parse tree using the samizdat-0 implementation
    # of parsing.
    programNode0 = sam0Tree programText;

    # Complain if the two parsed forms aren't identical.
    ifTrue { <> ne programNode0 programNode }
        {
            io0Note "Parser disagreement.";
            diff programNode0 programNode;
            io0Note "";
            io0Note (format "v1\n----------\n%q\n" programNode0);
            io0Note (format "v2\n----------\n%q\n" programNode);
            io0Die "Ouch!";
        };

    <> programNode
};

# Reads the named embedded library file.
readLibraryFile = { name ::
    <> READER ["samizdat-0-lib" (stringAdd name ".sam0")]
};

# Reads all the library files, returning a map from names to contents.
readAllLibraryFiles = {
    # Use the manifest to figure out what all to read.
    manifestProgram = sam1Tree (readLibraryFile @manifest);
    manifest = (sam0Eval (makeLibrary LIBRARY) manifestProgram)();

    <> listReduce [=] manifest { result . name ::
        <> mapPut result name (readLibraryFile name)
    }
};

# Makes the core library by using this program's parser to parse the library
# source text.
makeCoreLibrary = {
    # Make the core library context that will be used to load the embedded
    # core library. The only difference between this and the original core
    # library is the replacement of `sam0Tree` with `sam1Tree`.
    subLibrary = makeLibrary (mapPut LIBRARY @sam0Tree sam1Tree);

    libraryFiles = readAllLibraryFiles();

    mainProgram = sam1Tree (mapGet libraryFiles @main);
    mainFunction = sam0Eval subLibrary mainProgram;
    <> mainFunction libraryFiles
};

# Compiles the file named in the first argument in a fresh context,
# and runs it, passing it an array consisting of its own file path
# (in standard list-of-string form) followed by the rest of the
# arguments as-is.
run = { args* ::
    parsedArgs = parseArgs args;
    options = mapGet parsedArgs @options;
    validate = mapGet options @validate false;
    file = mapGet parsedArgs @file;
    argsPerSe = mapGet parsedArgs @args;

    library = ifTrue { <> validate }
        {
            io0Note "Loading core library...";
            lib = makeCoreLibrary();
            io0Note "Done!";
            <> lib
        }
        { <> LIBRARY };

    filePath = io0PathFromString file;
    programText = io0ReadFileUtf8 filePath;
    programNode = sam1Tree programText;

    # Evaluate the program in the context of the samizdat-0 core library.
    function = sam0Eval (makeLibrary library) programNode;

    # Run it!
    <> apply function filePath argsPerSe
};

<> [@run = run]
