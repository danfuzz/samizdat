# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. See the associated file "LICENSE.md" for details.

#
# Samizdat Layer 1
#
# This is a Samizdat Layer 0 program which runs Samizdat Layer 0
# programs.
#

#
# Helper functions
#

# TODO: Stuff.


#
# Meat of the implementation
#

# Tokenizes the given string, using Samizdat Layer 0 token syntax.
# Returns a listlet of tokens.
tokenize = { programText ::
    # TODO
    <> @[];
};

# Parses a listlet of tokens as a program, using Samizdat Layer 0 tree
# syntax. Returns a `function` node.
parse = { tokens ::
    # TODO

    theCall = [:
        @"call"
        @[
            @"function"=@"writeFile"
            @"actuals"=@[
                @"/dev/stdout"
                @"Hello, Самиздат!\n"
            ]
        ]
    :];

    theBlock = [:
        @"block"
        @[
            @"statements"=@[theCall]
        ]
    :];

    <> [:
        @"function"
        @[@"formals"=[:@"formals" @[]:] @"block"=theBlock]
    :];
};


#
# Main function
#

# Compiles the file named in the first argument in a fresh context,
# and runs its `main`, passing it an array of the rest of the
# arguments.
main = { file rest* ::
    # Be welcoming.

    if { <> eq file @"danfuzz"; } {
        writeFile @"/dev/stdout" @"Hello, Danfuzz!\n";
    } else {
        writeFile @"/dev/stdout" @"Hello, Самиздат!\n";
    };

    writeFile @"/dev/stdout" (sourceStringlet @0);
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout" (sourceStringlet @98765);
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout" (sourceStringlet @-12345);
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout" (sourceStringlet @[]);
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout" (sourceStringlet @[@-1]);
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout" (sourceStringlet @[@1 @-2]);
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout" (sourceStringlet @[@-1 @2 @300]);
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout" (sourceStringlet @"");
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout" (sourceStringlet @"\"Blort.\" \n");
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout" (sourceStringlet @[=]);
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout" (sourceStringlet @[@1=@2]);
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout" (sourceStringlet @[@1=@2 @888=@1]);
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout"
        (sourceStringlet
            @[@"fizmo"=@"omzif" @"igram"=@"margi" @"blort"=@"trolb"]);
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout" (sourceStringlet null);
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout" (sourceStringlet false);
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout" (sourceStringlet true);
    writeFile @"/dev/stdout" @"\n";
    writeFile @"/dev/stdout" @"\n";

    programText = readFile file;

    tokens = tokenize programText;
    <> if { <> ne tokens null; } {
        block = parse tokens;
        if { <> ne block null; } {
            # TODO: Bind block as a function using exposed
            # interface from samizdat-0, and call it.
            writeFile @"/dev/stdout" @"TODO: Run.\n";
            <> @0;
        } else {
            <> @1;
        };
    } else {
        <> @1;
    };
};

apply main ARGS;
