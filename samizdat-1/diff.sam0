# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Structural value diff.
#

READER ::

# Forward declaration of `innerDiff`.
innerDiff = forwardFunction();

# Reports a difference.
report = { context, v1, v2, message ::
    io0Note(message);
    listForEach(context)
        { ., item ::
            io0Note(format("    at %Q", item));
            <> null
        };
    io0Note("");
    io0Note(format("v1 = %q", v1));
    io0Note(format("v2 = %q", v2));
    <> false;
};

# Diffs tokens.
diffToken = { context, v1, v2 ::
    type1 = tokenType(v1);
    type2 = tokenType(v2);
    has1 = tokenHasValue(v1);
    has2 = tokenHasValue(v2);
    value1 = tokenValue(v1, null);
    value2 = tokenValue(v2, null);

    <> and
        { <> innerDiff(context, "type", type1, type2) }
        { <> innerDiff(context, "hasValue", has1, has2) }
        { <> innerDiff(context, "value", value1, value2) }
};

# Diffs ints.
diffInt = { context, v1, v2 ::
    <> report(context, v1, v2, "Different ints.")
};

# Diffs maps.
diffMap = { <out> context, v1, v2 ::
    size1 = lowSize(v1);
    size2 = lowSize(v2);

    <> and
        { <> innerDiff(context, "size", size1, size2) }
        {
            mapForEach(v1)
                { key, value ::
                    ifVoid { <> mapGet(v2, key) }
                        {
                            report([context*, key], v1, v2,
                                "Key mismatch.");
                            <out> false
                        }
                };
            <> true
        }
        {
            mapForEach(v1)
                { key, value ::
                    value2 = mapGet(v2, key);
                    ifFalse
                        { <> innerDiff(context, ["key"=key], value, value2) }
                        { <out> false }
                };
            <> true
        }
};

# Diffs lists.
diffList = { context, v1, v2 ::
    size1 = lowSize(v1);
    size2 = lowSize(v2);

    <> and
        { <> innerDiff(context, "size", size1, size2) }
        {
            listForEach(v1)
                { index, elem ::
                    innerDiff(context, index, elem, listNth(v2, index))
                };
            <> false
        }
};

# Diffs strings.
diffString = { context, v1, v2 ::
    <> report(context, v1, v2, "Different strings.")
};

# Diffs uniqlets.
diffUniqlet = { context, v1, v2 ::
    <> report(context, v1, v2, "Different uniqlets.")
};

# Mapping from type names to diff functions.
DIFF_FUNCTIONS = [
    "token"   = diffToken,
    "int"     = diffInt,
    "list"    = diffList,
    "map"     = diffMap,
    "string"  = diffString,
    "uniqlet" = diffUniqlet
];

# Inner diff. Returns an `eq` result.
innerDiffImpl = { context, newContext, v1, v2 ::
    type1 = lowType(v1);
    type2 = lowType(v2);
    innerContext = listAdd(context, [newContext, type1]);

    <> ifTrue { <> ne(v1, v2) }
        {
            type1 = lowType(v1);
            type2 = lowType(v2);

            <> ifTrue { <> ne(type1, type2) }
                {
                    <> report(context, v1, v2,
                        format("Types differ: %q %q", type1, type2))
                }
                {
                    <> mapGet(DIFF_FUNCTIONS, type1)(innerContext, v1, v2)
                }
        }
        { <> true }
};
innerDiff(innerDiffImpl);

# Compares two values structurally, reporting on the differences.
diff = { v1, v2 ::
    <> innerDiff([], "top", v1, v2)
};

<> ["diff" = diff]
