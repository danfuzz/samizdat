# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Samizdat Layer 0 tree parser
#

#
# Helper functions
#
# Note: All of the meta-rule functions accept as rules either
# parsing functions per se or simple highlets to represent token-matching
# rules.
#

# Meta-helper function, which transforms a highlet "rule" into a
# token-matching rule per se.
transformTokenRule = { rule ::
    <> ifTrue { <> isHighlet rule }
        { <> tokenRule rule }
        { <> rule }
};

# Returns a rule which succeeds if a given other rule succeeds, and
# if so runs the given result filter function, passing it the rule
# result, to produce the final result of processing.
filterRule = { rule filterFunction ::
    <> { reader ::
        <> ifValue { <> rule reader } filterFunction
    }
};

# Returns a rule which succeeds if the given token type is successfully
# read.
tokenRule = { token ::
    type = highletType token;

    <> { reader ::
        <> ifValue { <> reader @peek }
            { got ::
                <> ifTrue { <> eq type (highletType got) }
                    {
                        reader @read;
                        <> got
                    }
            }
    }
};

# Returns a rule which succeeds if all of a list of other rules
# succeeds in order (said list given in the form of separate arguments
# to this function). The result, if successful, is a listlet of all
# the rule results. This effectively implements the "adjacency operator"
# in PEG.
allRule = { rules* ::
    finalRules = listletMap rules transformTokenRule;

    <> { reader ::
        doAll = { rule rest* ::
            <> ifValue { <> rule reader }
                { firstResult ::
                    <> ifTrue { <> eq rest @[] }
                        { <> @[firstResult] }
                        {
                            <> ifValue { <> apply doAll rest }
                                { result ::
                                    <> listletPrepend firstResult result }
                        }
                }
        };

        mark = reader @at;

        <> ifValue { <> apply doAll finalRules }
            { result :: <> result }
            { reader @reset mark }
    }
};

# Returns a rule which succeeds if any of a list of other rules
# succeeds (said list given in the form of separate arguments to this
# function), trying them in order. The result is the same as the
# result of whichever rule succeeded, or void if all the alternatives
# failed. This effectively implements the `|` operator in PEG.
orRule = { rules* ::
    finalRules = listletMap rules transformTokenRule;

    <> { reader ::
        doOr = { rule rest* ::
            <> ifValue { <> rule reader }
                { result :: <> result }
                {
                    <> ifTrue { <> ne rest @[] }
                        { <> apply doOr rest }
                }
        };

        <> apply doOr finalRules;
    }
};

# Returns a rule which optionally parses a given other rule. The
# rule when run always succeeds, yielding a listlet. The listlet will
# have either zero or one element, depending on whether the inner
# rule was matched. This effectively implements the `?` suffix in PEG.
questRule = { rule ::
    finalRule = transformTokenRule rule;

    <> { reader ::
        <> ifValue { <> finalRule reader }
            { result :: <> @[result] }
            { <> @[] }
    }
};

# Returns a rule which parses zero or more repetitions of a given other
# rule. The rule when run always succeeds, yielding a listlet of all
# the results of matching. It will be a zero-length listlet if in fact
# the inner rule never matched. This effectively implements the `*`
# suffix in PEG.
starRule = { rule ::
    finalRule = transformTokenRule rule;

    <> { reader ::
        <> whileReduce @[]
            { result ::
                <> ifValue { <> finalRule reader }
                    { match :: <> listletAppend result match }
            }
    }
};

# Returns a rule which parses one or more repetitions of a given other
# rule. The rule when successful yields a listlet of all the results of
# matching and will be of size one or more. This effectively implements
# the `+` suffix in PEG.
plusRule = { rule ::
    <> filterRule
        (allRule rule (starRule rule))
        { result :: <> apply listletPrepend result }
};

# Returns a `call` node.
makeCall = { function actuals* ::
    <> [:@call @[@function=function @actuals=actuals]:]
};


#
# Grammar rules
#
# The following is a near-transliteration of the tree grammar in
# the *Samizdat Layer 0* specification.
#

# These are effectively forward declarations.
parseAtom = { reader :: <> parseAtomImpl reader };
parseExpression = { reader :: <> parseExpressionImpl reader };
parseFunction = { reader :: <> parseFunctionImpl reader };

# Parses a `call` node.
parseCall = filterRule
    (allRule
        parseAtom
        (orRule
            (plusRule parseAtom)
            (filterRule
                (allRule [:@"(":] [:@")":])
                { <> @[] })))
    { result ::
        <> apply makeCall (listletNth result @0) (listletNth result @1)
    };

# Parses a `highlet` node.
parseHighlet = filterRule
    (allRule
        [:@"[":]
        [:@":":]
        parseAtom
        (questRule parseAtom)
        [:@":":]
        [:@"]":])
    { result ::
        <> apply makeCall [:@varRef @makeHighlet:]
            (listletNth result @2)
            (listletNth result @3)
    };

# Parses a `uniqlet` node.
parseUniqlet = filterRule
    (tokenRule [:@"@@":])
    { <> makeCall [:@varRef @makeUniqlet:] };

# Parses a `binding` node.
parseBinding = filterRule
    (allRule parseAtom [:@"=":] parseAtom)
    { result ::
        <> @[(listletNth result @0) (listletNth result @2)]
    };

# Parses a `maplet` node.
parseMaplet = filterRule
    (allRule [:@"@":] [:@"[":] (plusRule parseBinding) [:@"]":])
    { result ::
        bindings = apply listletCat (listletNth result @2);
        <> apply makeCall [:@varRef @makeMaplet:] bindings
    };

# Parses a `emptyMaplet` node.
parseEmptyMaplet = filterRule
    (allRule [:@"@":] [:@"[":] [:@"=":] [:@"]":])
    { <> [:@literal @[=]:] };

# Parses a `listlet` node.
parseListlet = filterRule
    (allRule [:@"@":] [:@"[":] (plusRule parseAtom) [:@"]":])
    { result ::
        <> apply makeCall [:@varRef @makeListlet:] (listletNth result @2)
    };

# Parses a `emptyListlet` node.
parseEmptyListlet = filterRule
    (allRule [:@"@":] [:@"[":] [:@"]":])
    { <> [:@literal @[]:] };

# Parses a `stringlet` node.
parseStringlet = filterRule
    (allRule
        [:@"@":]
        (orRule [:@string:] [:@identifier:]))
    { result :: <> [:@literal (highletValue (listletNth result @1)):] };

# Parses an `intlet` node.
parseIntlet = filterRule
    (allRule [:@"@":] (questRule [:@"-":]) [:@integer:])
    { result ::
        sign = ifTrue { <> eq (listletNth result @1) @[] }
            { <> @1 } { <> @-1 };
        value = imul sign (highletValue (listletNth result @2));
        <> [:@literal value:]
    };

# Parses a `varRef` node.
parseVarRef = filterRule
    (tokenRule [:@identifier:])
    { result :: <> [:@varRef (highletValue result):] };

# Parses a `varDef` node.
parseVarDef = filterRule
    (allRule [:@identifier:] [:@"=":] parseExpression)
    { result ::
        name = highletValue (listletNth result @0);
        value = listletNth result @2;
        <> [:@varDef @[@name=name @value=value]:]
    };

# Parses a `parenExpression` node.
parseParenExpression = filterRule
    (allRule [:@"(":] parseExpression [:@")":])
    { result :: <> listletNth result @1 };

# Parses an `atom` node.
parseAtomImpl = orRule parseVarRef parseIntlet parseStringlet
    parseEmptyListlet parseListlet parseEmptyMaplet parseMaplet
    parseUniqlet parseHighlet parseFunction parseParenExpression;

# Parses an `expression` node.
parseExpressionImpl = orRule parseCall parseAtom;

# Parses a `statement` node.
parseStatement = orRule parseVarDef parseExpression;

# Parses a `yield` node.
parseYield = filterRule
    (allRule [:@"<>":] parseExpression (starRule [:@";":]))
    { result :: <> listletNth result @1; };

# Parses a `formal` node.
parseFormal = filterRule
    (allRule
        (filterRule
            (tokenRule [:@identifier:])
            { result :: <> @[@name = (highletValue result)] })
        (filterRule
            (questRule
                (orRule [:@"*":] [:@"?":]))
            { result ::
                <> ifValue { <> listletNth result @0 }
                    { repeatToken :: <> @[@repeat = repeatToken] }
                    { <> @[=] }
            }))
    { result :: <> apply mapletAdd result };

# Parses a `formals` node.
parseFormals = filterRule
    (plusRule parseFormal)
    { result :: <> [:@formals result:] };

# `program` node helper: Parses `(formals? @"::")?`, yielding a maplet
# (possibly empty).
parseProgram1 = filterRule
    (questRule
        (filterRule
            (allRule (questRule parseFormals) [:@"::":])
            { result ::
                formals = listletNth result @0;
                <> ifValue { <> listletNth formals @0 }
                    { result :: <> @[@formals=result] }
                    { <> @[=] }
            }))
    { result ::
        <> ifValue { <> listletNth result @0 }
            { result :: <> result }
            { <> @[=] }
    };

# `program` node helper: Parses `(statement | yield)?`, yielding
# a maplet that maps `@yield` and `@statements`. Always Succeeds.
parseProgram2 = filterRule
    (questRule
        (orRule
            (filterRule
                parseStatement
                { result :: <> @[@statements=@[result] @yield=@[=]] })
            (filterRule
                parseYield
                { result :: <> @[@statements=@[] @yield=@[@yield=result]] })))
    { result ::
        <> ifValue { <> listletNth result @0 }
            { result :: <> result }
            { <> @[@statements=@[] @yield=@[=]] }
    };

# Parses a `program` node.
parseProgram = filterRule
    (allRule
        parseProgram1
        (starRule [:@";":])
        (starRule
            (filterRule
                (allRule parseStatement (plusRule [:@";":]))
                { result :: <> listletNth result @0 }))
        parseProgram2)
    { result ::
        formals = listletNth result @0;
        mostStatements = listletNth result @2;
        lastClause = listletNth result @3;
        statements = listletAdd mostStatements
            (mapletGet lastClause @statements);
        <> [:
            @function
            (mapletCat
                formals
                @[@statements=statements]
                (mapletGet lastClause @yield))
        :]
    };

# Parses a `function` node.
parseFunctionImpl = filterRule
    (allRule [:@"{":] parseProgram [:@"}":])
    { result :: <> listletNth result @1 };


#
# Main `parse` function
#

# Parses a listlet of tokens as a program, using Samizdat Layer 0 tree
# syntax. Returns a `function` node.
parse = { tokens ::
    theReader = reader tokens;
    theProgram = parseProgram theReader;

    ifFalse { <> theReader @eof }
        {
            io0Note @"Pending tokens:";
            while {
                <> ifValue { <> theReader @read }
                    { token ::
                        io0Note (format @"    %q" token);
                        <> true
                    }
                    { <> false }
            };
            io0Die @"Extra tokens at end of program."
        };

    <> theProgram;
};

<> @[@parse = parse];
