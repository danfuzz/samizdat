#!/bin/bash
#
# Copyright 2014 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>


#
# General setup
#

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function initProg {
    local newp prog="$0"

    while newp="$(readlink "${prog}")"; do
        [[ ${newp} =~ ^/ ]] && prog="${newp}" || prog="${prog%/*}/${newp}"
    done

    progName="${prog##*/}"
    progDir="$(cd "${prog%/*}"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}

initProg
. "${progDir}/blur-utils.sh"


#
# Argument parsing
#

# Error flag.
error=0

# Identification name (optional).
id=''

# Source directory.
fromDir=''

# Target directory.
toDir=''

while [[ $1 != '' ]]; do
    opt="$1"
    if [[ ${opt} == '--' ]]; then
        shift
        break
    elif [[ ${opt} == '--help' ]]; then
        error='usage'
    elif [[ ${opt} =~ ^--id=(.*) ]]; then
        id="${BASH_REMATCH[1]}"
    elif [[ ${opt} =~ ^--from-dir=(.*) ]]; then
        fromDir="${BASH_REMATCH[1]}"
    elif [[ ${opt} =~ ^--to-dir=(.*) ]]; then
        toDir="${BASH_REMATCH[1]}"
    elif [[ ${opt} =~ ^- ]]; then
        echo "Unknown option: ${opt}" 1>&2
        error=1
    else
        break
    fi
    shift
done
unset opt

# Files to copy.
files=("$@")

if [[ ${error} == 0 ]]; then
    if [[ ${fromDir} == '' ]]; then
        echo 'Missing option: --from-dir' 1>&2
        error=1
    fi
    if [[ ${toDir} == '' ]]; then
        echo 'Missing option: --to-dir' 1>&2
        error=1
    fi
fi

if [[ ${error} != 0 ]]; then
    echo 1>&2 "${progName} [--id=<name>]" \
        "--from-dir=<name> --to-dir=<name> file..."
    if [[ ${error} == 'usage' ]]; then
        error=0
    fi
    exit ${error}
fi


#
# Main script
#

# Make the directories absolute, if not already.

fromDir="$(absPath "${fromDir}")"
toDir="$(absPath "${toDir}")"

# Set up a identification line, if asked.

idLine=''
if [[ ${id} != '' ]]; then
    printf -v triggerLine '  id %q\n' "${id}"
fi

# Emit a rule for each named file and each target directory.

for f in "${files[@]}"; do
    if [[ ${f} =~ /$ ]]; then
        echo "Invalid file name (trailing slash): ${f}" 1>&2
        error=1
        continue
    elif [[ ${f} =~ ^/ ]]; then
        echo "Invalid file name (leading slash): ${f}" 1>&2
        error=1
        continue
    fi

    targetFile="$(absPath ${toDir}/${f})"
    sourceFile="$(absPath ${fromDir}/${f})"
    targetDir="${targetFile%/*}"
    rule-mkdir-once "${targetDir}"

    printf 'start\n'
    printf '%s' "${triggerLine}"
    printf '  target %q\n' "${targetFile}"
    printf '  source %q\n' "${targetDir}"
    printf '  source %q\n' "${sourceFile}"
    printf '  msg Copy: %q\n' "${sourceFile}"
    printf '  cmd cp %q %q\n' "${sourceFile}" "${targetFile}"
    printf 'end\n'
done

exit ${error}
