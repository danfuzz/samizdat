#!/bin/bash
#
# Copyright 2014 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>


#
# General setup
#

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function initProg {
    local newProg prog="$0"

    while [[ -h ${prog} ]]; do
        [[ "$(/bin/ls -ld "${prog}")" =~ .*' -> '(.*)$ ]]
        newProg="${BASH_REMATCH[1]}"
        if [[ ${newProg} =~ ^/ ]]; then
            prog="${newProg}"
        else
            prog="${foo%/*}/${newProg}"
        fi
    done

    progName="${prog##*/}"
    progDir="$(cd "${prog%/*}"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}

initProg
. "${progDir}/blur-utils.sh"


#
# Argument parsing
#

# Error flag.
error=0

# File to find rules in.
rulesFile='-'

# Verbosity level.
spew=1

while [[ $1 != '' ]]; do
    opt="$1"
    if [[ ${opt} == '--' ]]; then
        shift
        break
    elif [[ ${opt} == '--help' ]]; then
        error='usage'
    elif [[ ${opt} =~ ^--rules=(.*) ]]; then
        rulesFile="${BASH_REMATCH[1]}"
    elif [[ ${opt} =~ ^--quiet ]]; then
        spew=0
    elif [[ ${opt} =~ ^--verbose=(.*) ]]; then
        spew="${BASH_REMATCH[1]}"
    elif [[ ${opt} =~ ^- ]]; then
        echo "Unknown option: ${opt}" 1>&2
        error=1
    else
        break
    fi
    shift
done
unset opt

# Initial targets (files or named ids).
targets=("$@")

if [[ ${error} != 0 ]]; then
    echo 1>&2 "${progName} [--rules=<file>] (target-file | id) ..."
    if [[ ${error} == 'usage' ]]; then
        error=0
    fi
    exit ${error}
fi

if [[ ${rulesFile} == '-' ]]; then
    rulesFile='/dev/stdin'
fi


#
# Logging / spew
#

# Current depth
DEPTH=0

# Increase status message depth.
function enterLayer {
    (( DEPTH++ ))
}

# Decrease status message depth.
function leaveLayer {
    (( DEPTH-- ))
}

# Emit a status message.
function msg {
    local label=log

    if [[ $1 == '--err' ]]; then
        label=err
        shift
    elif [[ $1 == '--quiet' ]]; then
        label=quiet
        shift
    fi

    local line="$@"

    if (( spew == 0 )); then
        # Allow `err` or `quiet` but nothing else.
        if [[ ${label} == log ]]; then
            return
        fi
    elif [[ ${label} == quiet ]]; then
        # Message is only for when running quiet, and we aren't quiet.
        return
    fi

    if (( spew != 0 )); then
        local i
        for (( i = 0; i < DEPTH; i++ )); do
            printf '  '
        done
    fi

    if (( spew <= 1 )); then
        local max=$(( 78 - DEPTH * 2 ))
        if (( ${#line} > max )); then
            local len=$(( max / 2 - 3 ))
            if (( len < 20 )); then
                len=20
            fi
            line="${line:0:${len}} ... ${line:$(( ${#line} - len ))}"
        fi
    fi

    printf '%s\n' "${line}"
}


#
# Helper functions
#

# Exits success if the given word is a defined id.
function isId {
    local id="$1"
    local i

    for (( i = 0; i < ${#IDS[@]}; i++ )); do
        if [[ "${IDS[$i]}" == "${id}" ]]; then
            return 0
        fi
    done

    return 1
}

# Collects all the rules into the `RULES` array (one element per rule). This
# also canonicalizes the spacing of rules, so that there's no initial indent,
# and one space after the command. Finally, this also sets up the `IDS` array,
# which lists all named ids.
RULES=()
IDS=()
function rulesInit {
    local cmd rest space curRule=()

    while read -r cmd rest; do
        if [[ ${rest} != '' ]]; then
            space=' '
        else
            space=''
        fi
        curRule+=("${cmd}${space}${rest}")
        case "${cmd}" in
            (start)
                curRule=()
                ;;
            (end)
                unset curRule[$((${#curRule[@]} - 1))]
                RULES+=("$(printf '%s\n' "${curRule[@]}")")
                curRule=()
                ;;
            (id)
                local id=("$(unquote "${rest}")")
                if ! isId "${id}"; then
                    IDS+=("${id}")
                fi
                ;;
        esac
    done < "${rulesFile}"
}

# Outputs a newline-separated list of all indices into `RULES` for rules
# associated with the given target.
function rulesFor {
    local target="$1"
    local i cmd rest cmdMatch=target

    if isId "${target}"; then
        cmdMatch=id
    fi

    for (( i = 0; i < ${#RULES[@]}; i++ )); do
        while read -r cmd rest; do
            if [[ ${cmd} != ${cmdMatch} ]]; then
                continue
            fi

            if [[ ${cmd} == id ]]; then
                if [[ "$(unquote "${rest}")" == ${target} ]]; then
                    echo "$i"
                fi
            else
                if [[ "$(unquoteAbs "${rest}")" == ${target} ]]; then
                    echo "$i"
                fi
            fi
        done <<< "${RULES[$i]}"
    done
}

# Runs the given rule if any of:
# * it has no sources
# * it has no targets
# * at least one target doesn't exist
# * at least one existing target has an older modification time than at least
#   one source
function runIfNeeded {
    # Split the rule into an array of lines.
    local rule=()

    local oldIfs="${IFS}"
    IFS=$'\n'
    rule=($1)
    IFS="${oldIfs}"

    local line cmd rest

    # Check asserts and moots.
    for line in "${rule[@]}"; do
        [[ ${line} =~ ^' '*([^ ]*)' '*(.*)$ ]]
        cmd="${BASH_REMATCH[1]}"
        rest="${BASH_REMATCH[2]}"
        case "${cmd}" in
            (moot)
                msg '??' "${rest}"
                bash -c "${rest}"
                if [[ $? == 0 ]]; then
                    # Moot test succeeded, which means that the rule doesn't
                    # need to execute anything.
                    return
                fi
                ;;
            (assert)
                msg '!!' "${rest}"
                bash -c "${rest}"
                if [[ $? != 0 ]]; then
                    # Assert failed, which is a real error.
                    msg --quiet '!!' "${rest}"
                    msg --err "Assert failed."
                    return 1
                fi
                ;;
        esac
    done

    local newestSource=-1 oldestTarget=-1 stamp

    for line in "${rule[@]}"; do
        [[ ${line} =~ ^' '*([^ ]*)' '*(.*)$ ]]
        cmd="${BASH_REMATCH[1]}"
        rest="${BASH_REMATCH[2]}"
        case "${cmd}" in
            (source)
                rest="$(unquoteAbs "${rest}")"
                if [[ ! -e "${rest}" ]]; then
                    msg --err "Missing source: ${rest}"
                    return 1
                fi
                stamp="$(modTime "${rest}")"
                if (( stamp > newestSource )); then
                    newestSource="${stamp}"
                fi
                ;;
            (target)
                rest="$(unquoteAbs "${rest}")"
                if [[ ! -e "${rest}" ]]; then
                    # Missing target. Means that we need to run the rule
                    # (unless previously mooted).
                    newestSource=-1
                    oldestTarget=-1
                    break
                fi
                stamp="$(modTime "${rest}")"
                if (( oldestTarget == -1 || stamp < oldestTarget )); then
                    oldestTarget="${stamp}"
                fi
                ;;
        esac
    done

    if (( newestSource > 0 && oldestTarget > 0 )); then
        if (( newestSource < oldestTarget )); then
            # Everything is up-to-date.
            return
        fi
    fi

    # Need to run the associated commands.

    for line in "${rule[@]}"; do
        [[ ${line} =~ ^' '*([^ ]*)' '*(.*)$ ]]
        cmd="${BASH_REMATCH[1]}"
        rest="${BASH_REMATCH[2]}"
        case "${cmd}" in
            (cmd)
                msg '$$' "${rest}"
                bash -c "${rest}"
                local status="$?"
                if [[ ${status} != 0 ]]; then
                    msg --quiet '$$' "${rest}"
                    msg --err "Non-zero exit status: ${status}"
                    return 1
                fi
                ;;
            (msg)
                rest="$(bash -c "echo ${rest}")"
                msg "${rest}"
                ;;
        esac
    done
}

# Attempts to satisfy the indicated target. The target can be either a file
# name or a named id. This works by finding all the sources associated with
# the target, attempting (recursively) to satisfy them, and then running any
# commands associated with the target.
#
# If a target has already been satisfied at least once during this run,
# then it will not be tried again.
SATISFIED=()
PENDING=()
function satisfyTarget {
    local target="$1"
    local i

    if ! isId "${target}"; then
        target="$(absPath "${target}")"
    fi

    for (( i = 0; i < ${#SATISFIED[@]}; i++ )); do
        if [[ ${target} == ${SATISFIED[$i]} ]]; then
            # The target has already been satisfied due to earlier activity.
            msg "<> ${target}"
            return
        fi
    done

    for (( i = 0; i < ${#PENDING[@]}; i++ )); do
        if [[ ${target} == ${PENDING[$i]} ]]; then
            # The target is already in the middle of being satisfied.
            msg "Recursive dependency on target: ${target}"
            return 1
        fi
    done

    local rules=($(rulesFor "${target}"))

    if [[ ${#rules[@]} == 0 ]]; then
        if [[ ! -e "${target}" ]]; then
            echo 'No rules defined for non-existent target:' 1>&2
            echo "  ${target}" 1>&2
            return 1
        else
            msg "== ${target}"
            return
        fi
    fi

    msg ">> ${target}"
    enterLayer
    PENDING+=("${target}")

    local error=no

    for (( i = 0; i < ${#rules[@]}; i++ )); do
        if [[ ${error} == yes ]]; then
            break
        fi

        while read -r cmd rest; do
            if [[ ${cmd} == source ]]; then
                satisfyTarget "$(unquote "${rest}")"
                if [[ $? != 0 ]]; then
                    error=yes
                    break
                fi
            fi
        done <<< "${RULES[${rules[$i]}]}"
    done

    for (( i = 0; i < ${#rules[@]}; i++ )); do
        if [[ ${error} == yes ]]; then
            break
        fi

        runIfNeeded "${RULES[${rules[$i]}]}"
        if [[ $? != 0 ]]; then
            error=yes
        fi
    done

    leaveLayer
    msg "<< ${target}"

    SATISFIED+=("${target}")
    unset PENDING[$((${#PENDING[@]} - 1))]

    if [[ ${error} == yes ]]; then
        msg "Could not satisfy target: ${target}"
        return 1
    fi
}


#
# Main script
#

rulesInit

for (( i = 0; i < ${#targets[@]}; i++ )); do
    satisfyTarget "${targets[$i]}"
    if [[ $? != 0 ]]; then
        exit 1
    fi
done
