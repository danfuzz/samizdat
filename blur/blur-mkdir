#!/bin/bash
#
# Copyright 2014 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>


#
# General setup
#

# Preserve the original working dir as origDir.
origDir="${PWD}"

# Set progName to the program name, progDir to its directory, and baseDir
# to progDir's directory. Follows symlinks.
prog="$0"
while [[ -h ${prog} ]]; do
    [[ "$(/bin/ls -ld "${prog}")" =~ .*' -> '(.*)$ ]]
    newProg="${BASH_REMATCH[1]}"
    if [[ ${newProg} =~ ^/ ]]; then
        prog="${newProg}"
    else
        prog="$(dirname "${prog}")/${newProg}"
    fi
done
progName="$(basename "${prog}")"
progDir="$(dirname "${prog}")"
cd "${progDir}"
progDir="${PWD}"
cd ..
baseDir="${PWD}"
cd "${origDir}"
unset prog
unset newProg

. "${progDir}/blur-utils.sh"


#
# Argument parsing
#

# Error flag.
error=0

# Identification name (optional).
id=''

while [[ $1 != '' ]]; do
    opt="$1"
    if [[ ${opt} == '--' ]]; then
        shift
        break
    elif [[ ${opt} == '--help' ]]; then
        error='usage'
    elif [[ ${opt} =~ ^--id=(.*) ]]; then
        id="${BASH_REMATCH[1]}"
    elif [[ ${opt} =~ ^- ]]; then
        echo "Unknown option: ${opt}" 1>&2
        error=1
    else
        break
    fi
    shift
done
unset opt

# Directories to create.
dirs=("$@")

if [[ ${error} != 0 ]]; then
    echo 1>&2 "${progName} [--id=<name>] dir..."
    if [[ ${error} == 'usage' ]]; then
        error=0
    fi
    exit ${error}
fi


#
# Main script
#

# Set up a identification line, if asked.

idLine=''
if [[ ${id} != '' ]]; then
    printf -v triggerLine '  id %q\n' "${id}"
fi

# Emit a rule set for each named directory.

for d in "${dirs[@]}"; do
    d="$(absPath "$d")"
    if [[ $d =~ /$ ]]; then
        # Remove trailing slash.
        d="${d%/}"
    fi

    printf 'start\n'
    printf '%s' "${triggerLine}"
    printf '  target %q\n' "${d}"
    printf '  moot [[ -d %q ]]\n' "${d}"
    printf '  assert [[ ! -e %q ]]\n' "${d}"
    printf '  cmd mkdir -p %q\n' "${d}"
    printf 'end\n'
done

exit ${error}
