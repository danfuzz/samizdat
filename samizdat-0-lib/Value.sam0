# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Value functions
#

#
# Private Definitions
#

# Performs a type check, for the given type name.
fn hasCoreType(value, type) {
    <> ifIs { <> eq(typeOf(value), type) }
        { <> value }
};


#
# Exported Definitions
#

# Documented in Samizdat Layer 0 spec.
fn eq(v1, v2) { <> totalOrderIs(v1, v2, 0) };

# Documented in Samizdat Layer 0 spec.
fn ge(v1, v2) { <> totalOrderIs(v1, v2, 1, 0) };

# Documented in Samizdat Layer 0 spec.
fn gt(v1, v2) { <> totalOrderIs(v1, v2, 1) };

# Documented in Samizdat Layer 0 spec.
fn isBox(value) {
    <> hasCoreType(value, Box)
};

# Documented in Samizdat Layer 0 spec.
fn isFunction(value) {
    <> hasCoreType(value, Function)
};

# Documented in Samizdat Layer 0 spec.
fn isGeneric(value) {
    <> hasCoreType(value, Generic)
};

# Documented in Samizdat Layer 0 spec.
fn isInt(value) {
    <> hasCoreType(value, Int)
};

# Documented in Samizdat Layer 0 spec.
fn isList(value) {
    <> hasCoreType(value, List)
};

# Documented in Samizdat Layer 0 spec.
fn isMap(value) {
    <> hasCoreType(value, Map)
};

# Documented in Samizdat Layer 0 spec.
fn isString(value) {
    <> hasCoreType(value, String)
};

# Documented in Samizdat Layer 0 spec.
fn isUniqlet(value) {
    <> hasCoreType(value, Uniqlet)
};

# Documented in Samizdat Layer 0 spec.
fn le(v1, v2) { <> totalOrderIs(v1, v2, -1, 0) };

# Documented in Samizdat Layer 0 spec.
fn lt(v1, v2) { <> totalOrderIs(v1, v2, -1) };

# Documented in Samizdat Layer 0 spec.
fn ne(v1, v2) { <> totalOrderIs(v1, v2, -1, 1) };

# Documented in Samizdat Layer 0 spec.
fn perGe(v1, v2) {
    <> ifNot { <> perEq(perOrder(v1, v2), -1) }
        { <> v2 }
};

# Documented in Samizdat Layer 0 spec.
fn perGt(v1, v2) {
    <> ifIs { <> perEq(perOrder(v1, v2), 1) }
        { <> v2 }
};

# Documented in Samizdat Layer 0 spec.
fn perLe(v1, v2) {
    <> ifNot { <> perEq(perOrder(v1, v2), 1) }
        { <> v2 }
};

# Documented in Samizdat Layer 0 spec.
fn perLt(v1, v2) {
    <> ifIs { <> perEq(perOrder(v1, v2), -1) }
        { <> v2 }
};

# Documented in Samizdat Layer 0 spec.
fn perNe(v1, v2) {
    <> ifNot { <> perEq(v1, v2) }
        { <> v2 }
};

<> [
    eq:         eq,
    ge:         ge,
    gt:         gt,
    isBox:      isBox,
    isFunction: isFunction,
    isGeneric:  isGeneric,
    isInt:      isInt,
    isList:     isList,
    isMap:      isMap,
    isString:   isString,
    isUniqlet:  isUniqlet,
    le:         le,
    lt:         lt,
    ne:         ne,
    perGe:      perGe,
    perGt:      perGt,
    perLe:      perLe,
    perLt:      perLt,
    perNe:      perNe
]
