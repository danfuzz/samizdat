# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Collection library functions: stringlet, listlet, and maplet
#
# These are all grouped together because the functionality implemented
# for each is similar to the others.
#


#
# Helper functions
#

# Generic for-each function. Instead of the value-to-iterate argument, this
# takes an `nthFunc` of one argument.
genericForEach = { nthFunc function <out> ::
    loopReduce @0 { index ::
        <> ifValue { <> (nthFunc index) }
            { item ::
                function item index;
                <> iadd index @1
            }
            { <out> }
    }
};

# Generic reduce function. Instead of the value-to-reduce argument, this
# takes an `nthFunc` of one argument.
genericReduce = { base nthFunc function <out> ::
    loopReduce @[base @0] { state ::
        result = listletNth state @0;
        index = listletNth state @1;
        <> ifValue { <> (nthFunc index) }
            { item ::
                nextResult = ifValue { <> function result item index }
                    { value :: <> value }
                    { <> result };
                <> @[nextResult (iadd index @1)]
            }
            { <out> result }
    }
};

# Generic map function. Instead of the value-to-map argument, this
# takes an `nthFunc` of one argument.
genericMap = { nthFunc function ::
    <> genericReduce @[] nthFunc
        { result item index ::
            <> ifValue { <> function item index }
                { value :: <> listletInsNth result (lowSize result) value }
                { <> result }
        }
};


#
# Listlet
#

# Documented in Samizdat Layer 0 spec.
#
# **Note:** This one is out-of (alphabetical) order, because it's used
# by other functions in this section, and *Samizdat Layer 0* does not allow
# use-before-def.
listletReduce = { base listlet function ::
    <> genericReduce base { n :: <> listletNth listlet n } function
};

# Documented in Samizdat Layer 0 spec.
listletAppend = { listlet value ::
    <> listletInsNth listlet (lowSize listlet) value
};

# Documented in Samizdat Layer 0 spec.
listletCat = { listlet rest* ::
    <> listletReduce listlet rest
        { reduction value :: <> listletAdd reduction value }
};

# Documented in Samizdat Layer 0 spec.
listletForEach = { listlet function ::
    <> genericForEach { n :: <> listletNth listlet n } function
};

# Documented in Samizdat Layer 0 spec.
listletMap = { listlet function ::
    <> genericMap { n :: <> listletNth listlet n } function
};

# Documented in Samizdat Layer 0 spec.
listletPrepend = { value listlet ::
    <> listletInsNth listlet @0 value
};


#
# Maplet
#

# Documented in Samizdat Layer 0 spec.
#
# See comment in `listletReduce` (above) about in-file ordering.
mapletReduce = { base maplet function ::
    <> genericReduce base { n :: <> mapletNth maplet n}
        { reduction mapping ::
            <> function reduction
                (mapletNthValue mapping @0)
                (mapletNthKey mapping @0)
        }
};

# Documented in Samizdat Layer 0 spec.
mapletCat = { maplet rest* ::
    <> listletReduce maplet rest
        { reduction value :: <> mapletAdd reduction value }
};

# Documented in Samizdat Layer 0 spec.
mapletForEach = { maplet function ::
    genericForEach { n :: <> mapletNth maplet n }
        { mapping ::
            function (mapletNthValue mapping @0) (mapletNthKey mapping @0)
        }
};

# Documented in Samizdat Layer 0 spec.
mapletMap = { maplet function ::
    <> mapletReduce @[=] maplet
        { reduction value key ::
            <> ifValue { <> function value key }
                { newValue :: <> mapletPut reduction key newValue }
                { <> reduction }
        }
};


#
# Stringlet
#

# Documented in Samizdat Layer 0 spec.
#
# See comment in `listletReduce` (above) about in-file ordering.
stringletReduce = { base stringlet function ::
    <> genericReduce base { n :: <> stringletNth stringlet n } function
};

# Documented in Samizdat Layer 0 spec.
stringletCat = { stringlet rest* ::
    <> listletReduce stringlet rest
        { reduction value :: <> stringletAdd reduction value }
};

# Documented in Samizdat Layer 0 spec.
stringletForEach = { stringlet function ::
    <> genericForEach { n :: <> stringletNth listlet n } function
};

# Documented in Samizdat Layer 0 spec.
stringletMap = { stringlet function ::
    <> genericMap { n :: <> stringletNth stringlet n } function
};


#
# Exports
#

<> @[
    @listletAppend = listletAppend
    @listletCat = listletCat
    @listletForEach = listletForEach
    @listletMap = listletMap
    @listletPrepend = listletPrepend
    @listletReduce = listletReduce
    @mapletCat = mapletCat
    @mapletForEach = mapletForEach
    @mapletMap = mapletMap
    @mapletReduce = mapletReduce
    @stringletCat = stringletCat
    @stringletForEach = stringletForEach
    @stringletMap = stringletMap
    @stringletReduce = stringletReduce
]
