# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Collection library functions: string, list, and map
#
# These are all grouped together because the functionality implemented
# for each is similar to the others.
#


#
# Helper functions
#

# Generic for-each function. Instead of the value-to-iterate argument, this
# takes an `nthFunc` of one argument.
fn genericForEach(function, nthFunc) {
    loopReduce(0) { index ::
        <> ifValue { <> nthFunc(index) }
            { item ::
                function(index, item);
                <> [iadd(index, 1)]
            }
            { return }
    }
};

# Generic reduce function. Instead of the value-to-reduce argument, this
# takes an `nthFunc` of one argument.
fn genericReduce(function, nthFunc, base) {
    loopReduce(base, 0) { result, index ::
        <> ifValue { <> nthFunc(index) }
            { item ::
                def nextResult = ifValue { <> function(result, index, item) }
                    { value :: <> value }
                    { <> result };
                <> [nextResult, iadd(index, 1)]
            }
            { return result }
    }
};


#
# List
#

# Documented in Samizdat Layer 0 spec.
fn listButFirst(list, notFound?) {
    <> ifIs { <> eq(list, []) }
        { <> notFound* }
        { <> listSlice(list, 1) }
};

# Documented in Samizdat Layer 0 spec.
fn listButLast(list, notFound?) {
    <> ifIs { <> eq(list, []) }
        { <> notFound* }
        { <> listSlice(list, 0, isub(lowSize(list), 1)) }
};

# Documented in Samizdat Layer 0 spec.
fn listFirst(list, notFound?) {
    <> listNth(list, 0, notFound*)
};

# Documented in Samizdat Layer 0 spec.
fn listLast(list, notFound?) {
    <> listNth(list, isub(lowSize(list), 1), notFound*)
};


#
# Map
#

# Documented in Samizdat Layer 0 spec.
#
# **Note:** This one is out-of (alphabetical) order, because it's used
# by other functions in this section, and *Samizdat Layer 0* does not allow
# use-before-def.
fn mapReduce(function, base, map) {
    <> genericReduce(base)
        { reduction, ., mapping ::
            <> function(reduction, mapKey(mapping), mapValue(mapping))
        }
        { n :: <> mapNth(map, n) }
};

# Documented in Samizdat Layer 0 spec.
fn mapForEach(function, map) {
    genericForEach
        { ., mapping :: function(mapKey(mapping), mapValue(mapping)) }
        { n :: <> mapNth(map, n) }
};

# Documented in Samizdat Layer 0 spec.
fn mapMap(function, map) {
    <> mapReduce([:], map)
        { reduction, key, value ::
            <> ifValue { <> function(key, value) }
                { newValue :: <> [reduction*, (key): newValue] }
                { <> reduction }
        }
};


#
# String
#

# Documented in Samizdat Layer 0 spec.
fn stringFromTokenList(tokens) {
    <> listReduce("", tokens)
        { result, ., token :: <> stringAdd(result, tokenType(token)) };
};


#
# Exports
#

<> [
    listButFirst: listButFirst,
    listButLast: listButLast,
    listFirst: listFirst,
    listLast: listLast,
    mapForEach: mapForEach,
    mapMap: mapMap,
    mapReduce: mapReduce,
    stringFromTokenList: stringFromTokenList
]
