# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Collection library functions: stringlet, listlet, and maplet
#
# These are all grouped together because the functionality implemented
# for each is similar to the others.
#


#
# Helper functions
#

# Generic reduce function, which in addition to the three arguments
# accepted by the exported reduce functions, also takes the function
# to use to get the `nth` element from the value.
genericReduce = { base value func nthFunc ::
    reduction = whileReduce @[base @0] { state ::
        result = listletNth state @0;
        index = listletNth state @1;
        <> ifValue { <> (nthFunc value index) }
            { item :: <> @[(func result item index) (iadd index @1)] }
    };

    <> listletNth reduction @0;
};


#
# Listlet
#

# Documented in Samizdat Layer 0 spec.
listletAppend = { listlet value ::
    <> listletInsNth listlet (lowSize listlet) value
};

# Documented in Samizdat Layer 0 spec.
listletCat = { listlet rest* ::
    <> listletReduce listlet rest
        { reduction value :: <> listletAdd reduction value }
};

# Documented in Samizdat Layer 0 spec.
listletMap = { listlet func ::
    <> listletReduce @[] listlet
        { reduction value index ::
            <> listletAppend reduction (func value index)
        }
};

# Documented in Samizdat Layer 0 spec.
listletPrepend = { value listlet ::
    <> listletInsNth listlet @0 value
};

# Documented in Samizdat Layer 0 spec.
listletReduce = { base listlet func ::
    <> genericReduce base listlet func listletNth
};


#
# Maplet
#

# Documented in Samizdat Layer 0 spec.
mapletCat = { maplet rest* ::
    <> listletReduce maplet rest
        { reduction value :: <> mapletAdd reduction value }
};

# Documented in Samizdat Layer 0 spec.
mapletMap = { maplet func ::
    <> mapletReduce @[=] maplet
        { reduction value key :: <> mapletPut reduction key (func value key) }
};

# Documented in Samizdat Layer 0 spec.
mapletReduce = { base maplet func ::
    <> listletReduce base (mapletKeys maplet)
        { reduction key :: <> func reduction (mapletGet maplet key) key }
};


#
# Stringlet
#

# Documented in Samizdat Layer 0 spec.
stringletCat = { stringlet rest* ::
    <> listletReduce stringlet rest
        { reduction value :: <> stringletAdd reduction value }
};

# Documented in Samizdat Layer 0 spec.
stringletMap = { stringlet func ::
    <> stringletReduce @[] stringlet
        { reduction value index ::
            <> listletAppend reduction (func value index)
        }
};

# Documented in Samizdat Layer 0 spec.
stringletReduce = { base stringlet func ::
    <> genericReduce base stringlet func stringletNth
};


#
# Exports
#

<> @[
    @listletAppend = listletAppend
    @listletCat = listletCat
    @listletMap = listletMap
    @listletPrepend = listletPrepend
    @listletReduce = listletReduce
    @mapletCat = mapletCat
    @mapletMap = mapletMap
    @mapletReduce = mapletReduce
    @stringletCat = stringletCat
    @stringletMap = stringletMap
    @stringletReduce = stringletReduce
]
