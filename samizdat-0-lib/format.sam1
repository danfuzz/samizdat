# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Text formatting functions
#

#
# Helper definitions
#

# Formats a hex int argument.
fn doHex(arg) {
    <> stringFromInt(arg, 16)
};

# Mapping from format escape characters to their respective handler functions.
def FORMATTERS = [
    q:   sourceString,
    Q:   sourceStringUnadorned,
    s:   stringAdd, # `stringAdd` effectively asserts that `arg` is a string.
    x:   doHex
];

# Parses a format string, producing a list of strings-or-functions, where
# the strings are literal, and the functions are to be called on the
# `rest` arguments of a `format` call, in order.
def parFormat = {/
    (
        "%"
        (
            "%" { <> "%" }
        |
            ch = ["qQsx"]
            { <> mapGet(FORMATTERS, tokenType(ch)) }
        |
            # Undefined `%` escape, or string-final `%`.
            { <> "%" }
        )
    |
        chars = [! "%"]+
        { <> stringFromTokenList(chars) }
    )*
/};

# Converts a format string into a function that accepts arguments to
# format, and formats them as specified.
fn functionFromFormatString(formatString) {
    def formatList = pegApply(parFormat, formatString);

    <> { rest* ::
        def args = mutableBox(rest);
        def strings = listMap(formatList) { ., item ::
            <> ifIs { <> isString(item) }
                { <> item }
                {
                    def curArgs = boxGet(args);
                    def arg = listFirst(curArgs);
                    boxSet(args, listButFirst(curArgs));
                    <> item(arg)
                }
        };
        <> stringAdd(strings*)
    }
};


#
# Exported functions
#

# Documented in Samizdat Layer 0 spec.
fn format(formatString, rest*) {
    # This code is structured so that the call to `functionFromFormatString`
    # is pure and hence can be evaluated at call site compile/eval time,
    # leaving only the actual argument conversion and concatenation to do
    # when used.
    def formatFunction = functionFromFormatString(formatString);
    <> formatFunction(rest*);
};

<> [
    format: format
]
