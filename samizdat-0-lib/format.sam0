# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Value stringification
#

#
# Helper definitions
#

# This is int digits for bases up to 36, in order.
def INT_CHARS = "0123456789abcdefghijklmnopqrstuvwxyz";

# Helper for stringifying ints, which does most of the conversion,
# as well as prepending the given prefix.
fn intBody(start, value, base) {
    loopReduce("", value) { text, value ::
        <> ifIs { <> ne(value, 0) }
            {
                def digit = stringNth(INT_CHARS, imod(value, base));
                <> [stringAdd(digit, text), idiv(value, base)];
            }
            { return stringAdd(start, text) }
    }
};

# Map from int sign values to the appropriate stringifier for each.
def INT_SIGNS = [
    -1: { int, base :: <> intBody("-", ineg(int), base) },
    0:  { int, base :: <> "0" },
    1:  { int, base :: <> intBody("", int, base) }
];

# Stringifies an int using the given base.
fn stringFromIntBase(int, base) {
    <> mapGet(INT_SIGNS, isign(int))(int, base)
};

# Forward declaration of `sourceString`
def callSourceString = forwardFunction();

# Single-character strings `"\x7f;"` and `"\x9f;"`.
def CHAR_127 = charFromInt(127);
def CHAR_159 = charFromInt(159);

# Helper for optionally adorning results.
fn adornIf(adorn, before, value, after) {
    <> ifIs { <> logicFromBoolean(adorn) }
        { <> stringAdd(before, value, after) }
        { <> value }
};

# Helper which concatenates a list of list or map element stringifications.
# It assumes that every element is a string that starts with `", "`, and it
# removes that prefix from the first element. As a special case, returns
# the given `ifEmpty` if `elems` is empty.
fn collectionBody(elems, ifEmpty) {
    ifIs { <> eq(elems, []) }
        { return ifEmpty };

    def first = stringSlice(listNth(elems, 0), 2);
    <> stringAdd(first, listDelNth(elems, 0)*)
};

# Stringifies an int.
fn doInt(int, adorn) {
    <> stringFromIntBase(int, 10)
};

# Map of special-case characters to their stringified forms.
def SPECIAL_CHARS = [
    "\0": "\\0",
    "\n": "\\n",
    "\r": "\\r",
    "\t": "\\t",
    "\"": "\\\"",
    "\\": "\\\\"
];

# Helper for stringifying strings: Returns the converted form of the
# given character.
fn stringChar(ch) {
    <> ifValue { <> mapGet(SPECIAL_CHARS, ch) }
        { special :: <> special }
        {
            # This checks for the ranges of nonprinting control characters.
            <> ifIs { <> or { <> lt(ch, " ") }
                            { <> le(le(CHAR_127, ch), CHAR_159) } }
                {
                    <> stringAdd(
                        "\\x",
                        stringFromIntBase(intFromChar(ch), 16),
                        ";")
                }
                { <> ch }
        }
};

# These are all the characters which are allowed to start an identifier.
def IDENTIFIER_STARTS = [
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_"*: true
];

# These are all the characters which are allowed to be in an identifier.
def IDENTIFIER_CHARS = [
    IDENTIFIER_STARTS*,
    "0123456789"*: true
];

# Tokens with special conversions.
def TOKEN_SPECIALS = [
    (false): "false",
    (null):  "null",
    (true):  "true"
];

# Checks to see if the given value is a string with the form of an
# in-language identifier.
fn isIdentifier(string) {
    <> and
        { <> isString(string) }
        { <> gt(lowSize(string), 0) }
        { <> mapGet(IDENTIFIER_STARTS, stringNth(string, 0)) }
        {
            generatorForEach(
                filterGenerator(string)
                    { ch ::
                        ifNot { <> mapGet(IDENTIFIER_CHARS, ch) }
                            { return }
                    });
            <> true
        }
};

# Stringifies a key (or token type).
fn keyString(key) {
    ifIs { <> isIdentifier(key) }
        { return key };

    ifValue { <> mapGet(TOKEN_SPECIALS, key) }
        { string :: return stringAdd("(", string, ")") };

    <> callSourceString(key)
};

# Stringifies a string.
fn doString(string, adorn) {
    def bodyChars = filterGenerator(string) { ch :: <> stringChar(ch) };
    <> adornIf(adorn, "\"", stringAdd(bodyChars*), "\"")
};

# Stringifies a list.
fn doList(list, adorn) {
    def listElems = filterGenerator(list)
        { elem :: <> stringAdd(", ", callSourceString(elem)) };

    <> adornIf(adorn, "[", collectionBody([listElems*], ""), "]")
};

# Stringifies a map.
fn doMap(map, adorn) {
    def mapElems = filterGenerator(map)
        { mapping ::
            def key = keyString(mapKey(mapping));
            def value = callSourceString(mapValue(mapping));
            <> stringAdd(", ", key, ": ", value)
        };

    <> adornIf(adorn, "[", collectionBody([mapElems*], ":"), "]");
};

# Stringifies a token.
fn doToken(token, adorn) {
    ifValue { <> mapGet(TOKEN_SPECIALS, token) }
        { string :: return string };

    def type = tokenType(token);
    def typeString = keyString(type);
    def valueString = ifValue { <> tokenValue(token) }
        { value :: <> stringAdd(": ", callSourceString(value)) }
        { <> "" };

    ifIs { <> and { <> isString(type) } { <> eq(valueString, "") } }
        { return adornIf(adorn, "@", typeString, "") };

    <> adornIf(adorn, "@[", stringAdd(typeString, valueString), "]")
};

# Stringifies a uniqlet.
fn doUniqlet(uniqlet, .) {
    <> "@@"
};

# Stringifies an unknown value type.
fn doUnknown(unknown, .) {
    <> stringAdd(
        "[(unknown) ",
        callSourceString(lowType(value)),
        " ",
        callSourceString(lowSize(value)),
        "]")
};

# Mapping from low-layer type names to stringifiers.
def STRINGIFIERS = [
    token:   doToken,
    int:     doInt,
    list:    doList,
    map:     doMap,
    string:  doString,
    uniqlet: doUniqlet
];

# Common handler for the two exported functions.
fn sourceStringGeneral(value, adorn) {
    def stringifier = mapGet(STRINGIFIERS, lowType(value), doUnknown);
    <> stringifier(value, adorn)
};

# Formats a hex int argument.
fn convertHex(arg) {
    <> stringFromIntBase(arg, 16)
};

#
# Exported functions
#

# Documented in Samizdat Layer 0 spec.
fn sourceString(value?) {
    <> ifValue { <> value* }
        { value :: <> sourceStringGeneral(value, true) }
        { <> "void" }
};
callSourceString(sourceString);

# Documented in Samizdat Layer 0 spec.
fn sourceStringUnadorned(value?) {
    <> ifValue { <> value* }
        { value :: <> sourceStringGeneral(value, false) }
        { <> "void" }
};

# Documented in Samizdat Layer 0 spec.
fn stringFromInt(value, optBase?) {
    def base = ifValue { <> optBase* } { b :: <> b } { <> 10 };

    <> ifIs { <> le(le(2, base), 36) }
        { <> stringFromIntBase(value, base) }
        { io0Die("Invalid base for stringFromInt.") }
};

# Documented in Samizdat Layer 0 spec.
fn stringFromValue(value?) {
    <> ifValue { <> value* }
        { value ::
            <> ifIs { <> isString(value) }
                { <> value }
                { <> sourceString(value) }
        }
        { <> "" }
};

# Mapping from format escape characters to their respective handler functions.
def FORMATTERS = [
    q: sourceString,
    Q: sourceStringUnadorned,
    s: stringFromValue,
    x: convertHex
];

# Documented in Samizdat Layer 0 spec.
#
# This is listed out of (alphabetical) order, as it uses `FORMATTERS`, which
# is defined in terms of other exported functions.
fn formatterFromString(formatSpec) {
    <> ifValue { <> mapGet(FORMATTERS, formatSpec) }
        { formatter :: <> formatter }
        {
            io0Die(stringAdd(
                "Unrecognized format spec: ",
                sourceString(formatSpec)))
        }
};


<> [
    formatterFromString:   formatterFromString,
    sourceString:          sourceString,
    sourceStringUnadorned: sourceStringUnadorned,
    stringFromInt:         stringFromInt,
    stringFromValue:       stringFromValue
]
