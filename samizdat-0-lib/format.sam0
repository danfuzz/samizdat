# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Text formatting functions
#

#
# Helper functions
#


#
# Exported definitions
#

# Documented in Samizdat Layer 0 spec.
sourceStringlet = { value ::
    intletBody = { start value ::
        <> if { <> eq value @0 } {
            <> start
        } else {
            digit = iadd (imod value @10) @48;   # 48 == "0"
            more = idiv value @10;
            <> stringletAdd (intletBody start more) (stringletFromIntlet digit)
        }
    };

    intletHex = { value ::
        <> if { <> eq value @0 } {
            <> @""
        } else {
            digit = stringletNth @"0123456789abcdef" (imod value @16);
            more = idiv value @16;
            <> stringletAdd (intletHex more) digit
        }
    };

    # Single-character stringlets `@"\0"` `@"\x7f;"` and `@"\x9f;"`.
    CHAR0 = stringletFromIntlet @0;
    CHAR127 = stringletFromIntlet @127;
    CHAR159 = stringletFromIntlet @159;

    stringletChar = { ch ::
        <> if { <> eq ch CHAR0 } {
            <> @"\\0"
        } { <> eq ch @"\n" } {
            <> @"\\n"
        } { <> or { <> eq ch @"\"" } { <> eq ch @"\\" } } {
            <> stringletAdd @"\\" ch
        } { <> or { <> lt ch @" " }
                  { <> and { <> ge ch CHAR127 } { <> le ch CHAR159 } } } {
            # These are the ranges for nonprinting control characters.
            <> stringletCat @"\\x" (intletHex (intletFromStringlet ch)) @";"
        } else {
            <> ch
        }
    };

    <> if { <> eq value @[] } {
        <> @"@[]"
    } { <> eq value @[=] } {
        <> @"@[=]"
    } { <> isIntlet value } {
        <> if { <> eq value @0 } {
            <> @"@0"
        } { <> gt value @0 } {
            <> intletBody @"@" value
        } else {
            <> intletBody @"@-" (ineg value)
        }
    } { <> isStringlet value } {
        body = stringletReduce @"" value
            { reduction ch :: <> stringletAdd reduction (stringletChar ch) };
        <> stringletCat @"@\"" body @"\""
    } { <> isListlet value } {
        body = listletReduce @"" value
            { reduction elem ::
                <> stringletCat
                    reduction
                    (if { <> eq reduction @"" } { <> @"" } else { <> @" " })
                    (sourceStringlet elem)
            };
        <> stringletCat @"@[" body @"]"
    } { <> isMaplet value } {
        body = mapletReduce @"" value
            { reduction value key ::
                <> stringletCat
                    reduction
                    (if { <> eq reduction @"" } { <> @"" } else { <> @" " })
                    (sourceStringlet key)
                    @"="
                    (sourceStringlet value)
            };
        <> stringletCat @"@[" body @"]"
    } { <> isHighlet value } {
        type = highletType value;
        <> stringletCat
            @"[:"
            (sourceStringlet type)
            (ifValue { <> highletValue value }
                { v :: <> stringletAdd @" " (sourceStringlet v) }
                { <> @"" })
            @":]"
    } { <> isUniqlet value } {
        <> @"@@"
    } else {
        <> stringletCat
            @"@[(unknown) "
            (sourceStringlet (lowType value))
            @" "
            (sourceStringlet (lowSize value))
            @"]"
    }
};

<> @[
    @sourceStringlet = sourceStringlet
]
