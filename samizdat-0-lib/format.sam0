# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Text formatting functions
#

#
# Helper definitions
#

# These are all the hexadecimal int digits, as a map from digit values to
# single-character strings.
def INT_CHARS = [
    0: "0", 1: "1", 2: "2", 3: "3", 4: "4",
    5: "5", 6: "6", 7: "7", 8: "8", 9: "9",
    10: "a", 11: "b", 12: "c", 13: "d", 14: "e", 15: "f"
];

# Helper for stringifying ints, which does most of the conversion,
# as well as prepending the given prefix.
fn intBody(start, value, base) {
    loopReduce(["", value]) { result ::
        def text = listNth(result, 0);
        def value = listNth(result, 1);
        <> ifTrue { <> ne(value, 0) }
            {
                def digit = mapGet(INT_CHARS, imod(value, base));
                <> [stringAdd(digit, text), idiv(value, base)];
            }
            { return stringAdd(start, text) }
    }
};

# Map from int sign values to the appropriate stringifier for each.
def INT_SIGNS = [
    -1: { int, base :: <> intBody("-", ineg(int), base) },
    0:  { int, base :: <> "0" },
    1:  { int, base :: <> intBody("", int, base) }
];

# Stringifies an int using the given base.
fn stringFromIntBase(int, base) {
    <> mapGet(INT_SIGNS, isign(int))(int, base)
};


#
# `sourceString` and `sourceStringUnadorned` functions
#

# Forward declaration of `sourceString`
def callSourceString = forwardFunction();

# Single-character strings `"\x7f;"` and `"\x9f;"`.
def CHAR_127 = stringFromInt(127);
def CHAR_159 = stringFromInt(159);

# Helper for optionally adorning results.
fn adornIf(adorn, before, value, after) {
    <> ifTrue { <> logicFromBoolean(adorn) }
        { <> stringAdd(before, value, after) }
        { <> value }
};

# Stringifies an int.
fn doInt(int, adorn) {
    <> stringFromIntBase(int, 10)
};

# Helper for stringifying strings: Returns the hex form for the given
# character. Assumes it's not passed `0`.
fn stringHexEscape(ch) {
    fn intHex(value) {
        <> ifTrue { <> eq(value, 0) }
            { <> "" }
            {
                def digit = stringNth("0123456789abcdef", imod(value, 16));
                def more = idiv(value, 16);
                <> stringAdd(intHex(more), digit)
            }
    };

    <> stringAdd("\\x", intHex(intFromString(ch)), ";")
};

# Map of special-case characters to their stringified forms.
def SPECIAL_CHARS = [
    "\0": "\\0",
    "\n": "\\n",
    "\r": "\\r",
    "\t": "\\t",
    "\"": "\\\"",
    "\\": "\\\\"
];

# Helper for stringifying strings: Returns the converted form of the
# given character.
fn stringChar(ch) {
    <> ifValue { <> mapGet(SPECIAL_CHARS, ch) }
        { special :: <> special }
        {
            # This checks for the ranges of nonprinting control characters.
            <> ifTrue { <> or { <> lt(ch, " ") }
                              { <> and { <> ge(ch, CHAR_127) }
                                       { <> le(ch, CHAR_159) } } }
                { <> stringHexEscape(ch) }
                { <> ch }
        }
};

# These are all the characters which are allowed to start an identifier.
def IDENTIFIER_STARTS = ["a".."z": true, "A".."Z": true, "_": true ];

# These are all the characters which are allowed to be in an identifier.
def IDENTIFIER_CHARS = [IDENTIFIER_STARTS*, "0".."9": true];

# Checks to see if the given value is a string with the form of an
# in-language identifier.
fn isIdentifier(string) {
    <> and
        { <> isString(string) }
        { <> gt(lowSize(string), 0) }
        { <> mapGet(IDENTIFIER_STARTS, stringNth(string, 0)) }
        {
            stringForEach(string)
                { ., ch ::
                    ifFalse { <> mapGet(IDENTIFIER_CHARS, ch) }
                        { return }
                };
            <> true
        }
};

# Stringifies a string.
fn doString(string, adorn) {
    def body = stringReduce("", string)
        { result, ., ch :: <> stringAdd(result, stringChar(ch)) };
    <> adornIf(adorn, "\"", body, "\"")
};

# Stringifies a list.
fn doList(list, adorn) {
    def body = listReduce("", list)
        { reduction, ., elem ::
            <> stringAdd(
                reduction,
                ifTrue { <> eq(reduction, "") } { <> "" } { <> ", " },
                callSourceString(elem))
        };

    <> adornIf(adorn, "[", body, "]")
};

# Stringifies a map.
fn doMap(map, adorn) {
    def body = mapReduce("", map)
        { reduction, key, value ::
            <> stringAdd(
                reduction,
                ifTrue { <> eq(reduction, "") } { <> "" } { <> ", " },
                ifTrue { <> isIdentifier(key) }
                    { <> key }
                    { <> callSourceString(key) },
                ": ",
                callSourceString(value))
        };

    <> adornIf(adorn,
        "[",
        ifTrue { <> eq(body, "") } { <> ":" } { <> body },
        "]")
};

# Tokens with special conversions
def TOKEN_SPECIALS = [
    (false): "false",
    (null):  "null",
    (true):  "true"
];

# Stringifies a token.
fn doToken(token, adorn) {
    ifValue { <> mapGet(TOKEN_SPECIALS, token) }
        { string :: return string };

    def type = tokenType(token);
    def typeString = ifTrue { <> isIdentifier(type) }
        { <> type }
        { <> callSourceString(type) };
    def valueString = ifValue { <> tokenValue(token) }
        { value :: <> stringAdd(": ", callSourceString(value)) }
        { <> "" };

    ifTrue { <> and { <> isString(type) } { <> eq(valueString, "") } }
        { return adornIf(adorn, "@", typeString, "") };

    def result = stringAdd(typeString, valueString);
    <> adornIf(adorn, "@[", result, "]")
};

# Stringifies a uniqlet.
fn doUniqlet(uniqlet, .) {
    <> "@@"
};

# Stringifies an unknown value type.
fn doUnknown(unknown, .) {
    <> stringAdd(
        "[(unknown) ",
        callSourceString(lowType(value)),
        " ",
        callSourceString(lowSize(value)),
        "]")
};

# Mapping from low-layer type names to stringifiers.
def STRINGIFIERS = [
    token:   doToken,
    int:     doInt,
    list:    doList,
    map:     doMap,
    string:  doString,
    uniqlet: doUniqlet
];

# Common handler for the two exported variants.
fn sourceStringGeneral(value, adorn) {
    def stringifier = mapGet(STRINGIFIERS, lowType(value), doUnknown);
    <> stringifier(value, adorn)
};

# Documented in Samizdat Layer 0 spec.
fn sourceString(value) {
    <> sourceStringGeneral(value, true)
};
callSourceString(sourceString);

# Documented in Samizdat Layer 0 spec.
fn sourceStringUnadorned(value) {
    <> sourceStringGeneral(value, false)
};


#
# `format` function
#

# Gets the current format string position.
fn xFmtAt(state) {
    <> mapGet(state, "fmtAt")
};

# Peeks at the current format string character.
fn xPeek(state) {
    <> stringNth(mapGet(state, "fmt"), xFmtAt(state))
};

# Peeks at the next format string character.
fn xPeek1(state) {
    def at = iadd(1, xFmtAt(state));
    <> stringNth(mapGet(state, "fmt"), at)
};

# Gets the current argument consumption position.
fn xArgsAt(state) {
    <> mapGet(state, "argsAt")
};

# Gets the current argument.
fn xArg(state) {
    <> ifValue { <> listNth(mapGet(state, "args"), xArgsAt(state)) }
        { value :: <> value }
        { <> "(missing argument)" }
};

# Performs the standard update of state after processing a `%`,
# consuming one argument and two format characters.
fn xUsualUpdate(state) {
    def argsAt = iadd(1, xArgsAt(state));
    def fmtAt = iadd(2, xFmtAt(state));

    <> [state*, fmtAt: fmtAt, argsAt: argsAt]
};

# Formats a literal percent.
fn doPercent(yield, state) {
    yield("%");

    def fmtAt = iadd(2, mapGet(state, "fmtAt"));
    <> [state*, fmtAt: fmtAt]
};

# Formats a literal quoted argument.
fn doLiteral(yield, state) {
    yield(sourceString(xArg(state)));
    <> xUsualUpdate(state)
};

# Formats a literal quoted argument, without top-level adornment.
fn doUnadornedLiteral(yield, state) {
    yield(sourceStringUnadorned(xArg(state)));
    <> xUsualUpdate(state)
};

# Formats a string argument.
fn doPlainString(yield, state) {
    yield(xArg(state));
    <> xUsualUpdate(state)
};

# Formats a hex int argument.
fn doHex(yield, state) {
    yield(stringFromIntBase(xArg(state), 16));
    <> xUsualUpdate(state)
};

# Mapping from format escape characters to their respective handler functions.
def FORMATTERS = [
    "%": doPercent,
    q:   doLiteral,
    Q:   doUnadornedLiteral,
    s:   doPlainString,
    x:   doHex
];

# Formats a plain character (that is, returns it as-is).
fn doPlain(yield, state, ch) {
    yield(ch);

    def fmtAt = iadd(1, mapGet(state, "fmtAt"));
    <> [state*, fmtAt: fmtAt]
};

# Formats an arbitrary escape.
fn doEscape(yield, state) {
    <> ifValue { <> xPeek1(state) }
        { ch ::
            <> ifValue { <> mapGet(FORMATTERS, ch) }
                { formatter :: <> formatter(yield, state) }
                { <> doPercent(yield, state) }
        }
        { <> doPercent(yield, state) }
};

# Formats a single character out of the format string.
fn formatOne(yield, state) {
    <> ifValue { <> xPeek(state) }
        { ch ::
            <> ifTrue { <> eq(ch, "%") }
                { <> doEscape(yield, state) }
                { <> doPlain(yield, state, ch) }
        }
        { yield() }
};

# Documented in Samizdat Layer 0 spec.
fn format(formatString, rest*) {
    def formatter = object(formatOne, [
        fmt:    formatString,
        fmtAt:  0,
        args:   rest,
        argsAt: 0
    ]);

    loopReduce("") { result ::
        <> ifValue { <> formatter() }
            { s :: <> stringAdd(result, s) }
            { return result }
    }
};


#
# Export mechanics
#

<> [
    format: format,
    sourceString: sourceString,
    sourceStringUnadorned: sourceStringUnadorned
]
