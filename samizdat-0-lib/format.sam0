# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Text formatting functions
#

#
# `sourceStringlet` function
#

# Single-character stringlets `@"\0"` `@"\x7f;"` and `@"\x9f;"`.
CHAR_0 = stringletFromIntlet @0;
CHAR_127 = stringletFromIntlet @127;
CHAR_159 = stringletFromIntlet @159;

# Helper for stringifying intlets, which does most of the conversion,
# as well as prepending the given prefix.
intletBody = { start value ::
    <> ifTrue { <> eq value @0 }
        { <> start }
        {
            digit = iadd (imod value @10) @48;   # 48 == "0"
            <> stringletAdd
                (intletBody start (idiv value @10))
                (stringletFromIntlet digit)
        }
};

# Maplet from intlet sign values to the appropriate stringifier for each.
INTLET_SIGNS = @[
    @-1 = { intlet :: <> intletBody @"@-" (ineg intlet) }
    @0  = { <> @"@0" }
    @1  = { intlet :: <> intletBody @"@" intlet }
];

# Stringifies an intlet.
doIntlet = { intlet ::
    <> (mapletGet INTLET_SIGNS (intletSign intlet)) intlet
};

# Helper for stringifying stringlets: Returns the hex form for the given
# character. Assumes it's not passed `@0`.
stringletHexEscape = { ch ::
    intletHex = { value ::
        <> ifTrue { <> eq value @0 }
            { <> @"" }
            {
                digit = stringletNth @"0123456789abcdef" (imod value @16);
                more = idiv value @16;
                <> stringletAdd (intletHex more) digit
            }
    };

    <> stringletCat @"\\x" (intletHex (intletFromStringlet ch)) @";"
};

# Maplet of special-case characters to their stringified forms.
SPECIAL_CHARS = @[
    CHAR_0 = @"\\0"
    @"\n"  = @"\\n"
    @"\""  = @"\\\""
    @"\\"  = @"\\\\"
];

# Helper for stringifying stringlets: Returns the converted form of the
# given character.
stringletChar = { ch ::
    <> ifValue { <> mapletGet SPECIAL_CHARS ch }
        { special :: <> special }
        {
            # This checks for the ranges of nonprinting control characters.
            <> ifTrue { <> or { <> lt ch @" " }
                              { <> and { <> ge ch CHAR_127 }
                                       { <> le ch CHAR_159 } } }
                { <> stringletHexEscape ch }
                { <> ch }
        }
};

# Stringifies a stringlet.
doStringlet = { stringlet ::
    body = stringletReduce @"" stringlet
        { reduction ch :: <> stringletAdd reduction (stringletChar ch) };
    <> stringletCat @"@\"" body @"\""
};

# Stringifies a listlet.
doListlet = { listlet ::
    body = listletReduce @"" listlet
        { reduction elem ::
            <> stringletCat
                reduction
                (if { <> eq reduction @"" } { <> @"" } else { <> @" " })
                (sourceStringlet elem)
        };

    <> stringletCat @"@[" body @"]"
};

# Stringifies a maplet.
doMaplet = { maplet ::
    body = mapletReduce @"" maplet
        { reduction value key ::
            <> stringletCat
                reduction
                (if { <> eq reduction @"" } { <> @"" } else { <> @" " })
                (sourceStringlet key)
                @"="
                (sourceStringlet value)
        };

    <> ifTrue { <> eq maplet @[=] }
        { <> @"@[=]" }
        { <> stringletCat @"@[" body @"]" }
};

# Stringifies a highlet.
doHighlet = { highlet ::
    type = highletType highlet;
    <> stringletCat
        @"[:"
        (sourceStringlet type)
        (ifValue { <> highletValue highlet }
            { value :: <> stringletAdd @" " (sourceStringlet value) }
            { <> @"" })
        @":]"
};

# Stringifies a uniqlet.
doUniqlet = { uniqlet ::
    <> @"@@"
};

# Stringifies an unknown value type.
doUnknown = { unknown ::
    <> stringletCat
        @"@[(unknown) "
        (sourceStringlet (lowType value))
        @" "
        (sourceStringlet (lowSize value))
        @"]"
};

# Mapping from low-layer type names to stringifiers.
STRINGIFIERS = @[
    @highlet   = doHighlet
    @intlet    = doIntlet
    @listlet   = doListlet
    @maplet    = doMaplet
    @stringlet = doStringlet
    @uniqlet   = doUniqlet
];

# Common handler for the two exported variants.
sourceStringletGeneral = { value adorn ::
    stringifier = mapletGet STRINGIFIERS (lowType value) doUnknown;
    <> stringifier value
};

# Documented in Samizdat Layer 0 spec.
sourceStringlet = { value ::
    <> sourceStringletGeneral value true
};

# Documented in Samizdat Layer 0 spec.
sourceStringletUnadorned = { value ::
    <> sourceStringletGeneral value false
};

#
# `format` function
#

# Gets the current format string position.
xFmtAt = { state ::
    <> (mapletGet state @fmtAt)
};

# Peeks at the current format string character.
xPeek = { state ::
    <> stringletNth (mapletGet state @fmt) (xFmtAt state)
};

# Peeks at the next format string character.
xPeek1 = { state ::
    at = iadd @1 (xFmtAt state);
    <> stringletNth (mapletGet state @fmt) at;
};

# Gets the current argument consumption position.
xArgsAt = { state ::
    <> (mapletGet state @argsAt)
};

# Gets the current argument.
xArg = { state ::
    <> ifValue { <> listletNth (mapletGet state @args) (xArgsAt state) }
        { value :: <> value }
        { <> @"(missing argument)" }
};

# Formats a literal percent.
xPercent = { state ::
    fmtAt = iadd @2 (mapletGet state @fmtAt);
    nextState = mapletPut state @fmtAt fmtAt;
    <> @[@result=@"%" @state=nextState];
};

# Formats a literal quoted argument.
xLiteral = { state ::
    arg = xArg state;
    argsAt = iadd @1 (xArgsAt state);
    fmtAt = iadd @2 (xFmtAt state);
    nextState = mapletAdd state @[@fmtAt=fmtAt @argsAt=argsAt];
    <> @[@result=(sourceStringlet arg) @state=nextState];
};

# Formats a literal quoted argument, without top-level adornment.
xUnadornedLiteral = { state ::
    arg = xArg state;
    argsAt = iadd @1 (xArgsAt state);
    fmtAt = iadd @2 (xFmtAt state);
    nextState = mapletAdd state @[@fmtAt=fmtAt @argsAt=argsAt];
    <> @[@result=(sourceStringletUnadorned arg) @state=nextState];
};

# Formats a stringlet argument.
xStringlet = { state ::
    arg = xArg state;
    argsAt = iadd @1 (xArgsAt state);
    fmtAt = iadd @2 (xFmtAt state);
    nextState = mapletAdd state @[@fmtAt=fmtAt @argsAt=argsAt];
    <> @[@result=arg @state=nextState];
};

# Mapping from format escape characters to their respective handler functions.
FORMATTERS = @[
    @"%" = xPercent
    @"q" = xLiteral
    @"Q" = xUnadornedLiteral
    @"s" = xStringlet
];

# Formats a plain character (that is, returns it as-is).
xPlain = { state ch ::
    fmtAt = iadd @1 (mapletGet state @fmtAt);
    nextState = mapletPut state @fmtAt fmtAt;
    <> @[@result=ch @state=nextState];
};

# Formats an arbitrary escape.
xEscape = { state ::
    <> ifValue { <> xPeek1 state }
        { ch ::
            <> ifValue { <> mapletGet FORMATTERS ch }
                { formatter :: <> formatter state ch }
                { <> xPlain state }
        }
        { <> xPlain state @"%" }
};

# Formats a single character out of the format string.
formatOne = { state ::
    <> ifValue { <> xPeek state }
        { ch ::
            <> ifTrue { <> eq ch @"%" }
                { <> xEscape state }
                { <> xPlain state ch }
        }
};

# Documented in Samizdat Layer 0 spec.
format = { formatString rest* ::
    formatter = object formatOne @[
        @fmt    = formatString
        @fmtAt  = @0
        @args   = rest
        @argsAt = @0
    ];

    <> whileReduce @"" { result ::
        <> ifValue { <> formatter() }
            { s :: <> stringletAdd result s }
    }
};


#
# Export mechanics
#

<> @[
    @format = format
    @sourceStringlet = sourceStringlet
    @sourceStringletUnadorned = sourceStringletUnadorned
]
