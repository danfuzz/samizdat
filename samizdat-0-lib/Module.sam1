# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Module functions
#


#
# Private Definitions
#

# The (base) name of a module metainformation file.
def MODULE_FILE_NAME = "module.sam";

# Box containing a set-like map of fully-qualified names representing
# modules in the middle of being loaded.
def thePendingBox = makeMutableBox([:]);

# Finds the directory for the named module, by iterating over
# `MODULE_PATHS`, looking for a `module.sam` file. Either returns
# the directory path or dies with an error.
fn findModuleDirectory(fqName, optPaths?) {
    def paths = ifValueOr { <> optPaths* } { <> MODULE_PATHS };

    ifIs { <> eq(paths, []) }
        { io0Die(cat("Module not found: ", stringFromModuleName(fqName))) };

    def oneDir = [first(paths)*, fqName*];

    <> ifIs { <> io0FileExists([oneDir*, MODULE_FILE_NAME]) }
        { <> oneDir }
        { <> findModuleDirectory(fqName, butFirst(paths)) }
};



#
# Exported Definitions
#

# Documented in spec.
fn moduleUse(searchInfo) {
    def fqName = searchInfo:name;

    ifValue { <> moduleGet(searchInfo) }
        { modu -> return modu };

    def pendings = fetch(thePendingBox);
    ifIs { <> get(pendings, name) }
        {
            io0Die(cat(
                "Dependency loop with modules: ",
                sourceString(keyList(pendings))))
        };

    # Indicate that the module is in the process of being loaded.
    store(thePendingBox, put(pendings, fqName, null));

    def moduleDir = findModuleDirectory(fqName);
    def moduleReader = io0SandboxedReader(moduleDir);
    def infoText = moduleReader(["module.sam"]);
    def info = sam0Eval(LIBRARY, sam0ParseExpression(infoText))();

    # TODO: Currently ignores everything about `searchInfo` other than the name.
    ifIs { <> ne(fqName, (info:name)) }
        { io0Die(cat("Module name mismatch: ", stringFromFqName(fqName))) };

    def mainText = moduleReader(["main.sam"]);
    def subLibrary = makeLibrary([LIBRARY*:, INFO: info, READER: moduleReader]);
    def exports = sam0Eval(subLibrary, sam0ParseProgram(mainText))();

    def result = @[Module: [info: info, exports: exports]];
    moduleDef(result);

    # Indicate that the module load is no longer in-process.
    update(thePendingBox, { pendings <> del(pendings, fqName) });

    <> result
};

<> [
    moduleUse: moduleUse
]
