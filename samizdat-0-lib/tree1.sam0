# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Samizdat Layer 1 tree parser
#


#
# Helper functions
#

# Set-like map of all lowercase identifier characters. Used to figure
# out if we're looking at a keyword in the `identifierString` rule.
def LOWER_ALPHA = [
    inclusiveRange("a", 1, "z")*: true
];

# Returns a `call` node.
fn makeCall(function, actuals*) {
    <> @[call: [function: function, actuals: actuals]]
};

# Returns a `varDef` node.
fn makeVarDef(name, value) {
    <> @[varDef: [name: name, value: value]]
};

# Returns a `varRef` node.
fn makeVarRef(name) {
    <> @[varRef: name]
};

# Returns a `call` node that names a function as a `varRef`.
fn makeCallName(name, actuals*) {
    <> @[call: [function: makeVarRef(name), actuals: actuals]]
};

# Returns a `literal` node.
fn makeLiteral(value) {
    <> @[literal: value]
};

# Returns a node representing a thunk (no-arg function) that returns the
# expression represented by the given node.
fn makeThunk(expression) {
    <> @[closure: [statements: [], yield: expression]]
};

# Returns a `call` node to a nonlocal exit with the given name and
# with optional expression value. The expression if supplied is automatically
# "thunked".
fn makeCallNonlocalExit(name, expression?) {
    <> ifValue { <> expression* }
        { ex :: <> makeCall(makeVarRef("nonlocalExit"), name, makeThunk(ex)) }
        { <> makeCall(makeVarRef("nonlocalExit"), name) }
};


#
# Grammar rules
#
# The following is a near-transliteration of the tree grammar in
# the *Samizdat Layer 0* and *Samizdat Layer 1* specifications.
#

#
# Samizdat Layer 0 definitions
#

# Forward declarations.
def parProgramBody = forwardFunction();
def parExpression = forwardFunction();
def parParser = forwardFunction();

# Documented in Samizdat Layer 0 spec.
def parYieldDef = pegMakeMainSequence(
    pegMakeToken("<"),
    pegMakeToken("identifier"),
    pegMakeToken(">"),
    pegMakeCode { ., name, . :: <> tokenValue(name) });

# Documented in Samizdat Layer 0 spec.
def parOptYieldDef = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            parYieldDef,
            pegMakeCode { y :: <> [yieldDef: y] }),
        pegMakeCode { <> [:] }));

# Documented in Samizdat Layer 0 spec.
def parFormal = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeMainSequence(
            pegMakeToken("identifier"),
            pegMakeCode { n :: <> [name: tokenValue(n)] }),
        pegMakeMainSequence(
            pegMakeToken("."),
            pegMakeCode { . :: <> [:] })),
    pegMakeChoice(
        pegMakeMainSequence(
            pegMakeTokenSet("?", "*", "+"),
            pegMakeCode { r :: <> [repeat: tokenType(r)] }),
        pegMakeMainSequence(
            pegMakeCode { <> [:] })),
    pegMakeCode { name, repeat :: <> [:, name*, repeat*] });

# Documented in Samizdat Layer 0 spec.
def parFormalsList = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            parFormal,
            pegMakeStar(pegMakeSequence(pegMakeToken(","), parFormal)),
            pegMakeCode { first, rest ::
                <> [formals: [first, rest*]]
            }),
        pegMakeCode { <> [:] }));

# Documented in Samizdat Layer 0 spec.
def parProgramDeclarations = pegMakeMainSequence(
    parOptYieldDef,
    parFormalsList,
    pegMakeToken("::"),
    pegMakeCode { yieldDef, formals, . :: <> [:, formals*, yieldDef*] });

# Documented in Samizdat Layer 0 spec.
def parProgram = pegMakeMainSequence(
    pegMakeChoice(
        parProgramDeclarations,
        pegMakeCode { <> [:] }),
    parProgramBody,
    pegMakeCode { decls, body :: <> @[closure: [:, decls*, body*]] });

# Documented in Samizdat Layer 0 spec.
def parClosure = pegMakeMainSequence(
    pegMakeToken("{"),
    parProgram,
    pegMakeToken("}"),
    pegMakeCode { ., prog, . :: <> prog });

# Documented in Samizdat Layer 0 spec.
def parNullaryClosure = pegMakeMainSequence(
    parClosure,
    pegMakeCode { c ::
        ifIs { <> mapGet(tokenValue(c), "formals") }
            { io0Die("Invalid formal argument in code block.") };
        <> c
    });

# Documented in Samizdat Layer 0 spec.
def parCodeOnlyClosure = pegMakeMainSequence(
    parNullaryClosure,
    pegMakeCode { c ::
        ifIs { <> mapGet(tokenValue(c), "yieldDef") }
            { io0Die("Invalid yield definition in code block.") };
        <> c
    });

# Documented in Samizdat Layer 0 spec.
def parFnCommon = pegMakeMainSequence(
    pegMakeToken("fn"),
    pegMakeOpt(
        pegMakeMainSequence(
            parYieldDef,
            pegMakeCode { y :: <> makeVarDef(y, makeVarRef("return")) })),
    pegMakeChoice(
        pegMakeMainSequence(
            pegMakeToken("identifier"),
            pegMakeCode { n :: <> [name: tokenValue(n)] }),
        pegMakeMainSequence(pegMakeCode { <> [:] })),
    pegMakeToken("("),
    parFormalsList,
    pegMakeToken(")"),
    parCodeOnlyClosure,
    pegMakeCode { ., returnDef, name, ., formals, ., code ::
        def codeMap = tokenValue(code);
        def statements = [returnDef*, mapGet(codeMap, "statements")*];
        <> [
            codeMap*, name*, formals*,
            yieldDef: "return",
            statements: statements
        ]
    });

# Documented in Samizdat Layer 0 spec.
def parFnDef = pegMakeMainSequence(
    parFnCommon,
    pegMakeCode { funcMap ::
        <> ifIs { <> mapGet(funcMap, "name") }
            { <> @[fnDef: funcMap] }
    });

# Documented in Samizdat Layer 0 spec.
def parFnExpression = pegMakeMainSequence(
    parFnCommon,
    pegMakeCode { funcMap :: <> @[closure: funcMap] },
    pegMakeChoice(
        pegMakeSequence(
            pegMakeCode { funcMap, . :: <> mapGet(funcMap, "name") },
            pegMakeCode { funcMap, closure, name ::
                def mainClosure = @[closure: [
                    statements: [@[fnDef: funcMap]],
                    yield: makeVarRef(name)
                ]];

                <> makeCall(mainClosure)
            }),
        pegMakeCode { ., closure :: <> closure }));

# Documented in Samizdat Layer 0 spec.
def parInt = pegMakeMainSequence(
    pegMakeToken("int"),
    pegMakeCode { int :: <> makeLiteral(tokenValue(int)) });

# Documented in Samizdat Layer 0 spec.
def parString = pegMakeMainSequence(
    pegMakeToken("string"),
    pegMakeCode { string :: <> makeLiteral(tokenValue(string)) });

# Documented in Samizdat Layer 0 spec.
def parIdentifierString = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            pegMakeTokenSet("identifier", "string"),
            pegMakeCode { s :: <> makeLiteral(tokenValue(s)) }),
        pegMakeSequence(
            pegRuleAny,
            pegMakeCode { token ::
                <> ifNot { <> tokenValue(token) }
                    {
                        def type = tokenType(token);
                        def firstCh = stringNth(type, 0);
                        <> ifIs { <> mapGet(LOWER_ALPHA, firstCh) }
                            { <> makeLiteral(type) }
                    }
                })));

# Documented in Samizdat Layer 0 spec.
def parUnadornedList = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            parExpression,
            pegMakeStar(pegMakeSequence(pegMakeToken(","), parExpression)),
            pegMakeCode { first, rest :: <> [first, rest*] }),
        pegMakeCode { <> [] }));

# Documented in Samizdat Layer 0 spec.
def parList = pegMakeMainSequence(
    pegMakeToken("["),
    parUnadornedList,
    pegMakeToken("]"),
    pegMakeCode { ., expressions, . ::
        <> ifIs { <> eq(expressions, []) }
            { <> makeLiteral([]) }
            { <> makeCallName("makeList", expressions*) }
    });

# Documented in Samizdat Layer 0 spec.
def parEmptyMap = pegMakeMainSequence(
    pegMakeToken("["),
    pegMakeToken(":"),
    pegMakeToken("]"),
    pegMakeCode { ., ., . :: <> makeLiteral([:]) });

# Documented in Samizdat Layer 0 spec.
def parMapKeyAtom = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            parIdentifierString,
            pegMakeLookaheadSuccess(pegMakeToken(":")),
            pegMakeCode { k, . :: <> k }),
        parExpression));

# Documented in Samizdat Layer 0 spec.
def parMapKey = parMapKeyAtom;

# Documented in Samizdat Layer 0 spec.
def parMapping = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            parMapKey,
            pegMakeToken(":"),
            parExpression,
            pegMakeCode { key, ., value ::
                <> makeCallName("makeList", value, key)
            }),
        pegMakeSequence(
            parExpression,
            pegMakeCode { map ::
                <> ifIs { <> eq(tokenType(map), "interpolate") }
                    { <> tokenValue(map) }
            })));

# Documented in Samizdat Layer 0 spec.
def parMap = pegMakeMainSequence(
    pegMakeToken("["),
    pegMakeOpt(pegMakeSequence(pegMakeToken(":"), pegMakeToken(","))),
    parMapping,
    pegMakeStar(pegMakeSequence(pegMakeToken(","), parMapping)),
    pegMakeToken("]"),
    pegMakeCode { ., ., first, rest, . ::
        <> makeCallName("makeMap", first, rest*)
    });

# Documented in Samizdat Layer 0 spec.
def parToken = pegMakeMainSequence(
    pegMakeToken("@"),
    pegMakeChoice(
        pegMakeMainSequence(
            pegMakeToken("["),
            parIdentifierString,
            pegMakeOpt(pegMakeSequence(pegMakeToken(":"), parExpression)),
            pegMakeToken("]"),
            pegMakeCode { ., type, value, . :: <> [type, value*] }),
        pegMakeMainSequence(
            pegMakeToken("["),
            parExpression,
            pegMakeOpt(pegMakeSequence(pegMakeToken(":"), parExpression)),
            pegMakeToken("]"),
            pegMakeCode { ., type, value, . :: <> [type, value*] }),
        pegMakeMainSequence(
            parIdentifierString,
            pegMakeCode { type :: <> [type] })),
    pegMakeCode { ., tokenArgs :: <> makeCallName("makeToken", tokenArgs*) });

# Documented in Samizdat Layer 0 spec.
def parUniqlet = pegMakeMainSequence(
    pegMakeToken("@@"),
    pegMakeCode { . :: <> makeCallName("makeUniqlet") });

# Documented in Samizdat Layer 0 spec.
def parVarRef = pegMakeMainSequence(
    pegMakeToken("identifier"),
    pegMakeCode { name :: <> makeVarRef(tokenValue(name)) });

# Documented in Samizdat Layer 0 spec.
def parVarDef = pegMakeMainSequence(
    pegMakeToken("def"),
    pegMakeToken("identifier"),
    pegMakeToken("="),
    parExpression,
    pegMakeCode { ., name, ., ex ::
        <> makeVarDef(tokenValue(name), ex)
    });

# Documented in Samizdat Layer 0 spec.
def parParenExpression = pegMakeMainSequence(
    pegMakeToken("("),
    parExpression,
    pegMakeToken(")"),
    pegMakeCode { ., ex, . :: <> @[expression: ex] });

# Documented in Samizdat Layer 0 spec and Samizdat Layer 1 spec.
def parAtom = pegMakeMainSequence(
    pegMakeChoice(
        parVarRef, parInt, parString,
        parList, parEmptyMap, parMap,
        parToken, parUniqlet, parClosure,
        parParenExpression,
        # Defined by Samizdat Layer 1. The lookahead is just to make
        # it clear what is required to "jump into" Layer 1 parsing.
        pegMakeSequence(
            pegMakeLookaheadSuccess(pegMakeToken("{/")),
            parParser)));

# Documented in Samizdat Layer 0 spec.
def parActualsList = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            pegMakeToken("("),
            parUnadornedList,
            pegMakeToken(")"),
            pegMakeStar(parClosure),
            pegMakeCode { ., normalActuals, ., closureActuals ::
                <> [closureActuals*, normalActuals*]
            }),
        pegMakePlus(parClosure)));

# Documented in Samizdat Layer 0 spec.
def parPrefixOperator = pegMakeMainSequence(
    pegMakeToken("-"),
    pegMakeCode { . :: <> { node :: <> makeCallName("ineg", node) } });

# Documented in Samizdat Layer 0 spec.
def parPostfixOperator = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            parActualsList,
            pegMakeCode { actuals ::
                <> { node :: <> makeCall(node, actuals*) }
            }),
        pegMakeSequence(
            pegMakeToken("*"),
            pegMakeCode { . ::
                <> { node :: <> @[interpolate: node] }
            })));

# Documented in Samizdat Layer 0 spec.
def parUnaryExpression = pegMakeMainSequence(
    pegMakeStar(parPrefixOperator),
    parAtom,
    pegMakeStar(parPostfixOperator),
    pegMakeCode { prefixes, base, postfixes ::
        def withPosts = listReduce(base, postfixes)
            { result, ., op :: <> op(result) };
        <> listReduce(withPosts, listReverse(prefixes))
            { result, ., op :: <> op(result) }
    });

# Documented in Samizdat Layer 0 spec.
def implExpression = pegMakeChoice(
    parUnaryExpression,
    parFnExpression);
parExpression(implExpression);

# Documented in Samizdat Layer 0 spec.
def parStatement = pegMakeChoice(
    parVarDef,
    parFnDef,
    parExpression);

# Documented in Samizdat Layer 0 spec.
def parNonlocalExit = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            pegMakeToken("<"),
            parVarRef,
            pegMakeToken(">"),
            pegMakeCode { ., n, . :: <> n }),
        pegMakeSequence(
            pegMakeToken("return"),
            pegMakeCode { . :: <> makeVarRef("return") })),
    pegMakeOpt(parExpression),
    pegMakeCode { name, value ::
        <> makeCallNonlocalExit(name, value*)
    });

# Documented in Samizdat Layer 0 spec.
def parYield = pegMakeMainSequence(
    pegMakeToken("<>"),
    pegMakeChoice(
        pegMakeMainSequence(
            parExpression,
            pegMakeCode { ex :: <> [yield: ex] }),
        pegMakeMainSequence(
            pegMakeCode { <> [:] })));

# Documented in Samizdat Layer 0 spec.
def implProgramBody = pegMakeMainSequence(
    pegMakeStar(pegMakeToken(";")),
    pegMakeStar(
        pegMakeMainSequence(
            parStatement,
            pegMakePlus(pegMakeToken(";")),
            pegMakeCode { s, . :: <> s })),
    pegMakeChoice(
        pegMakeMainSequence(
            pegMakeChoice(parStatement, parNonlocalExit),
            pegMakeCode { s :: <> [statements: [s]] }),
        pegMakeMainSequence(
            parYield,
            pegMakeCode { y :: <> [statements: [], y*] }),
        pegMakeMainSequence(
            pegMakeCode { <> [statements: []] })),
    pegMakeStar(pegMakeToken(";")),
    pegMakeCode { ., most, last, . ::
        def allStatements = [most*, mapGet(last, "statements")*];
        <> [last*, statements: allStatements]
    });
parProgramBody(implProgramBody);


#
# Samizdat Layer 1 definitions
#

# `choicePex` is the top-level parsing expression node type.
def parChoicePex = forwardFunction();

def implParser = pegMakeMainSequence(
    pegMakeToken("{/"),
    parChoicePex,
    pegMakeToken("/}"),
    pegMakeCode { ., pex, . :: <> @[parser: pex] });
parParser(implParser);

def parParenPex = pegMakeMainSequence(
    pegMakeToken("("),
    parChoicePex,
    pegMakeToken(")"),
    pegMakeCode { ., pex, . :: <> pex });

def parParserString = pegMakeMainSequence(
    pegMakeToken("string"),
    pegMakeCode { s ::
        def value = tokenValue(s);
        <> ifIs { <> eq(lowSize(value), 1) }
            { <> @[token: value] }
            { <> s }
    });

def parParserToken = pegMakeMainSequence(
    pegMakeToken("@"),
    parIdentifierString,
    pegMakeCode { ., type :: <> @[token: tokenValue(type)] });

def parParserSetString = pegMakeMainSequence(
    pegMakeToken("string"),
    pegMakeChoice(
        pegMakeSequence(
            pegMakeToken(".."),
            pegMakeToken("string"),
            pegMakeCode { s, ., end ::
                def startChar = tokenValue(s);
                def endChar = tokenValue(end);
                <> ifIs
                    { <> and
                        { <> eq(lowSize(startChar), 1) }
                        { <> eq(lowSize(endChar), 1) } }
                    { <> stringAdd(inclusiveRange(startChar, 1, endChar)*) }
            }),
        pegMakeCode { s :: <> tokenValue(s) }));

def parParserSet = pegMakeMainSequence(
    pegMakeToken("["),
    pegMakeChoice(
        pegMakeMainSequence(
            pegMakeToken("!"),
            pegMakeCode { . :: <> "[!]" }),
        pegMakeMainSequence(
            pegMakeCode { <> "[]" })),
    pegMakeChoice(
        pegMakeMainSequence(
            pegMakePlus(parParserSetString),
            pegMakeCode { strings :: <> [stringAdd(strings*)*] }),
        pegMakeMainSequence(
            pegMakePlus(parParserToken),
            pegMakeCode { tokens ::
                <> collectFilter(tokens) { tok :: <> tokenValue(tok) }
            }),
        pegMakeMainSequence(
            pegMakeCode { <> [] })),
    pegMakeToken("]"),
    pegMakeCode { ., type, terminals, . :: <> @[(type): terminals] });

def parParserCode = pegMakeMainSequence(
    parNullaryClosure,
    pegMakeCode { closure :: <> @["{}": tokenValue(closure)] });

def parParserAtom = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeToken("."),
        pegMakeSequence(
            pegMakeToken("("),
            pegMakeToken(")"),
            pegMakeCode { ., . :: <> @"()" }),
        parVarRef,
        parParserString,
        parParserToken,
        parParserSet,
        parParserCode,
        parParenPex));

def parRepeatPex = pegMakeMainSequence(
    parParserAtom,
    pegMakeChoice(
        pegMakeSequence(
            pegMakeTokenSet("?", "*", "+"),
            pegMakeCode { atom, repeat :: <> @[tokenType(repeat): atom] }),
        pegMakeCode { atom :: <> atom }));

def parLookaheadPex = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            pegMakeTokenSet("&", "!"),
            parRepeatPex,
            pegMakeCode { lookahead, pex :: <> @[tokenType(lookahead): pex] }),
        parRepeatPex));

def parNamePex = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            pegMakeToken("identifier"),
            pegMakeToken("="),
            parLookaheadPex,
            pegMakeCode { name, ., pex ::
                <> @[varDef: [name: tokenValue(name), value: pex]]
            }),
        parLookaheadPex));

def parSequencePex = pegMakeMainSequence(
    pegMakePlus(parNamePex),
    pegMakeCode { items :: <> @[sequence: items] });

def implChoicePex = pegMakeMainSequence(
    parSequencePex,
    pegMakeStar(
        pegMakeMainSequence(
            pegMakeToken("|"),
            parSequencePex)),
    pegMakeCode { first, rest :: <> @[choice: [first, rest*]] });
parChoicePex(implChoicePex);


#
# Exported function, and support thereof
#

# Reports the given list of pending tokens as part of error processing.
fn reportError(pending) {
    io0Note("Pending tokens:");

    doFilter(pending)
        { token :: io0Note(stringAdd("    ", sourceString(token))) };

    io0Die("\nExtra tokens at end of program.")
};

# Documented in Samizdat Layer 0 spec.
def parProgramOrError = pegMakeMainSequence(
    parProgram,
    pegMakeOpt(
        pegMakeMainSequence(
            pegMakePlus(pegRuleAny),
            pegMakeCode { pending :: reportError(pending) })),
    pegMakeCode { prog, . :: <> prog });

# Documented in Samizdat Layer 0 spec.
fn sam1Tree(program) {
    def tokens = ifIs { <> isString(program) }
        { <> sam1Tokenize(program) }
        { <> program };

    <> pegApply(parProgramOrError, tokens)
};

<> [
    sam1Tree: sam1Tree
]
