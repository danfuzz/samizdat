# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Samizdat Layer 1 tree parser
#


#
# Helper functions
#

# Set-like map of all lowercase identifier characters. Used to figure
# out if we're looking at a keyword in the `identifierString` rule.
def LOWER_ALPHA = ["a".."z": true];

# Returns a `call` node.
def makeCall = { function, actuals* ::
    <> @[call: [function: function, actuals: actuals]]
};

# Returns a `varRef` node.
def makeVarRef = { name ::
    <> @[varRef: name]
};

# Returns a `call` node that names a function as a `varRef`.
def makeCallName = { name, actuals* ::
    <> @[call: [function: makeVarRef(name), actuals: actuals]]
};

# Returns a `literal` node.
def makeLiteral = { value ::
    <> @[literal: value]
};

# Returns node representing a thunk (no-arg function) that returns the
# expression represented by the given node.
def makeThunk = { expression ::
    <> @[closure: [statements: [], yield: expression]]
};


#
# Grammar rules
#
# The following is a near-transliteration of the tree grammar in
# the *Samizdat Layer 0* and *Samizdat Layer 1* specifications.
#

#
# Samizdat Layer 0 definitions
#

# Forward declarations.
def parseProgramBody = forwardFunction();
def parseExpression = forwardFunction();
def parseParser = forwardFunction();

# Documented in Samizdat Layer 0 spec.
def parseOptYieldDef = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            pegMakeToken("<"),
            pegMakeToken("identifier"),
            pegMakeToken(">"),
            pegMakeCode { ., name, . :: <> [yieldDef: tokenValue(name)] }),
        pegMakeCode { <> [:] }));

# Documented in Samizdat Layer 0 spec.
def parseFormal = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeMainSequence(
            pegMakeToken("identifier"),
            pegMakeCode { n :: <> [name: tokenValue(n)] }),
        pegMakeMainSequence(
            pegMakeToken("."),
            pegMakeCode { . :: <> [:] })),
    pegMakeChoice(
        pegMakeMainSequence(
            pegMakeTokenSet("?", "*", "+"),
            pegMakeCode { r :: <> [repeat: tokenType(r)] }),
        pegMakeMainSequence(
            pegMakeCode { <> [:] })),
    pegMakeCode { name, repeat :: <> [:, name*, repeat*] });

# Documented in Samizdat Layer 0 spec.
def parseFormalsList = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            parseFormal,
            pegMakeStar(pegMakeSequence(pegMakeToken(","), parseFormal)),
            pegMakeCode { first, rest ::
                <> [formals: [first, rest*]]
            }),
        pegMakeCode { <> [:] }));

# Documented in Samizdat Layer 0 spec.
def parseProgramDeclarations = pegMakeMainSequence(
    parseOptYieldDef,
    parseFormalsList,
    pegMakeToken("::"),
    pegMakeCode { yieldDef, formals, . :: <> [:, formals*, yieldDef*] });

# Documented in Samizdat Layer 0 spec.
def parseProgram = pegMakeMainSequence(
    pegMakeChoice(
        parseProgramDeclarations,
        pegMakeCode { <> [:] }),
    parseProgramBody,
    pegMakeCode { decls, body :: <> @[closure: [:, decls*, body*]] });

# Documented in Samizdat Layer 0 spec.
def parseClosure = pegMakeMainSequence(
    pegMakeToken("{"),
    parseProgram,
    pegMakeToken("}"),
    pegMakeCode { ., prog, . :: <> prog });

# Documented in Samizdat Layer 0 spec.
def parseNullaryClosure = pegMakeMainSequence(
    parseClosure,
    pegMakeCode { c ::
        ifTrue { <> mapHasKey(tokenValue(c), "formals") }
            { io0Die("Invalid formal argument in code block.") };
        <> c
    });

# Documented in Samizdat Layer 0 spec.
def parseCodeOnlyClosure = pegMakeMainSequence(
    parseNullaryClosure,
    pegMakeCode { c ::
        ifTrue { <> mapHasKey(tokenValue(c), "yieldDef") }
            { io0Die("Invalid yield definition in code block.") };
        <> c
    });

# Documented in Samizdat Layer 0 spec.
def parseInt = pegMakeMainSequence(
    pegMakeToken("int"),
    pegMakeCode { int :: <> makeLiteral(tokenValue(int)) });

# Documented in Samizdat Layer 0 spec.
def parseString = pegMakeMainSequence(
    pegMakeToken("string"),
    pegMakeCode { string :: <> makeLiteral(tokenValue(string)) });

# Documented in Samizdat Layer 0 spec.
def parseIdentifierString = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            pegMakeTokenSet("identifier", "string"),
            pegMakeCode { s :: <> makeLiteral(tokenValue(s)) }),
        pegMakeSequence(
            pegRuleAny,
            pegMakeCode { token ::
                <> ifFalse { <> tokenHasValue(token) }
                    {
                        def type = tokenType(token);
                        def firstCh = stringNth(type, 0);
                        <> ifTrue { <> mapHasKey(LOWER_ALPHA, firstCh) }
                            { <> makeLiteral(type) }
                    }
                })));

# Documented in Samizdat Layer 0 spec.
def parseListElement = pegMakeMainSequence(
    parseExpression,
    pegMakeChoice(
        pegMakeSequence(
            pegMakeToken("*"),
            pegMakeCode { ex, . :: <> @[interpolate: ex] }),
        pegMakeSequence(
            pegMakeToken(".."),
            parseExpression,
            pegMakeCode { ex, ., end ::
                <> @[interpolate: makeCallName("makeRange", ex, end)]
            }),
        pegMakeCode { ex :: <> ex }));

# Documented in Samizdat Layer 0 spec.
def parseUnadornedList = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            parseListElement,
            pegMakeStar(pegMakeSequence(pegMakeToken(","), parseListElement)),
            pegMakeCode { first, rest :: <> [first, rest*] }),
        pegMakeCode { <> [] }));

# Documented in Samizdat Layer 0 spec.
def parseList = pegMakeMainSequence(
    pegMakeToken("["),
    parseUnadornedList,
    pegMakeToken("]"),
    pegMakeCode { ., expressions, . ::
        <> ifTrue { <> eq(expressions, []) }
            { <> makeLiteral([]) }
            { <> makeCallName("makeList", expressions*) }
    });

# Documented in Samizdat Layer 0 spec.
def parseEmptyMap = pegMakeMainSequence(
    pegMakeToken("["),
    pegMakeToken(":"),
    pegMakeToken("]"),
    pegMakeCode { ., ., . :: <> makeLiteral([:]) });

# Documented in Samizdat Layer 0 spec.
def parseMapping = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            pegMakeChoice(
                pegMakeSequence(
                    parseIdentifierString,
                    pegMakeToken(":"),
                    pegMakeCode { k, . :: <> k }),
                pegMakeSequence(
                    parseListElement,
                    pegMakeToken(":"),
                    pegMakeCode { k, . :: <> k })),
            parseExpression,
            pegMakeCode { key, value ::
                <> makeCallName("makeList", value, key)
            }),
        pegMakeSequence(
            parseExpression,
            pegMakeToken("*"),
            pegMakeCode { map, . :: <> map })));

# Documented in Samizdat Layer 0 spec.
def parseMap = pegMakeMainSequence(
    pegMakeToken("["),
    pegMakeOpt(pegMakeSequence(pegMakeToken(":"), pegMakeToken(","))),
    parseMapping,
    pegMakeStar(pegMakeSequence(pegMakeToken(","), parseMapping)),
    pegMakeToken("]"),
    pegMakeCode { ., ., first, rest, . ::
        <> makeCallName("makeMap", first, rest*)
    });

# Documented in Samizdat Layer 0 spec.
def parseToken = pegMakeMainSequence(
    pegMakeToken("@"),
    pegMakeChoice(
        pegMakeMainSequence(
            pegMakeToken("["),
            parseIdentifierString,
            pegMakeOpt(pegMakeSequence(pegMakeToken(":"), parseExpression)),
            pegMakeToken("]"),
            pegMakeCode { ., type, value, . :: <> [type, value*] }),
        pegMakeMainSequence(
            pegMakeToken("["),
            parseExpression,
            pegMakeOpt(pegMakeSequence(pegMakeToken(":"), parseExpression)),
            pegMakeToken("]"),
            pegMakeCode { ., type, value, . :: <> [type, value*] }),
        pegMakeMainSequence(
            parseIdentifierString,
            pegMakeCode { type :: <> [type] })),
    pegMakeCode { ., tokenArgs :: <> makeCallName("makeToken", tokenArgs*) });

# Documented in Samizdat Layer 0 spec.
def parseUniqlet = pegMakeMainSequence(
    pegMakeToken("@@"),
    pegMakeCode { . :: <> makeCallName("makeUniqlet") });

# Documented in Samizdat Layer 0 spec.
def parseVarRef = pegMakeMainSequence(
    pegMakeToken("identifier"),
    pegMakeCode { name :: <> makeVarRef(tokenValue(name)) });

# Documented in Samizdat Layer 0 spec.
def parseVarDef = pegMakeMainSequence(
    pegMakeToken("def"),
    pegMakeToken("identifier"),
    pegMakeToken("="),
    parseExpression,
    pegMakeCode { ., name, ., ex ::
        <> @[varDef: [name: tokenValue(name), value: ex]]
    });

# Documented in Samizdat Layer 0 spec.
def parseParenExpression = pegMakeMainSequence(
    pegMakeToken("("),
    parseExpression,
    pegMakeToken(")"),
    pegMakeCode { ., ex, . :: <> ex });

# Documented in Samizdat Layer 0 spec and Samizdat Layer 1 spec.
def parseAtom = pegMakeMainSequence(
    pegMakeChoice(
        parseVarRef, parseInt, parseString,
        parseList, parseEmptyMap, parseMap,
        parseUniqlet, parseToken, parseClosure,
        parseParenExpression,
        # Defined by Samizdat Layer 1. The lookahead is just to make
        # it clear what is required to "jump into" Layer 1 parsing.
        pegMakeSequence(
            pegMakeLookaheadSuccess(pegMakeToken("{/")),
            parseParser)));

# Documented in Samizdat Layer 0 spec.
def parseActualsList = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            pegMakeToken("()"),
            pegMakeStar(parseClosure)),
        pegMakeSequence(
            pegMakeToken("("),
            parseUnadornedList,
            pegMakeToken(")"),
            pegMakeStar(parseClosure),
            pegMakeCode { ., normalActuals, ., closureActuals ::
                <> [normalActuals*, closureActuals*]
            }),
        pegMakePlus(parseClosure)));

# Documented in Samizdat Layer 0 spec.
def parseCallExpression = pegMakeMainSequence(
    parseAtom,
    pegMakeStar(parseActualsList),
    pegMakeCode { base, actualsLists ::
        <> listReduce(base, actualsLists) { result, ., list ::
            <> makeCall(result, list*)
        }
    });

# Documented in Samizdat Layer 0 spec.
def implExpression = parseCallExpression;
parseExpression(implExpression);

# Documented in Samizdat Layer 0 spec.
def parseStatement = pegMakeMainSequence(
    pegMakeChoice(parseVarDef, parseExpression));

# Documented in Samizdat Layer 0 spec.
def parseNonlocalExit = pegMakeMainSequence(
    pegMakeToken("<"),
    parseVarRef,
    pegMakeToken(">"),
    pegMakeChoice(
        pegMakeSequence(
            parseExpression,
            pegMakeCode { ., name, ., ex ::
                <> makeCall(makeVarRef("nonlocalExit"), name, makeThunk(ex))
            }),
        pegMakeCode { ., name, . ::
            <> makeCall(makeVarRef("nonlocalExit"), name)
        }));

# Documented in Samizdat Layer 0 spec.
def parseYield = pegMakeMainSequence(
    pegMakeToken("<>"),
    pegMakeChoice(
        pegMakeMainSequence(
            parseExpression,
            pegMakeCode { ex :: <> [yield: ex] }),
        pegMakeMainSequence(
            pegMakeCode { <> [:] })));

# Documented in Samizdat Layer 0 spec.
def implProgramBody = pegMakeMainSequence(
    pegMakeStar(pegMakeToken(";")),
    pegMakeStar(
        pegMakeMainSequence(
            parseStatement,
            pegMakePlus(pegMakeToken(";")),
            pegMakeCode { s, . :: <> s })),
    pegMakeChoice(
        pegMakeMainSequence(
            pegMakeChoice(parseStatement, parseNonlocalExit),
            pegMakeCode { s :: <> [statements: [s]] }),
        pegMakeMainSequence(
            parseYield,
            pegMakeCode { y :: <> [statements: [], y*] }),
        pegMakeMainSequence(
            pegMakeCode { <> [statements: []] })),
    pegMakeStar(pegMakeToken(";")),
    pegMakeCode { ., most, last, . ::
        def allStatements = [most*, mapGet(last, "statements")*];
        <> [last*, statements: allStatements]
    });
parseProgramBody(implProgramBody);


#
# Samizdat Layer 1 definitions
#

# `choicePex` is the top-level parsing expression node type.
def parseChoicePex = forwardFunction();

def implParser = pegMakeMainSequence(
    pegMakeToken("{/"),
    parseChoicePex,
    pegMakeToken("/}"),
    pegMakeCode { ., pex, . :: <> @[parser: pex] });
parseParser(implParser);

def parseParenPex = pegMakeMainSequence(
    pegMakeToken("("),
    parseChoicePex,
    pegMakeToken(")"),
    pegMakeCode { ., pex, . :: <> pex });

def parseParserString = pegMakeMainSequence(
    pegMakeToken("string"),
    pegMakeCode { s ::
        def value = tokenValue(s);
        <> ifTrue { <> eq(lowSize(value), 1) }
            { <> @[token: value] }
            { <> s }
    });

def parseParserToken = pegMakeMainSequence(
    pegMakeToken("@"),
    parseIdentifierString,
    pegMakeCode { ., type :: <> @[token: tokenValue(type)] });

def parseParserSetString = pegMakeMainSequence(
    pegMakeToken("string"),
    pegMakeChoice(
        pegMakeSequence(
            pegMakeToken(".."),
            pegMakeCode { s, . ::
                def startValue = tokenValue(s);
                <> ifTrue { <> eq(lowSize(startValue), 1) }
                    { <> intFromString(startValue) }
            },
            pegMakeToken("string"),
            pegMakeCode { ., ., ., end ::
                def endValue = tokenValue(end);
                <> ifTrue { <> eq(lowSize(endValue), 1) }
                    { <> intFromString(endValue) }
            },
            pegMakeCode { <out> ., ., startInt, ., endInt ::
                loopReduce([startInt, ""]) { result ::
                    def at = listFirst(result);
                    def soFar = listLast(result);
                    ifTrue { <> gt(at, endInt) } { <out> @[string: soFar] };
                    <> [iadd(at, 1), stringAdd(soFar, stringFromInt(at))]
                }
            }),
        pegMakeCode { s :: <> s }));

def parseParserSet = pegMakeMainSequence(
    pegMakeToken("["),
    pegMakeChoice(
        pegMakeMainSequence(
            pegMakeToken("!"),
            pegMakeCode { . :: <> "[!]" }),
        pegMakeMainSequence(
            pegMakeCode { <> "[]" })),
    pegMakeChoice(
        pegMakeMainSequence(
            pegMakePlus(parseParserSetString),
            pegMakeCode { strings ::
                def oneString = listReduce("", strings)
                    { result, ., s :: <> stringAdd(result, tokenValue(s)) };
                <> stringReduce([], oneString)
                    { result, ., ch :: <> [result*, ch] }
            }),
        pegMakeMainSequence(
            pegMakePlus(parseParserToken),
            pegMakeCode { tokens ::
                <> listMap(tokens) { ., t :: <> tokenValue(t) }
            }),
        pegMakeMainSequence(
            pegMakeCode { <> [] })),
    pegMakeToken("]"),
    pegMakeCode { ., type, terminals, . :: <> @[(type): terminals] });

def parseParserCode = pegMakeMainSequence(
    parseNullaryClosure,
    pegMakeCode { closure :: <> @["{}": tokenValue(closure)] });

def parseParserPredicate = pegMakeMainSequence(
    pegMakeToken("&&"),
    parseParenExpression,
    pegMakeCode { ., predicate :: <> @["&&": predicate] });

def parseParserAtom = pegMakeMainSequence(
    pegMakeChoice(
        parseVarRef,
        parseParserString,
        parseParserToken,
        parseParserSet,
        parseParserCode,
        parseParserPredicate,
        pegMakeToken("."),
        pegMakeToken("()"),
        parseParenPex));

def parseRepeatPex = pegMakeMainSequence(
    parseParserAtom,
    pegMakeChoice(
        pegMakeSequence(
            pegMakeTokenSet("?", "*", "+"),
            pegMakeCode { atom, repeat :: <> @[tokenType(repeat): atom] }),
        pegMakeCode { atom :: <> atom }));

def parseLookaheadPex = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            pegMakeTokenSet("&", "!"),
            parseRepeatPex,
            pegMakeCode { lookahead, pex :: <> @[tokenType(lookahead): pex] }),
        parseRepeatPex));

def parseNamePex = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            pegMakeToken("identifier"),
            pegMakeToken("="),
            parseLookaheadPex,
            pegMakeCode { name, ., pex ::
                <> @[varDef: [name: tokenValue(name), value: pex]]
            }),
        parseLookaheadPex));

def parseSequencePex = pegMakeMainSequence(
    pegMakePlus(parseNamePex),
    pegMakeCode { items :: <> @[sequence: items] });

def implChoicePex = pegMakeMainSequence(
    parseSequencePex,
    pegMakeStar(
        pegMakeMainSequence(
            pegMakeToken("|"),
            parseSequencePex)),
    pegMakeCode { first, rest :: <> @[choice: [first, rest*]] });
parseChoicePex(implChoicePex);


#
# Exported function, and support thereof
#

# Reports the given list of pending tokens as part of error processing.
def reportError = { pending ::
    io0Note("Pending tokens:");

    listForEach(pending)
        { ., token :: io0Note(format("    %q", token)) };

    io0Die("\nExtra tokens at end of program.")
};

# Documented in Samizdat Layer 0 spec.
def parseProgramOrError = pegMakeMainSequence(
    parseProgram,
    pegMakeOpt(
        pegMakeMainSequence(
            pegMakePlus(pegRuleAny),
            pegMakeCode { pending :: reportError(pending) })),
    pegMakeCode { prog, . :: <> prog });

# Documented in Samizdat Layer 0 spec.
def sam1Tree = { program ::
    def tokens = ifTrue { <> isString(program) }
        { <> sam1Tokenize(program) }
        { <> program };

    <> pegApply(parseProgramOrError, tokens)
};

<> [
    sam1Tree: sam1Tree
]
