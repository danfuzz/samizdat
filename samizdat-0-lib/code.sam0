# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Code functions
#

#
# Helper functions
#

# Object implementation function used by `forwardFunction`.
fn forwardFunctionImpl(yield, state, args*) {
    <> ifTrue { <> eq(state, null) }
        {
            <> ifValue { <> listFirst(args) }
                { function ::
                    ifTrue { <> ne(lowSize(args), 1) }
                        { io0Die("Attempt to forward too many arguments.") };
                    ifFalse { <> isUniqlet(function) }
                        { io0Die("Attempt to forward to non-function.") };
                    yield();
                    <> function;
                }
                { io0Die("Attempt to forward to void.") }
        }
        { yield(state) }
};


#
# Exported functions
#

# Documented in Samizdat Layer 0 spec.
def forwardFunction = {
    def forwardObject = object(forwardFunctionImpl, null);

    <> { args* ::
        <> ifValue { <> forwardObject(args*) }
            { function :: <> function(args*) }
            { <> listFirst(args) }
    }
};

# Documented in Samizdat Layer 0 spec.
def partialApply = { <out> function, args* ::
    <> { more* :: <> function(args*, more*) }
};

<> [
    forwardFunction: forwardFunction,
    partialApply: partialApply
]
