# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Code functions
#

#
# Helper functions
#

# Object implementation function used by `mutableBox`.
boxImpl = { yield state value? ::
    <> ifValue { <> listFirst value }
        { boxValue ::
            yield boxValue;
            <> value
        }
        {
            <> ifValue { <> listFirst state }
                { boxValue :: yield boxValue }
                { io0Die "Attempt to access un-set box." }
        }
};

# Object implementation function used by `forwardFunction`.
forwardFunctionImpl = { yield state args* ::
    <> ifTrue { <> eq state null }
        {
            <> ifValue { <> listFirst args }
                { function ::
                    ifFalse { <> isUniqlet function }
                        { io0Die "Attempt to forward to non-function." };
                    yield();
                    <> function;
                }
                { io0Die "Attempt to forward to void." }
        }
        { yield state }
};


#
# Exported functions
#

# Documented in Samizdat Layer 0 spec.
forwardFunction = {
    forwardObject = object forwardFunctionImpl null;

    <> { args* ::
        <> ifValue { <> apply forwardObject args }
            { function :: <> apply function args }
    }
};

# Documented in Samizdat Layer 0 spec.
mutableBox = {
    <> object boxImpl [];
};

# Documented in Samizdat Layer 0 spec.
partialApply = { function args* <out> ::
    # This mouthful takes an "apply-style" argument list (that is, a number
    # of individual arguments followed at the end by a list-of-the-rest), and
    # returns a single unified list of arguments.
    argsList = apply apply { args* :: <> args } args;

    <> { more* :: <> apply function (listAdd argsList more) }
};

<> [
    "forwardFunction" = forwardFunction
    "mutableBox" = mutableBox
    "partialApply" = partialApply
]
