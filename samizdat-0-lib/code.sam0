# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Code functions
#

#
# Helper functions
#

# Object implementation function used by `mutableBox`.
boxImpl = { yield, state, value? ::
    <> ifValue { <> listFirst(value) }
        { boxValue ::
            yield(boxValue);
            <> value
        }
        {
            <> ifValue { <> listFirst(state) }
                { boxValue :: yield(boxValue) }
                { io0Die("Attempt to access un-set box.") }
        }
};

# Object implementation function used by `forwardFunction`.
forwardFunctionImpl = { yield, state, args* ::
    <> ifTrue { <> eq(state, null) }
        {
            <> ifValue { <> listFirst(args) }
                { function ::
                    ifTrue { <> ne(lowSize(args), 1) }
                        { io0Die("Attempt to forward too many arguments.") };
                    ifFalse { <> isUniqlet(function) }
                        { io0Die("Attempt to forward to non-function.") };
                    yield();
                    <> function;
                }
                { io0Die("Attempt to forward to void.") }
        }
        { yield(state) }
};


#
# Exported functions
#

# Documented in Samizdat Layer 0 spec.
forwardFunction = {
    forwardObject = object(forwardFunctionImpl, null);

    <> { args* ::
        <> ifValue { <> forwardObject(args*) }
            { function :: <> function(args*) }
            { <> listFirst(args) }
    }
};

# Documented in Samizdat Layer 0 spec.
mutableBox = { value? ::
    <> object(boxImpl, value)
};

# Documented in Samizdat Layer 0 spec.
partialApply = { <out> function, args* ::
    # This mouthful takes an "apply-style" argument list (that is, a number
    # of individual arguments followed at the end by a list-of-the-rest), and
    # returns a single unified list of arguments.
    argsList = apply({ args* :: <> args }, args*);

    <> { more* :: <> function(argsList*, more*) }
};

<> [
    "forwardFunction": forwardFunction,
    "mutableBox": mutableBox,
    "partialApply": partialApply
]
