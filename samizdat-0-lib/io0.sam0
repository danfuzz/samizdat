# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Baseline I/O functions
#


#
# Helper functions
#

# Checks whether the given alleged prefix is actually a prefix of the
# given path, or equal to it.
isPrefix = { prefix path <out> ::
    prefixSize = lowSize prefix;

    ifTrue { <> gt prefixSize (lowSize path) }
        {
            # The "prefix" is longer than the path, so it can't actually be
            # a prefix.
            <out> false
        };

    <> eq prefix (listSlice path 0 prefixSize)
};

# Helper for `io0SandboxedReader` which does symbolic link resolution,
# respecting the sandbox directory.
resolveLinks = { sandboxDirectory path <out> ::
    loopReduce [path 50] { result ::
        path = listNth result 0;
        limit = listNth result 1;

        ifTrue { <> le limit 0 }
            { io0Die "Too many links in symbolic link chain." };
        ifFalse { <> isPrefix sandboxDirectory path }
            { io0Die "Symbolic link escapes sandbox directory." };

        <> ifValue { <> io0ReadLink path }
            { newPath :: <> [newPath (isub limit 1)] }
            { <out> path }
    }
};


#
# Exported functions
#

# Documented in Samizdat Layer 0 spec.
io0SandboxedReader = { directory ::
    <> { path ::
        fullPath = resolveLinks directory (listAdd directory path);
        <> io0ReadFileUtf8 fullPath;
    }
};

<> [
    "io0SandboxedReader" = io0SandboxedReader
];
