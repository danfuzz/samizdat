# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Baseline I/O functions
#


#
# Helper functions
#

# Checks whether the given alleged prefix is actually a prefix of the
# given path, or equal to it.
isPrefix = { prefix path ::
    <> or
        { <> eq prefix [] }
        { <> and
            { <> ne path [] }
            { <> eq (listNth prefix @0) (listNth path @0) }
            { <> isPrefix (listDelNth prefix @0) (listDelNth path @0) }
        }
};

# Helper for `io0SandboxedReader` which does symbolic link resolution,
# respecting the sandbox directory.
resolveLinks = { sandboxDirectory path ::
    resolveStep = { path limit ::
        <> ifVoid { <> io0ReadLink path }
            { <> path }
            { newPath ::
                ifFalse { <> isPrefix sandboxDirectory newPath }
                    { io0Die "Symbolic link escapes sandbox directory." };
                ifTrue { <> le limit @0 }
                    { io0Die "Too many links in symbolic link chain." };
                <> resolveStep newPath (isub limit @1)
            }
    };

    <> resolveStep path @50;
};


#
# Exported functions
#

# Documented in Samizdat Layer 0 spec.
io0SandboxedReader = { directory ::
    <> { path ::
        fullPath = resolveLinks directory (listAdd directory path);
        <> io0ReadFileUtf8 fullPath;
    }
};

<> [
    @io0SandboxedReader = io0SandboxedReader
];
