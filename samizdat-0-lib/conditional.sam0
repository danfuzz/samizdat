# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Conditional functions
#

# Documented in Samizdat Layer 0 spec.
fn and(predicates*) {
    <> listReduce(true, predicates)
        { result, ., predicate ::
            ifValue(predicate) { value :: <> value } { return }
        }
};

# Documented in Samizdat Layer 0 spec.
fn ifFalse(predicate, falseFunction, trueFunction?) {
    <> ifValue { <> trueFunction* }
        { trueFunction :: <> ifTrue(predicate, trueFunction, falseFunction) }
        { <> ifTrue(predicate, {}, falseFunction) }
};

# Documented in Samizdat Layer 0 spec.
fn ifVoid(predicate, voidFunction, valueFunction?) {
    <> ifValue { <> valueFunction* }
        { valueFunction :: <> ifValue(predicate, valueFunction, voidFunction) }
        { <> ifValue(predicate, {}, voidFunction) }
};

# Documented in Samizdat Layer 0 spec.
fn or(predicates*) {
    listForEach(predicates)
        { ., predicate ::
            ifValue(predicate) { value :: return value }
        }
};

# Documented in Samizdat Layer 0 spec.
fn \"switch"(value, cases, defaultFunction?) {
    <> ifValue { <> mapGet(cases, value) }
        { function :: <> function() }
        {
            <> ifValue { <> listNth(defaultFunction, 0) }
                { function :: <> function() }
        }
};

<> [
    and: and,
    ifFalse: ifFalse,
    ifVoid: ifVoid,
    or: or,
    switch: \"switch"
]
