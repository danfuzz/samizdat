# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# `FunctionForwarder` type
#
# Data payload is a yield box.
#

def Box = moduleGet({name: ["core", "Box"]});
def Io0 = moduleGet({name: ["core", "Io0"]});


#
# Exported Definitions
#

# Documented in Samizdat Layer 0 spec.
fn make() {
    <> @[FunctionForwarder: Box::makeYieldBox()]
};

# Documented in Samizdat Layer 0 spec.
fn FunctionForwarder_canStore(fwd) {
    <> canStore(dataOf(fwd))
};
genericBind(canStore, "FunctionForwarder", FunctionForwarder_canStore);

# Documented in Samizdat Layer 0 spec.
fn FunctionForwarder_fetch(fwd) {
    <> fetch(dataOf(fwd))
};
genericBind(fetch, "FunctionForwarder", FunctionForwarder_fetch);

# Documented in Samizdat Layer 0 spec.
fn FunctionForwarder_store(fwd, function) {
    ifNot { <> canCall(call, function) }
        { Io0::die("Attempt to forward to non-function.") };

    <> store(dataOf(fwd), function);
};
genericBind(store, "FunctionForwarder", FunctionForwarder_store);

# Documented in Samizdat Layer 0 spec.
fn FunctionForwarder_call(fwd, args*) {
    <> call(fetch(dataOf(fwd)), args*)
};
genericBind(call, "FunctionForwarder", FunctionForwarder_call);

# Documented in Samizdat Layer 0 spec.
fn FunctionForwarder_canCall(fwd, arg) {
    <> canCall(fetch(dataOf(fwd)), arg)
};
genericBind(canCall, "FunctionForwarder", FunctionForwarder_canCall);

<> {
    make: make
}
