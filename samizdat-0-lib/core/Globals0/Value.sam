# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Value functions
#


#
# Exported Definitions
#

# Documented in Samizdat Layer 0 spec.
fn isInt(value) {
    <> hasType(value, Int)
};

# Documented in Samizdat Layer 0 spec.
fn isList(value) {
    <> hasType(value, List)
};

# Documented in Samizdat Layer 0 spec.
fn isMap(value) {
    <> hasType(value, Map)
};

# Documented in Samizdat Layer 0 spec.
fn isOpaqueValue(value) {
    <> ifIs { <> hasType(typeOf(value), Type) }
        { <> value }
};

# Documented in Samizdat Layer 0 spec.
fn isString(value) {
    <> hasType(value, String)
};

# Documented in Samizdat Layer 0 spec.
fn isUniqlet(value) {
    <> hasType(value, Uniqlet)
};

# Documented in Samizdat Layer 0 spec.
fn perGe(v1, v2) {
    <> ifNot { <> totEq(perOrder(v1, v2), -1) }
        { <> v2 }
};

# Documented in Samizdat Layer 0 spec.
fn perGt(v1, v2) {
    <> ifIs { <> totEq(perOrder(v1, v2), 1) }
        { <> v2 }
};

# Documented in Samizdat Layer 0 spec.
fn perLe(v1, v2) {
    <> ifNot { <> totEq(perOrder(v1, v2), 1) }
        { <> v2 }
};

# Documented in Samizdat Layer 0 spec.
fn perLt(v1, v2) {
    <> ifIs { <> totEq(perOrder(v1, v2), -1) }
        { <> v2 }
};

# Documented in Samizdat Layer 0 spec.
fn perNe(v1, v2) {
    <> ifNot { <> perEq(v1, v2) }
        { <> v2 }
};

# Documented in Samizdat Layer 0 spec.
fn totGe(v1, v2) {
    <> ifNot { <> totEq(totOrder(v1, v2), -1) }
        { <> v2 }
};

# Documented in Samizdat Layer 0 spec.
fn totGt(v1, v2) {
    <> ifIs { <> totEq(totOrder(v1, v2), 1) }
        { <> v2 }
};

# Documented in Samizdat Layer 0 spec.
fn totLe(v1, v2) {
    <> ifNot { <> totEq(totOrder(v1, v2), 1) }
        { <> v2 }
};

# Documented in Samizdat Layer 0 spec.
fn totLt(v1, v2) {
    <> ifIs { <> totEq(totOrder(v1, v2), -1) }
        { <> v2 }
};

# Documented in Samizdat Layer 0 spec.
fn totNe(v1, v2) {
    <> ifNot { <> totEq(v1, v2) }
        { <> v2 }
};

<> {
    isInt,
    isList,
    isMap,
    isOpaqueValue,
    isString,
    isUniqlet,
    perGe,
    perGt,
    perLe,
    perLt,
    perNe,
    totGe,
    totGt,
    totLe,
    totLt,
    totNe
}
