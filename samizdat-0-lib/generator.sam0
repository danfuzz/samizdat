# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Generator functions
#


#
# Exported Definitions
#

# Documented in Samizdat Layer 0 spec.
fn collectFilter(filterFunction, generators*) {
    ifIs { <> eq(size(generators), 1) }
        {
            def generator = generators*;
            ifIs { <> isList(generator) } {
                # We are filtering a single list, so just use the
                # special-case (and more efficient) `listFilter`.
                return listFilter(filterFunction, generator)
            }
        };

    <> [makeFilterGenerator(filterFunction, generators*)*]
};

# Documented in Samizdat Layer 0 spec.
fn doFilter(filterFunction, generators*) {
    loopReduce(makeParaGenerator(generators*))
        { gen ::
            def box = makeYieldBox();
            <> ifValue { <> nextValue(gen, box) }
                { nextGenerator ::
                    filterFunction(fetch(box)*);
                    <> [nextGenerator]
                }
                {
                    # The inner generator was voided.
                    return
                }
        }
};

# Documented in Samizdat Layer 0 spec.
fn doGenerator(generator) {
    loopReduce(generator) { gen ::
        <> ifValue { <> nextValue(gen, nullBox) }
            { nextGen <> [nextGen] }
            { return }
    }
};

# Documented in Samizdat Layer 0 spec.
fn doReduce(reduceFunction, generator, baseValues*) {
    loopReduce(generator, baseValues)
        { gen, values ::
            def box = makeYieldBox();
            <> ifValue { <> nextValue(gen, box) }
                { nextGenerator ::
                    <> ifValue { <> reduceFunction(fetch(box), values*) }
                        { nextValues <> [nextGenerator, nextValues] }
                        {
                            # The reduce function discarded the values.
                            <> [nextGenerator, values]
                        }
                }
                {
                    # The inner generator was voided.
                    return values
                }
        }
};

# Documented in Samizdat Layer 0 spec.
fn doReduce1(reduceFunction, generator, baseValue) {
    loopReduce(generator, baseValue)
        { gen, value ::
            def box = makeYieldBox();
            <> ifValue { <> nextValue(gen, box) }
                { nextGenerator ::
                    <> ifValue { <> reduceFunction(fetch(box), value) }
                        { nextValue <> [nextGenerator, nextValue] }
                        {
                            # The reduce function discarded the value.
                            <> [nextGenerator, value]
                        }
                }
                {
                    # The inner generator was voided.
                    return value
                }
        }
};

# Documented in Samizdat Layer 0 spec.
fn mapFromGenerator(generator) {
    # Avoid pointless map->generator->map conversion.
    ifIs { <> isMap(generator) }
        { return generator };

    <> cat([:], generator*)
};

# Documented in Samizdat Layer 0 spec.
fn tokenGenerator(generator) {
    <> makeFilterGenerator(generator)
        { elem <> @[(elem)] }
};

<> [
    collectFilter:       collectFilter,
    doFilter:            doFilter,
    doGenerator:         doGenerator,
    doReduce:            doReduce,
    doReduce1:           doReduce1,
    mapFromGenerator:    mapFromGenerator,
    tokenGenerator:      tokenGenerator
]
