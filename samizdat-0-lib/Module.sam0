# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Module functions
#


#
# Private Definitions
#

# Box containing a map from fully-qualified names to modules. Each name is a
# list-of-strings denoting a "path" to the module.
def theModulesBox = Box_makeMutableBox({});


#
# Type Definition
#
# `Module` payload is `{info: map, exports: map}`. `info` includes at least
# `{name: [string, ...], version: string}`.

# Gets the `exports` of a module.
fn getExports(modu) {
    <> dataOf(modu)::exports
};

# Gets the `info` of a module.
fn getInfo(modu) {
    <> dataOf(modu)::info
};

# Returns a new module like the given one, except with `exports` as
# given.
fn withExports(modu, newExports) {
    <> @[Module: {(dataOf(modu))*, exports: newExports}]
};

# Documented in spec.
fn Module_cat(modu, more*) {
    def data = dataOf(modu);

    def allExports = Generator_filter([modu, more*], getExports);
    def combinedExports = cat({}, allExports*);

    <> withExports(modu, combinedExports)
};
genericBind(cat, "Module", Module_cat);

# Documented in spec.
fn Module_del(modu, key) {
    <> withExports(modu, Collection_del(getExports(modu), key))
};
genericBind(Collection_del, "Module", Module_del);

# Documented in spec.
fn Module_get(modu, key) {
    <> get(getExports(modu), key)
};
genericBind(get, "Module", Module_get);

# Documented in spec.
fn Module_keyList(modu) {
    <> Collection_keyList(getExports(modu))
};
genericBind(Collection_keyList, "Module", Module_keyList);

# Documented in spec.
fn Module_nameOf(modu) {
    <> getInfo(modu)::name
};
genericBind(nameOf, "Module", Module_nameOf);

# Documented in spec.
fn Module_nth(modu, n) {
    <> Collection_nth(getExports(modu), n)
};
genericBind(Collection_nth, "Module", Module_nth);

# Documented in spec.
fn Module_put(modu, key, value) {
    <> withExports(modu, Collection_put(getExports(modu), key, value))
};
genericBind(Collection_put, "Module", Module_put);

# Documented in spec.
fn Module_sizeOf(modu) {
    <> Collection_sizeOf(getExports(modu))
};
genericBind(Collection_sizeOf, "Module", Module_sizeOf);

# Documented in spec.
fn Module_slice(modu, start, end?) {
    <> withExports(modu, Collection_slice(getExports(modu), start, end*))
};
genericBind(Collection_slice, "Module", Module_slice);



#
# Exported Definitions
#

# Documented in spec.
fn moduleDef(modu) {
    def name = nameOf(modu);

    ifIs { <> moduleGet({name: name}) }
        {
            Io0_die(cat("Cannot redefine module: ",
                stringFromModuleName(name)))
        };

    def mods = Box_fetch(theModulesBox);
    Box_store(theModulesBox, Collection_put(mods, name, modu));

    <> modu
};

# Documented in spec.
fn moduleGet(searchInfo) {
    # TODO: Currently ignores everything about `searchInfo` other than the name.
    def name = searchInfo::name;

    <> get(Box_fetch(theModulesBox), name)
};

# Documented in spec.
fn stringFromModuleName(fqName) {
    # Prefix each component with "::", combine them all, and then drop the
    # first two characters.
    def parts = Generator_filter(fqName, { n <> cat("::", n) });
    def result = cat(parts*);

    <> Collection_slice(result, 2)
};


<> {
    moduleDef:            moduleDef,
    moduleGet:            moduleGet,
    stringFromModuleName: stringFromModuleName
}
