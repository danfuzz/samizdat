# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Samizdat Layer 1 tokenizer
#
# The following is a near-transliteration of the token grammar in
# the *Samizdat Layer 0* and *Samizdat Layer 1* specifications.
#

#
# These definitions are meant to mirror the code in the spec for
# tokenization, as closely as possible.
#

# Documented in Samizdat Layer 0 spec.
def KEYWORDS = mapFromGenerator(
    filterGenerator([
        "def", "fn", "return",
        # *Layer 2* defines additional keywords here.
        []*])
        { name <> [(name): @[(name)]] });

# Documented in Samizdat Layer 0 spec.
def INT_CHARS = [
    "0": 0, "1": 1, "2": 2, "3": 3, "4": 4,
    "5": 5, "6": 6, "7": 7, "8": 8, "9": 9,
    "a": 10, "b": 11, "c": 12, "d": 13, "e": 14, "f": 15,
    "A": 10, "B": 11, "C": 12, "D": 13, "E": 14, "F": 15,
    "_": -1
];

# Documented in Samizdat Layer 0 spec.
fn intFromDigitChar(ch) {
    <> get(INT_CHARS, typeOf(ch))
};

# Documented in Samizdat Layer 0 spec.
fn processStringParts(parts) {
    <> @[string: cat("", parts*)]
};

# Documented in Samizdat Layer 0 spec.
def tokOptWhitespace = pegMakeMainSequence(
    pegMakeOpt(
        pegMakeSequence(
            pegMakeLookaheadSuccess(pegMakeCharSet("# \n", "/")),
            pegMakeStar(
                pegMakeChoice(
                    pegMakePlus(pegMakeCharSet(" \n")),
                    pegMakeSequence(
                        pegMakeString("#"),
                        pegMakeStar(pegMakeCharSetComplement("\n")),
                        pegMakeOpt(pegMakeString("\n"))))))));

# Documented in Samizdat Layer 0 spec.
def tokPunctuation = pegMakeMainSequence(
    pegMakeLookaheadSuccess(pegMakeCharSet("&@:.,=-+?;*<>{}()[]", "/|!")),
    pegMakeChoice(
        pegMakeString("::"),
        pegMakeString(".."),
        pegMakeString("<>"),
        pegMakeString("{/"),
        pegMakeString("/}"),
        pegRuleAny));

# Documented in Samizdat Layer 0 spec.
def tokInt = pegMakeMainSequence(
    pegMakePlus(
        pegMakeMainSequence(
            pegMakeCharSet("0123456789"),
            pegMakeCode(intFromDigitChar))),
    pegMakeCode { digits ::
        def value = doReduce1(digits, 0)
            { digit, result <> add(digit, mul(result, 10)) };
        <> @[int: value]
    });

# Documented in Samizdat Layer 0 spec.
def tokStringPart = pegMakeMainChoice(
    pegMakeSequence(
        pegMakePlus(pegMakeCharSetComplement("\\\"\n")),
        pegMakeCode { chars <> stringFromTokenList(chars) }),
    pegMakeSequence(
        pegMakeString("\n"),
        pegMakeStar(pegMakeString(" ")),
        pegMakeCode { ., . <> "\n" }),
    pegMakeSequence(
        pegMakeString("\\"),
        pegMakeChoice(
            pegMakeSequence(
                pegMakeString("\\"), pegMakeCode { ., . <> "\\" }),
            pegMakeSequence(
                pegMakeString("\""), pegMakeCode { ., . <> "\"" }),
            pegMakeSequence(
                pegMakeString("n"),  pegMakeCode { ., . <> "\n" }),
            pegMakeSequence(
                pegMakeString("r"),  pegMakeCode { ., . <> "\r" }),
            pegMakeSequence(
                pegMakeString("t"),  pegMakeCode { ., . <> "\t" }),
            pegMakeSequence(
                pegMakeString("0"),  pegMakeCode { ., . <> "\0" }))));

# Documented in Samizdat Layer 0 spec.
def tokString = pegMakeMainSequence(
    pegMakeString("\""),
    pegMakeStar(tokStringPart),
    pegMakeChoice(
        pegMakeSequence(
            pegMakeString("\""),
            pegMakeCode { ., parts, . <> processStringParts(parts) }),
        pegMakeCode { ., . <> @[error: "Unterminated string literal."] }));

# These are all the characters which are allowed to start an identifier.
def IDENTIFIER_START_CHARS =
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";

# These are all the characters which are allowed to be in an identifier.
def IDENTIFIER_CHARS = cat(IDENTIFIER_START_CHARS, "0123456789");

# Documented in Samizdat Layer 0 spec.
def tokIdentifier = pegMakeMainSequence(
    pegMakeCharSet(IDENTIFIER_START_CHARS),
    pegMakeStar(pegMakeCharSet(IDENTIFIER_CHARS)),
    pegMakeCode { one, rest ::
        def string = stringFromTokenList([one, rest*]);
        <> ifValueOr { <> get(KEYWORDS, string) }
            { <> @[identifier: string] }
    });

# Documented in Samizdat Layer 0 spec.
def tokQuotedIdentifier = pegMakeMainSequence(
    pegMakeString("\\"),
    tokString,
    pegMakeCode { ., s <> @[identifier: (dataOf(s))] });

# Documented in Samizdat Layer 0 spec.
def tokError = pegMakeMainSequence(
    pegRuleAny,
    pegMakeStar(pegMakeCharSetComplement("\n")),
    pegMakeCode { badCh, . ::
        def msg = cat("Unrecognized character: ", typeOf(badCh));
        <> @[error: msg]
    });

# Documented in Samizdat Layer 0 spec.
def tokToken = pegMakeMainChoice(
    tokString,
    tokIdentifier,
    tokQuotedIdentifier,
    tokPunctuation,
    tokInt,
    tokError);

# Documented in Samizdat Layer 0 spec.
def tokFile = pegMakeMainSequence(
    pegMakeStar(
        pegMakeSequence(
            tokOptWhitespace,
            tokToken)),
    tokOptWhitespace,
    pegMakeCode { tokens, . <> tokens });


#
# Exported Definitions
#

# Documented in Samizdat Layer 0 spec.
fn sam1Tokenize(programText) {
    <> pegApply(tokFile, programText)
};

<> [
    sam1Tokenize: sam1Tokenize
]
