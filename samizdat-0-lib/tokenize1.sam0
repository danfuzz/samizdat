# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Samizdat Layer 1 tokenizer
#
# The following is a near-transliteration of the token grammar in
# the *Samizdat Layer 0* and *Samizdat Layer 1* specifications.
#

#
# Helper functions
#

# Documented in Samizdat Layer 0 spec.
tokWhitespace = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeCharSet(" \n"),
        pegMakeSequence(
            pegMakeToken("#"),
            pegMakeStar(pegMakeCharSetComplement("\n")),
            pegMakeToken("\n"))));

# Documented in Samizdat Layer 0 spec and Samizdat Layer 1 spec.
tokPunctuation = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeString("@@"),
        pegMakeString("::"),
        pegMakeString("<>"),
        pegMakeString("()"),
        pegMakeString(".."), # Defined by Samizdat Layer 1.
        pegMakeString("{/"), # Defined by Samizdat Layer 1.
        pegMakeString("/}"), # Defined by Samizdat Layer 1.
        # The latter three characters are defined by Samizdat Layer 1.
        pegMakeCharSet("@:.=+?;*<>{}()[]", "&|!")));

# Documented in Samizdat Layer 0 spec.
tokStringChar = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            pegMakeCharSetComplement("\\\""),
            pegMakeCode { ch :: <> tokenType(ch) }),
        pegMakeSequence(
            pegMakeToken("\\"),
            pegMakeChoice(
                pegMakeMainSequence(
                    pegMakeToken("\\"), pegMakeCode { . :: <> "\\" }),
                pegMakeMainSequence(
                    pegMakeToken("\""), pegMakeCode { . :: <> "\"" }),
                pegMakeMainSequence(
                    pegMakeToken("n"), pegMakeCode { . :: <> "\n" }),
                pegMakeMainSequence(
                    pegMakeToken("0"), pegMakeCode { . :: <> "\0" })))));

# Documented in Samizdat Layer 0 spec.
tokString = pegMakeMainSequence(
    pegMakeToken("\""),
    pegMakeStar(tokStringChar),
    pegMakeToken("\""),
    pegMakeCode { . chars . ::
        <> @["string" (apply(stringAdd, chars))]
    });

# These are all the characters which are allowed to start an identifier.
IDENTIFIER_START_CHARS =
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";

# These are all the characters which are allowed to be in an identifier.
IDENTIFIER_CHARS = stringAdd(IDENTIFIER_START_CHARS, "0123456789");

# Documented in Samizdat Layer 0 spec.
tokIdentifier = pegMakeMainSequence(
    pegMakeCharSet(IDENTIFIER_START_CHARS),
    pegMakeStar(pegMakeCharSet(IDENTIFIER_CHARS)),
    pegMakeCode { first rest ::
        <> @["identifier" (stringFromTokenList(listPrepend(first, rest)))]
    });

# Documented in Samizdat Layer 0 spec.
tokQuotedIdentifier = pegMakeMainSequence(
    pegMakeToken("\\"),
    tokString,
    pegMakeCode { . s ::
        <> @["identifier" (tokenValue(s))]
    });

# These are all the int digits, as a map from strings to
# digit values.
INT_CHARS = ["0"=0 "1"=1 "2"=2 "3"=3 "4"=4 "5"=5 "6"=6 "7"=7 "8"=8 "9"=9];

# Given a decimal digit, returns the digit value.
intFromDigitChar = { ch :: <> mapGet(INT_CHARS, tokenType(ch)) };

# Documented in Samizdat Layer 0 spec.
tokInt = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            pegMakeToken("-"),
            pegMakeCode { . :: <> -1 }),
        pegMakeCode { <> 1 }),
    pegMakePlus(
        pegMakeMainSequence(
            pegMakeCharSet("0123456789"),
            pegMakeCode(intFromDigitChar))),
    pegMakeCode { sign digits ::
        value = listReduce(0, digits)
            { result . digit :: <> iadd(digit, imul(result, 10)) };
        <> @["int" (imul(sign, value))]
    });

# Documented in Samizdat Layer 0 spec.
tokError = pegMakeMainSequence(
    pegRuleAny,
    pegMakeStar(pegMakeCharSetComplement("\n")),
    pegMakeCode { badCh . ::
        msg = format("Unrecognized character: %q", tokenType(badCh));
        <> @["error" msg]
    });

# Documented in Samizdat Layer 0 spec.
tokToken = pegMakeMainSequence(
    pegMakeChoice(
        tokInt,
        tokPunctuation,
        tokString,
        tokIdentifier,
        tokQuotedIdentifier,
        tokError));

# Documented in Samizdat Layer 0 spec.
tokFile = pegMakeMainSequence(
    pegMakeStar(
        pegMakeSequence(
            pegMakeStar(tokWhitespace),
            tokToken)),
    pegMakeStar(tokWhitespace),
    pegMakeCode { tokens . ::
        <> tokens
    });


#
# Exported functions
#

# Documented in Samizdat Layer 0 spec.
sam1Tokenize = { programText ::
    <> pegApply(tokFile, programText)
};

<> [
    "sam1Tokenize" = sam1Tokenize
]
