# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Samizdat Layer 1 tokenizer
#
# The following is a near-transliteration of the token grammar in
# the *Samizdat Layer 0* and *Samizdat Layer 1* specifications.
#

#
# Helper functions
#

# Documented in Samizdat Layer 0 spec.
def KEYWORDS = [def: @def, fn: @fn, return: @return];

# Documented in Samizdat Layer 0 spec.
def tokWhitespace = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeCharSet(" \n"),
        pegMakeSequence(
            pegMakeToken("#"),
            pegMakeStar(pegMakeCharSetComplement("\n")),
            pegMakeToken("\n"))));

# Documented in Samizdat Layer 0 spec and Samizdat Layer 1 spec.
def tokPunctuation = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeString("@@"),
        pegMakeString("::"),
        pegMakeString(".."),
        pegMakeString("<>"),
        pegMakeString("&&"), # Defined by Samizdat Layer 1.
        pegMakeString("{/"), # Defined by Samizdat Layer 1.
        pegMakeString("/}"), # Defined by Samizdat Layer 1.
        # The latter three characters are defined by Samizdat Layer 1.
        pegMakeCharSet("@:.,=-+?;*<>{}()[]", "&|!")));

# Documented in Samizdat Layer 0 spec.
def tokStringChar = pegMakeMainSequence(
    pegMakeChoice(
        pegMakeSequence(
            pegMakeCharSetComplement("\\\""),
            pegMakeCode { ch :: <> tokenType(ch) }),
        pegMakeSequence(
            pegMakeToken("\\"),
            pegMakeChoice(
                pegMakeMainSequence(
                    pegMakeToken("\\"), pegMakeCode { . :: <> "\\" }),
                pegMakeMainSequence(
                    pegMakeToken("\""), pegMakeCode { . :: <> "\"" }),
                pegMakeMainSequence(
                    pegMakeToken("n"), pegMakeCode { . :: <> "\n" }),
                pegMakeMainSequence(
                    pegMakeToken("r"), pegMakeCode { . :: <> "\r" }),
                pegMakeMainSequence(
                    pegMakeToken("t"), pegMakeCode { . :: <> "\t" }),
                pegMakeMainSequence(
                    pegMakeToken("0"), pegMakeCode { . :: <> "\0" })))));

# Documented in Samizdat Layer 0 spec.
def tokString = pegMakeMainSequence(
    pegMakeToken("\""),
    pegMakeStar(tokStringChar),
    pegMakeToken("\""),
    pegMakeCode { ., chars, . ::
        <> @[string: stringAdd(chars*)]
    });

# These are all the characters which are allowed to start an identifier.
def IDENTIFIER_START_CHARS =
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";

# These are all the characters which are allowed to be in an identifier.
def IDENTIFIER_CHARS = stringAdd(IDENTIFIER_START_CHARS, "0123456789");

# Documented in Samizdat Layer 0 spec.
def tokIdentifier = pegMakeMainSequence(
    pegMakeCharSet(IDENTIFIER_START_CHARS),
    pegMakeStar(pegMakeCharSet(IDENTIFIER_CHARS)),
    pegMakeCode { first, rest ::
        def string = stringFromTokenList([first, rest*]);
        <> ifValue { <> mapGet(KEYWORDS, string) }
            { keyword :: <> keyword }
            { <> @[identifier: string] }
    });

# Documented in Samizdat Layer 0 spec.
def tokQuotedIdentifier = pegMakeMainSequence(
    pegMakeToken("\\"),
    tokString,
    pegMakeCode { ., s ::
        <> @[identifier: (tokenValue(s))]
    });

# These are all the int digits, as a map from strings to
# digit values.
def INT_CHARS = [
    "0": 0, "1": 1, "2": 2, "3": 3, "4": 4,
    "5": 5, "6": 6, "7": 7, "8": 8, "9": 9
];

# Given a decimal digit, returns the digit value.
fn intFromDigitChar(ch) { <> mapGet(INT_CHARS, tokenType(ch)) };

# Documented in Samizdat Layer 0 spec.
def tokInt = pegMakeMainSequence(
    pegMakePlus(
        pegMakeMainSequence(
            pegMakeCharSet("0123456789"),
            pegMakeCode(intFromDigitChar))),
    pegMakeCode { digits ::
        def value = listReduce(0, digits)
            { result, ., digit :: <> iadd(digit, imul(result, 10)) };
        <> @[int: value]
    });

# Documented in Samizdat Layer 0 spec.
def tokError = pegMakeMainSequence(
    pegRuleAny,
    pegMakeStar(pegMakeCharSetComplement("\n")),
    pegMakeCode { badCh, . ::
        def msg = stringAdd("Unrecognized character: ", tokenType(badCh));
        <> @[error: msg]
    });

# Documented in Samizdat Layer 0 spec.
def tokToken = pegMakeMainSequence(
    pegMakeChoice(
        tokInt,
        tokPunctuation,
        tokString,
        tokIdentifier,
        tokQuotedIdentifier,
        tokError));

# Documented in Samizdat Layer 0 spec.
def tokFile = pegMakeMainSequence(
    pegMakeStar(
        pegMakeSequence(
            pegMakeStar(tokWhitespace),
            tokToken)),
    pegMakeStar(tokWhitespace),
    pegMakeCode { tokens, . ::
        <> tokens
    });


#
# Exported functions
#

# Documented in Samizdat Layer 0 spec.
fn sam1Tokenize(programText) {
    <> pegApply(tokFile, programText)
};

<> [
    sam1Tokenize: sam1Tokenize
]
