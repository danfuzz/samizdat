# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Samizdat Layer 1 tokenizer
#
# The following is a near-transliteration of the token grammar in
# the *Samizdat Layer 0* and *Samizdat Layer 1* specifications.
#

#
# Helper functions
#

# Documented in Samizdat Layer 0 spec.
parseWhitespace = pegMakeMainSequence
    (pegMakeChoice
        (pegMakeCharSet " \n")
        (pegMakeSequence
            (pegMakeToken "#")
            (pegMakeStar (pegMakeCharSetComplement "\n"))
            (pegMakeToken "\n")));

# Documented in Samizdat Layer 0 spec and Samizdat Layer 1 spec.
parsePunctuation = pegMakeMainSequence
    (pegMakeChoice
        (pegMakeString "@@")
        (pegMakeString "::")
        (pegMakeString "<>")
        (pegMakeString "()")
        (pegMakeString "{/") # Defined by Samizdat Layer 1.
        (pegMakeString "/}") # Defined by Samizdat Layer 1.
        # The latter three characters are defined by Samizdat Layer 1.
        (pegMakeCharSet "@:.=+?;*<>{}()[]" "&|!"));

# Documented in Samizdat Layer 0 spec.
parseStringChar = pegMakeMainSequence
    (pegMakeChoice
        (pegMakeSequence
            (pegMakeCharSetComplement "\\\"")
            (pegMakeCode { ch :: <> tokenType ch }))
        (pegMakeSequence
            (pegMakeToken "\\")
            (pegMakeChoice
                (pegMakeMainSequence
                    (pegMakeToken "\\") (pegMakeCode { . :: <> "\\" }))
                (pegMakeMainSequence
                    (pegMakeToken "\"") (pegMakeCode { . :: <> "\"" }))
                (pegMakeMainSequence
                    (pegMakeToken "n") (pegMakeCode { . :: <> "\n" }))
                (pegMakeMainSequence
                    (pegMakeToken "0") (pegMakeCode { . :: <> "\0" })))));

# Documented in Samizdat Layer 0 spec.
parseString = pegMakeMainSequence
    (pegMakeToken "\"")
    (pegMakeStar parseStringChar)
    (pegMakeToken "\"")
    (pegMakeCode { . chars . ::
        <> @["string" (apply stringAdd chars)]
    });

# These are all the characters which are allowed to start an identifier.
IDENTIFIER_START_CHARS =
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";

# These are all the characters which are allowed to be in an identifier.
IDENTIFIER_CHARS = stringAdd IDENTIFIER_START_CHARS "0123456789";

# Documented in Samizdat Layer 0 spec.
parseIdentifier = pegMakeMainSequence
    (pegMakeCharSet IDENTIFIER_START_CHARS)
    (pegMakeStar (pegMakeCharSet IDENTIFIER_CHARS))
    (pegMakeCode { first rest ::
        <> @["identifier" (stringFromTokenList (listPrepend first rest))]
    });

# Documented in Samizdat Layer 0 spec.
parseQuotedIdentifier = pegMakeMainSequence
    (pegMakeToken "\\")
    parseString
    (pegMakeCode { . s ::
        <> @["identifier" (tokenValue s)]
    });

# These are all the int digits, as a map from strings to
# digit values.
INT_CHARS = ["0"=0 "1"=1 "2"=2 "3"=3 "4"=4 "5"=5 "6"=6 "7"=7 "8"=8 "9"=9];

# Given a decimal digit, returns the digit value.
intFromDigitChar = { ch :: <> mapGet INT_CHARS (tokenType ch) };

# Documented in Samizdat Layer 0 spec.
parseInt = pegMakeMainSequence
    (pegMakeChoice
        (pegMakeSequence
            (pegMakeToken "-")
            (pegMakeCode { . :: <> (-1) }))
        (pegMakeCode { <> 1 }))
    (pegMakePlus
        (pegMakeMainSequence
            (pegMakeCharSet "0123456789")
            (pegMakeCode intFromDigitChar)))
    (pegMakeCode { sign digits ::
        value = listReduce 0 digits
            { result . digit :: <> iadd digit (imul result 10) };
        <> @["int" (imul sign value)]
    });

# Documented in Samizdat Layer 0 spec.
parseToken = pegMakeMainSequence
    (pegMakeChoice
        parsePunctuation
        parseInt
        parseString
        parseIdentifier
        parseQuotedIdentifier);

# Documented in Samizdat Layer 0 spec.
parseFile = pegMakeMainSequence
    (pegMakeStar
        (pegMakeSequence
            (pegMakeStar parseWhitespace)
            parseToken))
    (pegMakeStar parseWhitespace)
    (pegMakeCode { tokens . ::
        <> tokens
    });

# Documented in Samizdat Layer 0 spec.
parseErrorLine = pegMakeMainSequence
    pegRuleLookaheadAny
    (pegMakeStar (pegMakeCharSetComplement "\n"))
    (pegMakeChoice
        (pegMakeToken "\n")
        pegRuleEof)
    (pegMakeCode { . chars . :: <> stringFromTokenList chars });

# Documented in Samizdat Layer 0 spec.
parseFileOrError = pegMakeMainSequence
    parseFile
    (pegMakeOpt
        (pegMakeMainSequence
            (pegMakePlus parseErrorLine)
            (pegMakeCode { errorLines ::
                io0Note "Extra text at end of program.";
                io0Note "Pending text:";
                io0Die (format "  %s" (listNth errorLines 0))
            })))
    (pegMakeCode { tokens . :: <> tokens });


#
# Exported functions
#

# Documented in Samizdat Layer 0 spec.
sam1Tokenize = { programText ::
    <> pegApply parseFileOrError programText
};

<> [
    "sam1Tokenize" = sam1Tokenize
]
