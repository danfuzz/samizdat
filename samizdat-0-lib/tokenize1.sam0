# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Samizdat Layer 1 tokenizer
#
# The following is a near-transliteration of the token grammar in
# the *Samizdat Layer 0* and *Samizdat Layer 1* specifications.
#

#
# These definitions are meant to mirror the code in the spec for
# tokenization, as closely as possible.
#

# Documented in Samizdat Layer 0 spec.
def KEYWORDS = collectAsMap(
    makeFilterGenerator([
        "def", "fn", "return",
        # *Layer 2* defines additional keywords here.
        []*])
        { name <> [(name): @[(name)]] });

# Documented in Samizdat Layer 0 spec.
def INT_CHARS = [
    "0": 0, "1": 1, "2": 2, "3": 3, "4": 4,
    "5": 5, "6": 6, "7": 7, "8": 8, "9": 9,
    "a": 10, "b": 11, "c": 12, "d": 13, "e": 14, "f": 15,
    "A": 10, "B": 11, "C": 12, "D": 13, "E": 14, "F": 15,
    "_": -1
];

# Documented in Samizdat Layer 0 spec.
fn intFromDigitChar(ch) {
    <> get(INT_CHARS, typeOf(ch))
};

# Documented in Samizdat Layer 0 spec.
fn processStringParts(parts) {
    <> @[string: cat("", parts*)]
};

# Documented in Samizdat Layer 0 spec.
def tokWhitespace = Peg:makeMainSequence(
    pegMakeLookaheadSuccess(pegMakeCharSet("# \n", "/")),
    pegMakePlus(
        pegMakeChoice(
            pegMakePlus(pegMakeCharSet(" \n")),
            pegMakeSequence(
                pegMakeString("#"),
                pegMakeChoice(
                    pegMakeSequence(
                        pegMakeCharSet("#! "),
                        pegMakeStar(pegMakeCharSetComplement("\n"))),
                    pegMakeString("\n"),
                    pegEof)))));

# Documented in Samizdat Layer 0 spec.
def tokPunctuation = Peg:makeMainSequence(
    pegMakeLookaheadSuccess(pegMakeCharSet("&@:.,=-+?;*<>{}()[]", "/|!")),
    pegMakeChoice(
        pegMakeString("->"),
        pegMakeString("::"),
        pegMakeString(".."),
        pegMakeString("<>"),
        pegMakeString("{/"),
        pegMakeString("/}"),
        pegAny));

# Documented in Samizdat Layer 0 spec.
def tokInt = Peg:makeMainSequence(
    pegMakePlus(
        pegMakeSequence(
            pegMakeCharSet("0123456789"),
            pegMakeCode(intFromDigitChar))),
    pegMakeCode { digits ::
        def value = doReduce1(digits, 0)
            { digit, result <> add(digit, mul(result, 10)) };
        <> @[int: value]
    });

# Documented in Samizdat Layer 0 spec.
def tokStringPart = Peg:makeMainChoice(
    pegMakeSequence(
        pegMakePlus(pegMakeCharSetComplement("\\\"\n")),
        pegMakeCode(stringFromTokenList)),
    pegMakeSequence(
        pegMakeString("\n"),
        pegMakeStar(pegMakeString(" ")),
        pegMakeResult("\n")),
    pegMakeSequence(
        pegMakeString("\\"),
        pegMakeChoice(
            pegMakeSequence(pegMakeString("\\"), pegMakeResult("\\")),
            pegMakeSequence(pegMakeString("\""), pegMakeResult("\"")),
            pegMakeSequence(pegMakeString("n"),  pegMakeResult("\n")),
            pegMakeSequence(pegMakeString("r"),  pegMakeResult("\r")),
            pegMakeSequence(pegMakeString("t"),  pegMakeResult("\t")),
            pegMakeSequence(pegMakeString("0"),  pegMakeResult("\0")))));

# Documented in Samizdat Layer 0 spec.
def tokString = Peg:makeMainSequence(
    pegMakeString("\""),
    pegMakeStar(tokStringPart),
    pegMakeChoice(
        pegMakeSequence(
            pegMakeString("\""),
            pegMakeCode { ., parts, . <> processStringParts(parts) }),
        pegMakeCode { ., . <> @[error: "Unterminated string literal."] }));

# These are all the characters which are allowed to start an identifier.
def IDENTIFIER_START_CHARS =
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";

# These are all the characters which are allowed to be in an identifier.
def IDENTIFIER_CHARS = cat(IDENTIFIER_START_CHARS, "0123456789");

# Documented in Samizdat Layer 0 spec.
def tokIdentifier = Peg:makeMainSequence(
    pegMakeCharSet(IDENTIFIER_START_CHARS),
    pegMakeStar(pegMakeCharSet(IDENTIFIER_CHARS)),
    pegMakeCode { one, rest ::
        def string = stringFromTokenList([one, rest*]);
        <> ifValueOr { <> get(KEYWORDS, string) }
            { <> @[identifier: string] }
    });

# Documented in Samizdat Layer 0 spec.
def tokQuotedIdentifier = Peg:makeMainSequence(
    pegMakeString("\\"),
    tokString,
    pegMakeCode { ., s <> @[identifier: dataOf(s)] });

# Documented in Samizdat Layer 0 spec.
def tokError = Peg:makeMainSequence(
    pegAny,
    pegMakeStar(pegMakeCharSetComplement("\n")),
    pegMakeCode { badCh, . ::
        def msg = cat("Unrecognized character: ", typeOf(badCh));
        <> @[error: msg]
    });

# Documented in Samizdat Layer 0 spec.
def tokToken = Peg:makeMainChoice(
    tokString,
    tokIdentifier,
    tokQuotedIdentifier,
    tokPunctuation,
    tokInt,
    tokError);

# Documented in Samizdat Layer 0 spec.
def tokFile = Peg:makeMainSequence(
    pegMakeStar(
        pegMakeSequence(
            pegMakeOpt(tokWhitespace),
            tokToken)),
    pegMakeOpt(tokWhitespace),
    pegMakeCode { tokens, . <> tokens });


#
# Exported Definitions
#

# Documented in Samizdat Layer 0 spec.
fn samTokenize(programText) {
    <> Peg:apply(tokFile, programText)
};

<> [
    samTokenize: samTokenize
]
