# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Samizdat Layer 0 Core Library
#
# This is a Samizdat Layer 0 program which defines all the
# core library functions and other bindings that aren't primitive.
#

# These are the arguments passed to the library itself.
#
# `READER` is expected to be a function of one argument
# `{ fileName :: ... }`, where `fileName` indicates a file to read.
# The result of the call is a stringlet of the file contents. If
# the file doesn't exist, this call fails, terminating the runtime.
# `READER` is used to read in the sub-components of the core library.

READER ::


#
# Helper functions
#

# Loads the named library files in the given context, returning a maplet
# representing both the originally given context *and* the bindings defined
# by the named library. Each library file is expected to return a maplet of
# bindings that it wishes to export.
loadLibrary = { ctx name rest* ::
    text = READER name;
    tree = sam0Tree text;
    function = sam0Eval ctx tree;

    # Evaluating the program text/tree results in a function which, when
    # called, yields the bindings defined by that file (because that's how
    # each library file is written).
    bindings = function();

    # The end result is the addition of the new bindings to the original
    # context.
    <> mapletAdd ctx bindings;
};

# Loads all of the named libraries, in order, allowing later libraries to
# depend on earlier ones. The first listed library can depend only on the
# given context.
loadAllLibraries = { ctx name rest* ::
    newCtx = loadLibrary ctx name;

    # Can't say `eq rest @[]` here, since `eq` is not yet defined.
    <> ifTrue { <> lowOrderIs rest @[] @0 }
        { <> newCtx }
        { <> apply loadAllLibraries (listletInsNth rest @0 newCtx) }
};


#
# Exported functions
#

# Documented in Samizdat Layer 0 spec.
#
# This is the one binding that is most conveniently defined in this file,
# as it needs to refer to the overall bindings maplet, which is not readily
# accessible anywhere else.
sam0Library = {
    <> CORELIB   # Defined below.
};


#
# Main export mechanics
#

# Set up the first tier of library, which is just the primitives and
# `sam0Library` (defined above).
baseLibrary = mapletPut PRIMLIB @sam0Library sam0Library;

# The argument list here is all the library files in dependency order.
# (First depends only on the primitives, second can depend on primitives
# and the first, etc.).
CORELIB = loadAllLibraries
    baseLibrary
    @"const" @"boolean" @"type" @"conditional"
    @"intlet" @"collections" @"format";

<> CORELIB
