# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Comparisons / Booleans
#

# Documented in Samizdat Layer 0 spec.
fn eq(v1, v2) { <> lowOrderIs(v1, v2, 0) };

# Documented in Samizdat Layer 0 spec.
fn ge(v1, v2) { <> lowOrderIs(v1, v2, 1, 0) };

# Documented in Samizdat Layer 0 spec.
fn gt(v1, v2) { <> lowOrderIs(v1, v2, 1) };

# Documented in Samizdat Layer 0 spec.
fn lt(v1, v2) { <> lowOrderIs(v1, v2, -1) };

# Documented in Samizdat Layer 0 spec.
fn le(v1, v2) { <> lowOrderIs(v1, v2, -1, 0) };

# Documented in Samizdat Layer 0 spec.
fn ne(v1, v2) { <> lowOrderIs(v1, v2, -1, 1) };

# Documented in Samizdat Layer 0 spec.
fn booleanFromLogic(logic?) {
    <> ifTrue { <> eq(logic, []) }
        { <> false }
        { <> true }
};

# Documented in Samizdat Layer 0 spec.
fn logicFromBoolean(bool) {
    <> ifTrue { <> eq(value, true) }
        { <> true }
        {
            <> ifTrue { <> eq(value, false) }
                { <> }
                { io0Die("Non-boolean argument to `logicFromBoolean`.") }
        }
};

# Documented in Samizdat Layer 0 spec.
fn not(value) {
    <> ifTrue { <> eq(value, true) }
        { <> false }
        {
            <> ifTrue { <> eq(value, false) }
                { <> true }
                { io0Die("Non-boolean argument to `not`.") }
        }
};

<> [
    eq:  eq,
    ge:  ge,
    gt:  gt,
    le:  le,
    lt:  lt,
    ne:  ne,
    not: not,
    booleanFromLogic: booleanFromLogic,
    logicFromBoolean: logicFromBoolean
]
