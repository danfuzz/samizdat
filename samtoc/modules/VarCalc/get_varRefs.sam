## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

## TODO: Ought to be able to do something like:
##     use Lang0Node *;
def $Lang0Node = moduleLoad(["core", "Lang0Node"]);
def get_actuals    = $Lang0Node::get_actuals;
def get_formals    = $Lang0Node::get_formals;
def get_function   = $Lang0Node::get_function;
def get_name       = $Lang0Node::get_name;
def get_nodeValue  = $Lang0Node::get_nodeValue;
def get_statements = $Lang0Node::get_statements;
def get_yield      = $Lang0Node::get_yield;
def get_yieldDef   = $Lang0Node::get_yieldDef;

def get_varDefs = intraLoad("get_varDefs")::get_varDefs;

## `node.get_varRefs()`: Generic that returns free variable references of
## `node`, as list of names.
def get_varRefs = makeRegularGeneric("get_varRefs", 1, 1);

## Extracts and combines the `varRefs` of all the arguments.
fn catVarRefs(nodes*) {
    <> [].cat(( n in nodes <> n.varRefs )*)
};

genericBind(
    get_varRefs,
    @@apply,
    fn apply_get_varRefs(this) {
        <> catVarRefs(this.function, this.actuals)
    });

genericBind(
    get_varRefs,
    @@call,
    fn call_get_varRefs(this) {
        <> catVarRefs(this.function, this.actuals*)
    });

genericBind(
    get_varRefs,
    @@closure,
    fn closure_get_varRefs(this) {
        if (def refs = this::varRefs) {
            ## Already calculated for this node.
            return refs
        };

        ## `baseLocals` is the list of all local variables defined at the
        ## top of the closure, including formal arguments and a yield def
        ## (if any).
        def baseLocals = [
            this.yieldDef?*,
            ( f in this.formals <> f::name )*];

        ## The extra element at the end is to represent the closure yield.
        def statementDefs = [( s in this.statements <> s.varDefs )*, []];

        ## What's happening here is that for each statement (and the yield at
        ## the end), we get its variable references and remove from them refs
        ## for any variables that are locally defined before the statement.
        ## This produces the array `statementRefs` whose elements are merged,
        ## producing the full set of free variables referenced by the closure
        ## as a whole. Deletion from the list is achieved by converting the
        ## refs to a map (refs as keys, values all `null`), and then doing
        ## key deletion. The resulting `statmentRefs` is a list of these maps.
        def statementRefs = (
                s in [this.statements*, this.yield?*],
                idx in (0..) ->
            def defs = baseLocals.cat(statementDefs[..!idx]*);
            var refs = {s.varRefs*: null};
            for (d in defs) {
               refs := $Collection::del(refs, d)
            };
            <> refs
        );

        ## The result of concatenating all the `statementRefs` is a map. The
        ## final result is the list of refs, that is, a list of all the keys.
        <> $Collection::keyList({}.cat(statementRefs*))
    });

genericBind(
    get_varRefs,
    @@closureRef,
    fn closureRef_get_varRefs(this) {
        <> this::varRefs
    });

genericBind(
    get_varRefs,
    @@jump,
    fn jump_get_varRefs(this) {
        <> catVarRefs(this.function, this.nodeValue?*)
    });

genericBind(
    get_varRefs,
    @@literalRef,
    fn literalRef_get_varRefs(this) {
        <> []
    });

genericBind(
    get_varRefs,
    @@varBind,
    fn varBind_get_varRefs(this) {
        <> [this.name, this.nodeValue.varRefs*]
    });

genericBind(
    get_varRefs,
    @@varDef,
    fn varDef_get_varRefs(this) {
        <> (def v = this.nodeValue) & v.varRefs | []
    });

genericBind(
    get_varRefs,
    @@varDefMutable,
    fn varDefMutable_get_varRefs(this) {
        <> (def v = this.nodeValue) & v.varRefs | []
    });

genericBind(
    get_varRefs,
    @@varRef,
    fn varRef_get_varRefs(this) {
        <> [this.name]
    });

<> {get_varRefs}
