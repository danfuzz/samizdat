## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Method call tree.
##

import ./CodeString :: fix;
import ./Wrapper :: *;
import ./indentation :: *;


##
## Class Definition
##

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

class MethCall
        access: ACCESS,
        new: NEW {
    fn flatten() {
        def data = this.(ACCESS)();
        def args = data::args;

        def argStr = if (#args == 0) {
            "NULL"
        } else {
            "".cat(
                "(zvalue[]) { ",
                ( a in args, i in (#args.. by -1) ->
                    "".cat(a.flatten(), (i == 1) & "" | ", ")
                )*,
                " }")
        };

        return "".cat(
            "methCall(",
            data::target.flatten(), ", ",
            data::name.flatten(), ", ",
            "\(#args), ",
            argStr,
            ")"
        )
    };

    fn indent(level, maxColumns) {
        def data = this.(ACCESS)();
        def prefix1 = indentation(level);
        def prefix2 = indentation(level + 1);
        def args = data::args;
        def nextLevel = level + 1;

        def argStr = if (#args == 0) {
            "NULL"
        } else {
            def level2 = level + 2;
            "".cat(
                "(zvalue[]) {\n",
                ( a in args, i in (#args.. by -1) ->
                    a.indent(level2, maxColumns).cat(
                        (i == 1) & "" | ",\n")
                )*,
                "}")
        };

        return "".cat(
            prefix1, "methCall(\n",
            data::target.indent(nextLevel, maxColumns), ",\n",
            data::name.indent(nextLevel, maxColumns), ",\n",
            prefix2, "\(#args),\n",
            prefix2, argStr,
            ")"
        )
    };

    fn prefersFlat() {
        def data = this.(ACCESS)();
        return? data::flatOk** & this;
    };
};


##
## Exported Definitions
##

export fn genMethCall(target, name, args*) {
    def fixTarget = fix(target);
    def fixName = fix(name);
    def fixArgs = [ a in args -> fix(a) ];
    var flatOk = false;

    if ((#args < 5) & fixTarget.prefersFlat()) {
        flatOk := true;
        for (a in fixArgs) {
            if (!a.prefersFlat()) {
                flatOk := false;
                break
            }
        }
    };

    return genWrapper(
        MethCall.(NEW)(
            @{
                target: fixTarget,
                name:   fixName,
                args:   fixArgs,
                flatOk
            }))
};
