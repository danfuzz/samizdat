## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Variable assignment tree.
##

import ./CodeString :: fix;
import ./Wrapper :: *;
import ./indentation :: *;


##
## Class Definition
##

## Secret used to control access to this class. TODO: Should probably be an
## anonymous symbol.
def SECRET = makeUniqlet();

## Class being defined here.
def Assign = makeObjectClass(@.Assign, SECRET);

fn Assign.flatten() {
    def data = this.objectDataOf(SECRET);
    return "\(data::target.flatten()) = \(data::value.flatten())"
};

fn Assign.indent(level, maxColumns) {
    def data = this.objectDataOf(SECRET);
    return "".cat(
        data::target.indent(level, maxColumns),
        " =\n",
        data::value.indent(level + 1, maxColumns)
    )
};

fn Assign.prefersFlat() {
    def data = this.objectDataOf(SECRET);
    return? data::target.prefersFlat()
        & data::value.prefersFlat()
        & this
};


##
## Exported Definitions
##

export fn genAssign(target, value) {
    return genWrapper(
        makeObject(Assign, SECRET, {target: fix(target), value: fix(value)}))
};
