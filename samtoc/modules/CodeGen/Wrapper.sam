## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Outer wrapper for code-gen nodes.
##
## Payload:
## * tree -- the main tree node
## * flatBox -- box containing the flattened version, if created
##

import ./indentation :: *;


##
## Class Definition
##

## Secret used to control access to this class. TODO: Should probably be an
## anonymous symbol.
def SECRET = makeUniqlet();

## Class being defined here.
def Wrapper = makeObjectClass(@.Wrapper, SECRET);

fn Wrapper.flatten() {
    def data = this.objectDataOf(SECRET);
    def flatBox = data::flatBox;

    return flatBox*
        | (flatBox* := data::tree.flatten())
};

fn Wrapper.indent(level, maxColumns) {
    def data = this.objectDataOf(SECRET);
    def tree = data::tree;

    if (tree.prefersFlat()) {
        def flat = this.flatten();
        def prefix = indentation(level);
        if ((#flat + #prefix) <= maxColumns) {
            return prefix.cat(flat)
        }
    };

    return tree.indent(level, maxColumns)
};

fn Wrapper.prefersFlat() {
    def data = this.objectDataOf(SECRET);
    return? data::tree.prefersFlat() & this;
};


##
## Exported Definitions
##

export fn genWrapper(tree) {
    def flat;
    return makeObject(Wrapper, SECRET, {tree, flatBox: (var flat)})
};
