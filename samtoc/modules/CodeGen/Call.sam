## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Function call tree.
##

import ./Wrapper :: *;
import ./indentation :: *;
import ./protocol :: *;


##
## Class Definition
##

## Secret used to control access to this class. TODO: Should probably be an
## anonymous selector.
def SECRET = makeUniqlet();

## Class being defined here.
def Call = makeObjectClass("Call", SECRET);

fn Call.flatten() {
    def data = objectDataOf(this, SECRET);
    def args = data::args;

    return cat(
        data::function.flatten(),
        "(",
        ( a in args, i in (#args.. by -1) ->
            cat(a.flatten(), (i == 1) & "" | ", ")
        )*,
        ")"
    )
};

fn Call.indent(level, maxColumns) {
    def data = objectDataOf(this, SECRET);
    def prefix = indentation(level);
    def args = data::args;
    def nextLevel = level + 1;

    return cat(
        prefix, data::function.flatten(),
        "(\n",
        ( a in args, i in (#args.. by -1) ->
            cat(a.indent(nextLevel, maxColumns), (i == 1) & "" | ",\n")
        )*,
        ")"
    )
};

fn Call.prefersFlat() {
    def data = objectDataOf(this, SECRET);
    return? data::flatOk** & this;
};


##
## Exported Definitions
##

export fn genCall(function, args*) {
    var flatOk = false;
    if ((#args < 5) & function.prefersFlat()) {
        flatOk := true;
        for (a in args) {
            if (!a.prefersFlat()) {
                flatOk := false;
                break
            }
        }
    };

    return genWrapper(makeObject(Call, SECRET, {function, args, flatOk}))
};
