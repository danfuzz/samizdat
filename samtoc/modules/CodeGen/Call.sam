## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Function call tree.
##

import ./CodeString :: fix;
import ./Wrapper :: *;
import ./indentation :: *;


##
## Class Definition
##

## Secret used to control access to this class.
def SECRET = @secret.toUnlisted();

class Call
        access: SECRET {
    fn flatten() {
        def data = SECRET(this);
        def args = data::args;

        return "".cat(
            data::function.flatten(),
            "(",
            ( a in args, i in (#args.. by -1) ->
                "".cat(a.flatten(), (i == 1) & "" | ", ")
            )*,
            ")"
        )
    };

    fn indent(level, maxColumns) {
        def data = SECRET(this);
        def prefix = indentation(level);
        def args = data::args;
        def nextLevel = level + 1;

        return "".cat(
            prefix, data::function.flatten(),
            "(\n",
            ( a in args, i in (#args.. by -1) ->
                "".cat(a.indent(nextLevel, maxColumns), (i == 1) & "" | ",\n")
            )*,
            ")"
        )
    };

    fn prefersFlat() {
        def data = SECRET(this);
        return? data::flatOk** & this;
    };
};


##
## Exported Definitions
##

export fn genCall(function, args*) {
    def fixFunction = fix(function);
    def fixArgs = [ a in args -> fix(a) ];
    var flatOk = false;

    if ((#args < 5) & fixFunction.prefersFlat()) {
        flatOk := true;
        for (a in fixArgs) {
            if (!a.prefersFlat()) {
                flatOk := false;
                break
            }
        }
    };

    return genWrapper(
        SECRET(Call,
            @{
                function: fixFunction,
                args: fixArgs,
                flatOk
            }))
};
