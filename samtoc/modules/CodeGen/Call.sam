## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Function call tree.
##

import ./CodeString :: *;
import ./Wrapper :: *;
import ./indentation :: *;


##
## Class Definition
##

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

export class Call
        access: ACCESS,
        new: NEW {
    class.new(function, args*) {
        def fixFunction = CodeString.fix(function);
        def fixArgs = [ a in args -> CodeString.fix(a) ];
        var flatOk = false;

        if ((#args < 5) & fixFunction.prefersFlat()) {
            flatOk := true;
            for (a in fixArgs) {
                if (!a.prefersFlat()) {
                    flatOk := false;
                    break
                }
            }
        };

        return Wrapper.new(
            this.(NEW)(
                @{
                    function: fixFunction,
                    args: fixArgs,
                    flatOk
                }))
    };

    .flatten() {
        def data = this.(ACCESS)();
        def args = data::args;

        return "".cat(
            data::function.flatten(),
            "(",
            ( a in args, i in (#args.. by -1) ->
                "".cat(a.flatten(), (i == 1) & "" | ", ")
            )*,
            ")"
        )
    };

    .indent(level, maxColumns) {
        def data = this.(ACCESS)();
        def prefix = indentation(level);
        def args = data::args;
        def nextLevel = level + 1;

        return "".cat(
            prefix, data::function.flatten(),
            "(\n",
            ( a in args, i in (#args.. by -1) ->
                "".cat(a.indent(nextLevel, maxColumns), (i == 1) & "" | ",\n")
            )*,
            ")"
        )
    };

    .prefersFlat() {
        def data = this.(ACCESS)();
        return? data::flatOk** & this;
    };
};
