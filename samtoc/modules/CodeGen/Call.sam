## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Function call tree.
##

def indentation = intraLoad("indentation")::indentation;

def $protocol = intraLoad("protocol");
def flatten = $protocol::flatten;
def indent = $protocol::indent;

fn makeCall(function, args*) {
    def flat = "\[
        function.flatten(),
        "(",
        ( a in args, i in (#args.. by -1) ->
            <> [a.flatten(), (i == 1) & "" | ", "]
        )*,
        ")"
    ]";

    <> @Call{function, args, flat}
};

genericBind(
    flatten,
    @@Call,
    fn Call_flatten(this) {
        <> this::flat
    });

genericBind(
    indent,
    @@Call,
    fn Call_indent(this, level, maxColumns) {
        def prefix = indentation(level);

        if ((#this::flat + #prefix) <= maxColumns) {
            return "\[prefix, this::flat]"
        };

        def args = this::args;
        def nextLevel = level + 1;

        <> "\[
            prefix, this::function.flatten(), "(\n",
            ( a in args, i in (#args.. by -1) ->
                <> [
                    a.indent(nextLevel, maxColumns),
                    (i == 1) & ")" | ",\n"
                ]
            )*
        ]"
    });

<> {makeCall}
