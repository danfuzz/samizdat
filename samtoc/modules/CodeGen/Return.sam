## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Return tree.
##

import ./CodeString :: fix;
import ./Wrapper :: *;
import ./indentation :: *;


##
## Class Definition
##

## Secret used to control access to this class. TODO: Should probably be an
## anonymous selector.
def SECRET = makeUniqlet();

## Class being defined here.
def Return = makeObjectClass("Return", SECRET);

fn Return.flatten() {
    def data = this.objectDataOf(SECRET);
    return "return \(data::tree.flatten())"
};

fn Return.indent(level, maxColumns) {
    def data = this.objectDataOf(SECRET);
    def prefix = indentation(level);

    return "\
        \(prefix)return
        \(data::tree.indent(level + 1, maxColumns))"
};

fn Return.prefersFlat() {
    def data = this.objectDataOf(SECRET);
    return? data::tree.prefersFlat()
        & this
};


##
## Exported Definitions
##

export fn genReturn(tree) {
    return genWrapper(makeObject(Return, SECRET, {tree: fix(tree)}))
};
