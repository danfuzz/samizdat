# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Indenting of C function call source.
#

#
# Private definitions
#

# Gets the flattened version of the given source tree.
fn flatten(tree) {
    <> isString(tree) | tree::flat
};

# Makes an indentation prefix string for the given level.
fn indentPrefix(level) {
    <> cat([. in 1..level <> "  "]*)
};


#
# Exported definitions
#

# Indents the given source tree by the given amount, aiming to keep lines
# no longer than the given number of columns. Yields a string.
fn indent(tree, level, maxColumns) {
    def prefix = indentPrefix(level);
    def prefixSize = Collection::sizeOf(prefix);

    if (isString(tree)) {
        return cat(prefix, tree);
    };

    def flat = flatten(tree);

    if ((Collection::sizeOf(flat) + prefixSize) < maxColumns) {
        return cat(prefix, flat)
    };

    def args = tree::args;

    <> cat(
        prefix, flatten(tree::name), "(\n",
        ( a in args, i in (Collection::sizeOf(args))..-1..+ ->
            def s = cat(indent(a, level + 1, maxColumns));
            <> cat(s, (i == 1) & "" | ",\n")
        )*,
        ")")
};

<> {
    indent
}
