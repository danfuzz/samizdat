## Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Indenting of C function call source.
##

##
## Private definitions
##

## Gets the flattened version of the given source tree.
fn flatten(tree) {
    <> isString(tree) | tree::flat
};

## List of indentation prefixes (index is level of indentation).
def INDENTATION = [ n in 0..100 <> "".cat([. in 1..n <> "  "]*) ];


##
## Exported definitions
##

## Indents the given source tree by the given amount, aiming to keep lines
## no longer than the given number of columns. Yields a string.
fn indent(tree, level, maxColumns) {
    def prefix = INDENTATION[level];

    if (isString(tree)) {
        return cat(prefix, tree);
    };

    def flat = flatten(tree);

    if ((Collection::sizeOf(flat) + Collection::sizeOf(prefix)) < maxColumns) {
        return cat(prefix, flat)
    };

    def args = tree::args;
    def nextLevel = level + 1;

    <> cat(
        prefix, flatten(tree::name), "(\n",
        ( a in args, i in (Collection::sizeOf(args))..-1..+ ->
            <> cat(indent(a, nextLevel, maxColumns), (i == 1) & ")" | ",\n")
        )*)
};

<> {
    indent
}
