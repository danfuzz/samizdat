/*
 * GENERATED CODE!
 * GENERATED CODE!
 * GENERATED CODE!
 *
 * This code *might* be derived from a copyrighted source. Proceed with
 * caution!
 */

#include "type/Box.h"
#include "type/Builtin.h"
#include "type/Collection.h"
#include "type/Int.h"
#include "type/List.h"
#include "type/String.h"
#include "type/Value.h"
#include "util.h"

/* Global context originally passed into `eval`. */
static zvalue GLOBALS = NULL;


/*
 * Literal values
 */

\(literalDeclarations)
static void initLiterals(zvalue context) {
\(literalInits)}


/*
 * Closure definitions
 */

\(closureDeclarations)
\(closureBodies)
\(closureMakers)
static zvalue mainClosure(void) {
\(mainClosure)}


/*
 * Main entry point
 */

/* Top-level evaluation result. */
static zvalue EVAL_RESULT = NULL;

zvalue eval(zvalue context) {
  if (GLOBALS == NULL) {
    GLOBALS = context;
    initLiterals(context);
  } else if (!valEq(GLOBALS, context)) {
    die("Cannot re-eval with different global context.");
  }

  if (EVAL_RESULT == NULL) {
    EVAL_RESULT = mainClosure();
    datImmortalize(EVAL_RESULT);
  }

  return EVAL_RESULT;
}
