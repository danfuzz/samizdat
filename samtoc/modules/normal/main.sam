## Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

def templateText = submoduleRead("template.txt");

def Interner = submoduleUse("Interner");
def collectClosures = submoduleUse("collectClosures");
def internLiterals = submoduleUse("internLiterals");
def translate = submoduleUse("translate");

def CodeGen = moduleUse({name: ["CodeGen"]});
def DataCode = moduleUse({name: ["DataCode"]});
def Lang0Node = moduleUse({name: ["Lang0Node"]});
def Template = moduleUse({name: ["Template"]});

def Io1 = moduleUse({name: ["core", "Io1"]});
def Lang2 = moduleUse({name: ["core", "Lang2"]});

def flatten = CodeGen::flatten;
def indent = CodeGen::indent;

def get_interns = Interner::get_interns;
def intern = Interner::intern;

def get_actuals    = Lang0Node::get_actuals;
def get_formals    = Lang0Node::get_formals;
def get_function   = Lang0Node::get_function;
def get_id         = Lang0Node::get_id;
def get_maxArgs    = Lang0Node::get_maxArgs;
def get_minArgs    = Lang0Node::get_minArgs;
def get_name       = Lang0Node::get_name;
def get_statements = Lang0Node::get_statements;
def get_value      = Lang0Node::get_value;
def get_varRefs    = Lang0Node::get_varRefs;
def get_yield      = Lang0Node::get_yield;
def get_yieldDef   = Lang0Node::get_yieldDef;

## Indent with the usual width column limit.
fn usualIndent(tree, depth) {
    <> indent(tree, depth, 78)
};

## Returns a `makeClosure_*` declaration, as a code tree.
fn closureDeclaration(cloIdx, clo) {
    def varRefs = clo.varRefs;
    <> CodeGen::makeCall(
        "static zvalue makeClosure_\(cloIdx)",
        ( idx in (0..), name in varRefs ->
            <> CodeGen::makeComment("\%q(name)", "zvalue free_\(idx)")
        )*);
};

## Returns a full `makeClosure_*` definition, as as string.
fn closureMaker(cloIdx, clo) {
    def name = (def n = clo.name)
        & translate::translate(n, Box::nullBox).flatten()
        | "NULL";

    def varRefs = clo.varRefs;
    def declaration = closureDeclaration(cloIdx, clo);
    def stateAssigns = [ idx in (0..!#varRefs) ->
        def stat = CodeGen::makeStatement(
            CodeGen::makeAssign("state[\(idx)]", "free_\(idx)"));
        <> stat.usualIndent(1)
    ];
    def resultAssign = CodeGen::makeAssign(
        "zvalue result",
        CodeGen::makeCall(
            "makeBuiltin", "\(clo.minArgs)", "\(clo.maxArgs)",
            "FUN_IMPL_NAME(\(cloIdx))", "\(#varRefs)", name));

    <> "\
    \/\(declaration.usualIndent(0)) {
    \/\(resultAssign.usualIndent(1));
    \/  zvalue *state = builtinGetState(result).arr;
    \/\(stateAssigns)
    \/  return result;
    \/}\n\n"
};

## Returns a function definition for the code for a closure, as a string.
fn closureBody(cloIdx, clo) {
    ## Set up the initial variable bindings.
    def freeNames = clo.varRefs;
    def formalNames = [ f in clo.formals <> f::name ];

    var vars = cat(
        ( idx in (0..), name in freeNames ->
            <> {(name): {
                origName: name,
                kind: "free",
                name: "free_\(idx)",
                init: "state[\(idx)]"
            }}
        )*,
        ( idx in (0..), name in formalNames ->
            ## TODO: Handle repetition modifiers.
            <> {(name): {
                origName: name,
                kind: "arg",
                name: "arg_\(idx)",
                init: CodeGen::makeCall("makeResult", "args[\(idx)]")
            }}
        )*,
        ( name in clo.yieldDef? ->
            ## TODO: Something real.
            <> {(name): {
                origName: "<\(name)>",
                kind: "yield",
                name: "yield",
                init: "NULL"
            }}
        )*
    );
    def varsBox = Box::makeCell(vars);

    ## Make C local variable defintions for each of the incoming
    ## variables.
    def varStats = [ name in [freeNames*, formalNames*, clo.yieldDef?*] ->
        def binding = vars[name];
        def stat = CodeGen::makeStatement(
            CodeGen::makeComment(
                "\%q(binding::origName)",
                CodeGen::makeAssign("zvalue \(binding::name)",
                    binding::init)));
        <> stat.usualIndent(1)
    ];

    ## Translate the statements and the yield. Note that the `statements`
    ## definition is a list constructor (not a generator), as its body has
    ## to run before `yield` is calculated (in order to have the correct
    ## set of vars defined).
    def statements = [ s in clo.statements ->
        def stat = CodeGen::makeStatement(translate::translate(s, varsBox));
        <> stat.usualIndent(1)
    ];

    def yield = (def y = clo.yield)
        & translate::translate(y, varsBox)
        | "NULL";
    def yieldStat = CodeGen::makeStatement(
        CodeGen::makeReturn(yield));

    <> "\
    \/static FUN_IMPL_DECL(\(cloIdx)) {
    \/  zvalue *state = builtinGetState(thisFunction).arr;
    \/\(varStats)
    \/\(statements)
    \/\(yieldStat.usualIndent(1))}\n\n"
};

## Constructs the top-level closure. This is similar to translating a
## `@closureRef` node, except that the closure state is initialized from
## the global context and not from local or captured variables.
fn mainClosureMaker(node, interner) {
    def varRefs = node.varRefs;
    def ids = [ name in varRefs <> interner.intern(name) ];

    def stat = CodeGen::makeStatement(
        CodeGen::makeReturn(
            CodeGen::makeCall("makeClosure_\(node.id)",
                ( name in varRefs, id in ids ->
                    <> CodeGen::makeComment("\%q(name)",
                        CodeGen::makeCall("makeResult",
                            CodeGen::makeCall("collGet",
                                "GLOBALS", "LIT_\(id)")))
                )*)));

    <> stat.usualIndent(1)
};

fn compile(sourcePath, targetPath) {
    def sourceText = Io1::readFileUtf8(sourcePath);

    ## Note: The node resulting from a call to `parseProgram` is always of
    ## type `closure`.
    def mainNode = Lang2::parseProgram(sourceText);

    def interner = Interner::makeInterner();
    def litsNode = internLiterals(mainNode, interner);

    def closuresNode = collectClosures(litsNode);
    def closures = closuresNode::closures;
    def closureDeclarations = cat(
        ( idx in (0..), clo in closures ->
            def stat = CodeGen::makeStatement(closureDeclaration(idx, clo));
            <> "\(stat.usualIndent(0))\n"
        )*);
    def closureMakers = cat(
        ( idx in (0..), clo in closures <> closureMaker(idx, clo) )*);
    def closureBodies = cat(
        ( idx in (0..), clo in closures <> closureBody(idx, clo) )*);
    def mainClosure = mainClosureMaker(closuresNode::node, interner);

    def literals = interner.interns;
    def literalDeclarations = cat(
        ( index in (0..!#literals) ->
            <> "static zvalue LIT_\(index) = NULL;\n"
        )*);
    def literalInits = cat(
        ( index in (0..), lit in literals ->
            def init = CodeGen::makeStatement(
                CodeGen::makeCall("datImmortalize",
                    CodeGen::makeAssign("LIT_\(index)",
                        DataCode::convert(lit))));
            <> init.usualIndent(2)
        )*);

    def replacements = {
        closureBodies,
        closureDeclarations,
        closureMakers,
        literalDeclarations,
        literalInits,
        mainClosure
    };

    def outputText = Template::apply(templateText, replacements);

    Io1::writeFileUtf8(targetPath, outputText)
};

<> {compile}
