## Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Convenient access to execution parse trees.
##

## Accessor for `call` nodes.

fn get actuals(node) {
    <> dataOf(node)::actuals
};

## Accessor for `expression`, `interpolate`, and `voidable` nodes.

fn get expression(node) {
    <> dataOf(node)
};

## Accessor for `closure` and `fnDef` nodes.

fn get formals(node) {
    <> dataOf(node)::formals
};

## Accessor for `call` nodes.

fn get function(node) {
    <> dataOf(node)::function
};

## Accessor for `fnDef`, `varDef`, and `varRef` nodes.

def get name = makeRegularGeneric("get-name", 1, 1);

genericBind(
    get name,
    "fnDef",
    fn fnDef_get_name(node) { <> dataOf(node)::name });

genericBind(
    get name,
    "varDef",
    fn varDef_get_name(node) { <> dataOf(node)::name });

genericBind(
    get name,
    "varRef",
    fn varRef_get_name(node) { <> dataOf(node) });

## Accessor for `closure` and `fnDef` nodes.

fn get statements(node) {
    <> dataOf(node)::statements
};

## Accessor for `literal` and `varDef` nodes.

def get value = makeRegularGeneric("get-value", 1, 1);

genericBind(
    get value,
    "literal",
    fn literal_get_value(node) { <> dataOf(node) });

genericBind(
    get value,
    "varDef",
    fn varDef_get_value(node) { <> dataOf(node)::value });

## Accessor for `closure` and `fnDef` nodes.

fn get yield(node) {
    <> dataOf(node)::yield
};

## Accessor for `closure` and `fnDef` nodes.

fn get yieldDef(node) {
    <> dataOf(node)::yieldDef
};

<> {
    get actuals:    get actuals,
    get expression: get expression,
    get formals:    get formals,
    get function:   get function,
    get name:       get name,
    get statements: get statements,
    get value:      get value,
    get yield:      get yield,
    get yieldDef:   get yieldDef
}
