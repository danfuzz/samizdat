# Copyright 2013 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

#
# Convenient access to execution parse trees.
#

# Accessor for `call` nodes.
fn getActuals(node) {
    <> dataOf(node)::actuals
};

# Accessor for `expression`, `interpolate`, and `voidable` nodes.
fn getExpression(node) {
    <> dataOf(node)
};

# Accessor for `closure` and `fnDef` nodes.
fn getFormals(node) {
    <> dataOf(node)::formals
};

# Accessor for `call` nodes.
fn getFunction(node) {
    <> dataOf(node)::function
};

# Accessor for `fnDef`, `varDef`, and `varRef` nodes.
def getName = makeRegularGeneric("getName", 1, 1);
fn fnDef_getName(node) { <> dataOf(node)::name };
genericBind(getName, "fnDef", fnDef_getName);
fn varDef_getName(node) { <> dataOf(node)::name };
genericBind(getName, "varDef", varDef_getName);
fn varRef_getName(node) { <> dataOf(node) };
genericBind(getName, "varRef", varRef_getName);

# Accessor for `closure` and `fnDef` nodes.
fn getStatements(node) {
    <> dataOf(node)::statements
};

# Accessor for `literal` and `varDef` nodes.
def getValue = makeRegularGeneric("getValue", 1, 1);
fn literal_getValue(node) { <> dataOf(node) };
genericBind(getValue, "literal", literal_getValue);
fn varDef_getValue(node) { <> dataOf(node)::value };
genericBind(getValue, "varDef", varDef_getValue);

# Accessor for `closure` and `fnDef` nodes.
fn getYield(node) {
    <> dataOf(node)::yield
};

# Accessor for `closure` and `fnDef` nodes.
fn getYieldDef(node) {
    <> dataOf(node)::yieldDef
};

<> {
    getActuals:    getActuals,
    getExpression: getExpression,
    getFormals:    getFormals,
    getFunction:   getFunction,
    getName:       getName,
    getStatements: getStatements,
    getValue:      getValue,
    getYield:      getYield,
    getYieldDef:   getYieldDef
}
