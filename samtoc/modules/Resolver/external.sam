## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Type definition: ExternalResolver
##
## Payload:
## * cache -- cache of resolved results
## * nextResolver -- resolver to defer to when this one fails to resolve.
## * path -- filesystem path to a directory of modules
##

import core.Io0;

import Reader;

import ./cache;
import ./internal :: makeInternalResolver;
import ./protocol :: resolve;


##
## Private Definitions
##

## Does direct resolution on the given `source`. Only ever called when
## `source` is known to be `external` and so *might* be found directly
## in this resolver's directory of modules.
fn directResolve(self, source) {
    def name = dataOf(source);
    def dirPath = "\(self::path)/\(name)";
    def infoPath = "\(dirPath).saminfo";

    return if ($Io0::fileType(infoPath) == "file") {
        ## We found a prefab info file. Read it!
        def info = $Reader::readEvalExpression0(infoPath);
        @module{info}
    } else if ($Io0::fileType(dirPath) == "directory") {
        ## We found a source directory for a module. Make an internal resolver
        ## for it, and use that to resolve its `main`.
        def subResolver = makeInternalResolver(dirPath, self);
        subResolver.resolve(@internal("main"))
    }
};


##
## Exported Definitions
##

fn @@ExternalResolver.resolve(source) {
    if (def found = $cache::cacheGet(this::cache, source)) {
        ## `found` is always a list. See comment below.
        return? found*
    };

    ## The result is always a list, so that we can cache a not-found result
    ## as the empty list.
    def result = (
        hasType(source, @@external)
            & this.directResolve(source)
            | (this::nextResolver).resolve(source)
    )?;

    ## Cache the result, so we don't bother with a search the next time.
    $cache::cachePut(this::cache, source, result);

    return? result*
};

## Makes an external resolver. As a handy convenience, if the `path`
## isn't an existing directory, this just returns the given `nextResolver`.
## This means you can call this function on an optional captive modules
## directory and get sensible behavior.
export fn makeExternalResolver(path, nextResolver) {
    if ($Io0::fileType(path) != "directory") {
        return nextResolver
    };

    return @ExternalResolver{
        cache: $cache::makeCache(),
        nextResolver,
        path
    }
};
