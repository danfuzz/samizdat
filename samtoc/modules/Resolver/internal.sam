## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Type definition: InternalResolver
##
## Payload:
## * cache -- cache of resolved results
## * nextResolver -- resolver to defer to when this one fails to resolve.
## * path -- filesystem path to a directory of internal-access files.
##

import core.Io0;
import core.Lang0Node;

import Reader;

import ./cache;
import ./protocol :: resolve;


##
## Private Definitions
##

## Does direct resolution on the given `source`. Only ever called when
## `source` is known to be `internal` and so *might* be found directly
## in or under this resolver's directory.
fn directResolve(self, source) {
    def subPath = dataOf(source);
    def basePath = "\(self::path)/\(subPath)";
    def infoPath = "\(basePath).saminfo";
    def sourcePath = "\(basePath).sam";

    <> if ($Io0::fileType(infoPath) == "file") {
        ## We found a prefab info file. Read it!
        def info = $Reader::readEvalExpression0(infoPath);
        <> @module{info}
    } else if ($Io0::fileType(sourcePath) == "file") {
        ## We found a source file. Read it and resolve!
        fn resolveFn(source) { <> self.resolve(source) };
        def tree = $Reader::readProgram(sourcePath, resolveFn);
        def info = $Lang0Node::makeInfoMap(tree);
        <> @module{info}
    }
};


##
## Exported Definitions
##

fn @@InternalResolver.resolve(source) {
    if (def found = $cache::cacheGet(this::cache, source)) {
        ## `found` is always a list. See comment below.
        return? found*
    };

    ## The result is always a list, so that we can cache a not-found result
    ## as the empty list.
    def result = (
        hasType(source, @@internal)
            & this.directResolve(source)
            | (this::nextResolver).resolve(source)
    )?;

    ## Cache the result, so we don't bother with a search the next time.
    $cache::cachePut(this::cache, source, result);

    <> result*
};

export fn makeInternalResolver(path, nextResolver) {
    <> @InternalResolver{
        cache: $cache::makeCache(),
        nextResolver,
        path
    }
};
