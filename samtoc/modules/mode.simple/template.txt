// GENERATED CODE!
// GENERATED CODE!
// GENERATED CODE!
//
// This code *might* be derived from a copyrighted source. Proceed with
// caution!

#include "type/Bool.h"
#include "type/Box.h"
#include "type/Builtin.h"
#include "type/Class.h"
#include "type/Collection.h"
#include "type/DerivedData.h"
#include "type/Int.h"
#include "type/Jump.h"
#include "type/List.h"
#include "type/Map.h"
#include "type/Null.h"
#include "type/String.h"
#include "type/Symbol.h"
#include "type/SymbolTable.h"
#include "type/define.h"
#include "util.h"

/** Global environment originally passed into `eval`. */
static zvalue GLOBALS = NULL;


//
// Literal values
//

\(literalDeclarations)
static void initLiterals(zvalue env) {
\(literalInits)}


//
// Closure definitions
//

\(closureDeclarations)
\(closureBodies)
\(closureMakers)
static zvalue mainClosure(void) {
\(mainClosure)}


//
// Main entry point
//

/** Top-level evaluation result. */
static zvalue EVAL_RESULT = NULL;

zvalue eval(zvalue env) {
  if (GLOBALS == NULL) {
    GLOBALS = env;
    initLiterals(env);
  } else if (!valEq(GLOBALS, env)) {
    die("Cannot re-eval with different global environment.");
  }

  if (EVAL_RESULT == NULL) {
    EVAL_RESULT = mainClosure();
    datImmortalize(EVAL_RESULT);
  }

  return EVAL_RESULT;
}
