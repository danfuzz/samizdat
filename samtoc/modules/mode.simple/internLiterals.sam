## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

import core.Lang0Node :: *;

import VarCalc :: get_varRefs;

import ./Interner :: intern;


##
## Private Definitions
##

## `node.lits(interner)`, implements one layer of literal interning.
fn .lits(interner);

fn @@apply.lits(interner) {
    def function = lits(this.function, interner);
    def actuals = lits(this.actuals, interner);

    <> @apply{actuals, function}
};

fn @@call.lits(interner) {
    <> @call{
        function: lits(this.function, interner),
        actuals: [ a in this.actuals <> lits(a, interner) ]
    }
};

fn @@closure.lits(interner) {
    def name = (def value = this.name)
        & {name: lits(@literal{value}, interner)}
        | {};

    <> makeFullClosure({
        name*,
        formals: this.formals,
        statements: [ s in this.statements <> lits(s, interner) ],
        yield: lits(this.yieldNode, interner),
        ((def yieldDef = this.yieldDef) & {yieldDef} | {})*
    })
};

fn @@export.lits(interner) {
    def value = lits(this.nodeValue, interner);
    <> @export{value}
};

fn @@exportSelection.lits(interner) {
    <> this
};

## Used as the `source` in `import*` nodes.
fn @@external.lits(interner) {
    <> @external(interner.intern(dataOf(this)))
};

fn @@importModule.lits(interner) {
    def source = lits(this.source, interner);
    <> @importModule{dataOf(this)*, source}
};

fn @@importModuleSelection.lits(interner) {
    def source = lits(this.source, interner);
    <> @importModuleSelection{dataOf(this)*, source}
};

fn @@importResource.lits(interner) {
    def source = lits(this.source, interner);
    def format = interner.intern(this.format);
    <> @importResource{dataOf(this)*, source, format}
};

## Used as the `source` in `import*` nodes.
fn @@internal.lits(interner) {
    <> @internal(interner.intern(dataOf(this)))
};

fn @@literal.lits(interner) {
    <> @literalRef{id: interner.intern(this.nodeValue)}
};

fn @@maybe.lits(interner) {
    def value = lits(this.nodeValue, interner);
    <> @maybe{value}
};

fn @@noYield.lits(interner) {
    def value = lits(this.nodeValue, interner);
    <> @noYield{value}
};

fn @@varBind.lits(interner) {
    <> @varBind{
        name: this.name,
        value: lits(this.nodeValue, interner)
    }
};

fn @@varDef.lits(interner) {
    def value = ifValue { <> this.nodeValue }
        { value <> {value: lits(value, interner)} }
        { <> {} };
    <> @varDef{name: this.name, value*}
};

fn @@varDefMutable.lits(interner) {
    def value = ifValue { <> this.nodeValue }
        { value <> {value: lits(value, interner)} }
        { <> {} };
    <> @varDefMutable{name: this.name, value*}
};

fn @@varRef.lits(interner) {
    <> this
};

fn @@void.lits(interner) {
    <> this
};


##
## Exported Definitions
##

## Interns all literal nodes at or under the given `node`, into the given
## `interner`. Returns a replacement for the original `node` argument, in
## which literals have been replaced by indexed references to same.
export fn internLiterals(node, interner) {
    <> lits(node, interner);
};
