## Copyright 2013-2014 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

def CommandLine = moduleUse({name: ["core", "CommandLine"]});
def Io1 = moduleUse({name: ["core", "Io1"]});


## Removes the `.*` suffix from `name`.
fn withoutSuffix(name) {
    def dotsAt = [ index in (0..), ch in name <> (ch == ".") & index ];

    if (dotsAt == []) {
        ## No suffix on the name.
        return name
    } else {
        return name[..!dotsAt[^0]]
    }
};

fn getSourcePath(rawPath, args) {
    return Io1::pathFromFlat(
        (def inDir = args::options::"in-dir")
        & "\(inDir)/\(rawPath)"
        | rawPath);
};

fn getOutputPath(rawPath, args) {
    if (def output = args::options::output) {
        return Io1::pathFromFlat(output)
    };

    def path = Io1::pathFromFlat(
        (def outDir = args::options::"out-dir")
        & "\(outDir)/\(rawPath)"
        | rawPath);

    def baseName = withoutSuffix(path[^0]);
    return [path[..!]*, "\(baseName).c"]
};

fn doOne(modeModule, args, sourceName) {
    def sourcePath = getSourcePath(sourceName, args);
    def outputPath = getOutputPath(sourceName, args);

    Io1::note("\
        \%q(sourcePath)
        -> \%q(outputPath)\n");

    modeModule::compile(sourcePath, outputPath);
};

fn main(selfPath, rawArgs*) {
    Io1::note("\n\
        Starting: \%q(selfPath)
        Raw args: \%q(rawArgs)\n");

    def args = CommandLine::parseArgs(rawArgs);
    def modeName = args::options::mode | "fake";

    Io1::note("Mode: \%q(modeName)\n");
    def modeModule = moduleUse({name: [modeName]});

    def sources = args::args;

    if (#sources == 0) {
        Io1::note("No source files specified!");
        return 1
    };

    if (args::options::output & (#sources > 1)) {
        Io1::note("Cannot use --output with more than one source!");
        return 1
    };

    for (s in sources) {
        doOne(modeModule, args, s)
    };
};

<> {main}
